// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.MtlskeystoreClientCertificateThirdPartyVersionsCertificateBlockArgs;
import com.pulumi.akamai.inputs.MtlskeystoreClientCertificateThirdPartyVersionsCsrBlockArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MtlskeystoreClientCertificateThirdPartyVersionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final MtlskeystoreClientCertificateThirdPartyVersionsArgs Empty = new MtlskeystoreClientCertificateThirdPartyVersionsArgs();

    /**
     * Details of the certificate block for the client certificate version.
     * 
     */
    @Import(name="certificateBlock")
    private @Nullable Output<MtlskeystoreClientCertificateThirdPartyVersionsCertificateBlockArgs> certificateBlock;

    /**
     * @return Details of the certificate block for the client certificate version.
     * 
     */
    public Optional<Output<MtlskeystoreClientCertificateThirdPartyVersionsCertificateBlockArgs>> certificateBlock() {
        return Optional.ofNullable(this.certificateBlock);
    }

    /**
     * The user who uploaded the THIRD_PARTY client certificate version. Appears as null if not specified.
     * 
     */
    @Import(name="certificateSubmittedBy")
    private @Nullable Output<String> certificateSubmittedBy;

    /**
     * @return The user who uploaded the THIRD_PARTY client certificate version. Appears as null if not specified.
     * 
     */
    public Optional<Output<String>> certificateSubmittedBy() {
        return Optional.ofNullable(this.certificateSubmittedBy);
    }

    /**
     * An ISO 8601 timestamp indicating when the THIRD_PARTY signer client certificate version was uploaded. Appears as null if not specified.
     * 
     */
    @Import(name="certificateSubmittedDate")
    private @Nullable Output<String> certificateSubmittedDate;

    /**
     * @return An ISO 8601 timestamp indicating when the THIRD_PARTY signer client certificate version was uploaded. Appears as null if not specified.
     * 
     */
    public Optional<Output<String>> certificateSubmittedDate() {
        return Optional.ofNullable(this.certificateSubmittedDate);
    }

    /**
     * The user who created the client certificate version.
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    /**
     * @return The user who created the client certificate version.
     * 
     */
    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * An ISO 8601 timestamp indicating the client certificate version&#39;s creation.
     * 
     */
    @Import(name="createdDate")
    private @Nullable Output<String> createdDate;

    /**
     * @return An ISO 8601 timestamp indicating the client certificate version&#39;s creation.
     * 
     */
    public Optional<Output<String>> createdDate() {
        return Optional.ofNullable(this.createdDate);
    }

    /**
     * Details of the Certificate Signing Request (CSR) for the client certificate version.
     * 
     */
    @Import(name="csrBlock")
    private @Nullable Output<MtlskeystoreClientCertificateThirdPartyVersionsCsrBlockArgs> csrBlock;

    /**
     * @return Details of the Certificate Signing Request (CSR) for the client certificate version.
     * 
     */
    public Optional<Output<MtlskeystoreClientCertificateThirdPartyVersionsCsrBlockArgs>> csrBlock() {
        return Optional.ofNullable(this.csrBlock);
    }

    /**
     * An ISO 8601 timestamp indicating the client certificate version&#39;s deletion request. Appears as null if there&#39;s no request.
     * 
     */
    @Import(name="deleteRequestedDate")
    private @Nullable Output<String> deleteRequestedDate;

    /**
     * @return An ISO 8601 timestamp indicating the client certificate version&#39;s deletion request. Appears as null if there&#39;s no request.
     * 
     */
    public Optional<Output<String>> deleteRequestedDate() {
        return Optional.ofNullable(this.deleteRequestedDate);
    }

    /**
     * Specifies the key elliptic curve when key algorithm `ECDSA` is used.
     * 
     */
    @Import(name="ellipticCurve")
    private @Nullable Output<String> ellipticCurve;

    /**
     * @return Specifies the key elliptic curve when key algorithm `ECDSA` is used.
     * 
     */
    public Optional<Output<String>> ellipticCurve() {
        return Optional.ofNullable(this.ellipticCurve);
    }

    /**
     * An ISO 8601 timestamp indicating when the client certificate version expires.
     * 
     */
    @Import(name="expiryDate")
    private @Nullable Output<String> expiryDate;

    /**
     * @return An ISO 8601 timestamp indicating when the client certificate version expires.
     * 
     */
    public Optional<Output<String>> expiryDate() {
        return Optional.ofNullable(this.expiryDate);
    }

    /**
     * An ISO 8601 timestamp indicating the client certificate version&#39;s availability.
     * 
     */
    @Import(name="issuedDate")
    private @Nullable Output<String> issuedDate;

    /**
     * @return An ISO 8601 timestamp indicating the client certificate version&#39;s availability.
     * 
     */
    public Optional<Output<String>> issuedDate() {
        return Optional.ofNullable(this.issuedDate);
    }

    /**
     * The signing entity of the client certificate version.
     * 
     */
    @Import(name="issuer")
    private @Nullable Output<String> issuer;

    /**
     * @return The signing entity of the client certificate version.
     * 
     */
    public Optional<Output<String>> issuer() {
        return Optional.ofNullable(this.issuer);
    }

    /**
     * Identifies the client certificate version&#39;s encryption algorithm. Supported values are `RSA` and `ECDSA`.
     * 
     */
    @Import(name="keyAlgorithm")
    private @Nullable Output<String> keyAlgorithm;

    /**
     * @return Identifies the client certificate version&#39;s encryption algorithm. Supported values are `RSA` and `ECDSA`.
     * 
     */
    public Optional<Output<String>> keyAlgorithm() {
        return Optional.ofNullable(this.keyAlgorithm);
    }

    /**
     * The private key length of the client certificate version when key algorithm `RSA` is used.
     * 
     */
    @Import(name="keySizeInBytes")
    private @Nullable Output<String> keySizeInBytes;

    /**
     * @return The private key length of the client certificate version when key algorithm `RSA` is used.
     * 
     */
    public Optional<Output<String>> keySizeInBytes() {
        return Optional.ofNullable(this.keySizeInBytes);
    }

    /**
     * An ISO 8601 timestamp indicating the client certificate version&#39;s deletion. Appears as null if there&#39;s no request.
     * 
     */
    @Import(name="scheduledDeleteDate")
    private @Nullable Output<String> scheduledDeleteDate;

    /**
     * @return An ISO 8601 timestamp indicating the client certificate version&#39;s deletion. Appears as null if there&#39;s no request.
     * 
     */
    public Optional<Output<String>> scheduledDeleteDate() {
        return Optional.ofNullable(this.scheduledDeleteDate);
    }

    /**
     * Specifies the algorithm that secures the data exchange between the edge server and origin.
     * 
     */
    @Import(name="signatureAlgorithm")
    private @Nullable Output<String> signatureAlgorithm;

    /**
     * @return Specifies the algorithm that secures the data exchange between the edge server and origin.
     * 
     */
    public Optional<Output<String>> signatureAlgorithm() {
        return Optional.ofNullable(this.signatureAlgorithm);
    }

    /**
     * The client certificate version status. Possible values: `AWAITING_SIGNED_CERTIFICATE`, `DEPLOYMENT_PENDING`, `DEPLOYED`, or `DELETE_PENDING`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The client certificate version status. Possible values: `AWAITING_SIGNED_CERTIFICATE`, `DEPLOYMENT_PENDING`, `DEPLOYED`, or `DELETE_PENDING`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The public key&#39;s entity stored in the client certificate version&#39;s subject public key field.
     * 
     */
    @Import(name="subject")
    private @Nullable Output<String> subject;

    /**
     * @return The public key&#39;s entity stored in the client certificate version&#39;s subject public key field.
     * 
     */
    public Optional<Output<String>> subject() {
        return Optional.ofNullable(this.subject);
    }

    /**
     * The unique identifier of the client certificate version.
     * 
     */
    @Import(name="version")
    private @Nullable Output<Integer> version;

    /**
     * @return The unique identifier of the client certificate version.
     * 
     */
    public Optional<Output<Integer>> version() {
        return Optional.ofNullable(this.version);
    }

    /**
     * Unique identifier for the client certificate version. Use it to configure mutual authentication (mTLS) sessions between the origin and edge servers in Property Manager&#39;s Mutual TLS Origin Keystore behavior.
     * 
     */
    @Import(name="versionGuid")
    private @Nullable Output<String> versionGuid;

    /**
     * @return Unique identifier for the client certificate version. Use it to configure mutual authentication (mTLS) sessions between the origin and edge servers in Property Manager&#39;s Mutual TLS Origin Keystore behavior.
     * 
     */
    public Optional<Output<String>> versionGuid() {
        return Optional.ofNullable(this.versionGuid);
    }

    private MtlskeystoreClientCertificateThirdPartyVersionsArgs() {}

    private MtlskeystoreClientCertificateThirdPartyVersionsArgs(MtlskeystoreClientCertificateThirdPartyVersionsArgs $) {
        this.certificateBlock = $.certificateBlock;
        this.certificateSubmittedBy = $.certificateSubmittedBy;
        this.certificateSubmittedDate = $.certificateSubmittedDate;
        this.createdBy = $.createdBy;
        this.createdDate = $.createdDate;
        this.csrBlock = $.csrBlock;
        this.deleteRequestedDate = $.deleteRequestedDate;
        this.ellipticCurve = $.ellipticCurve;
        this.expiryDate = $.expiryDate;
        this.issuedDate = $.issuedDate;
        this.issuer = $.issuer;
        this.keyAlgorithm = $.keyAlgorithm;
        this.keySizeInBytes = $.keySizeInBytes;
        this.scheduledDeleteDate = $.scheduledDeleteDate;
        this.signatureAlgorithm = $.signatureAlgorithm;
        this.status = $.status;
        this.subject = $.subject;
        this.version = $.version;
        this.versionGuid = $.versionGuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MtlskeystoreClientCertificateThirdPartyVersionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MtlskeystoreClientCertificateThirdPartyVersionsArgs $;

        public Builder() {
            $ = new MtlskeystoreClientCertificateThirdPartyVersionsArgs();
        }

        public Builder(MtlskeystoreClientCertificateThirdPartyVersionsArgs defaults) {
            $ = new MtlskeystoreClientCertificateThirdPartyVersionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateBlock Details of the certificate block for the client certificate version.
         * 
         * @return builder
         * 
         */
        public Builder certificateBlock(@Nullable Output<MtlskeystoreClientCertificateThirdPartyVersionsCertificateBlockArgs> certificateBlock) {
            $.certificateBlock = certificateBlock;
            return this;
        }

        /**
         * @param certificateBlock Details of the certificate block for the client certificate version.
         * 
         * @return builder
         * 
         */
        public Builder certificateBlock(MtlskeystoreClientCertificateThirdPartyVersionsCertificateBlockArgs certificateBlock) {
            return certificateBlock(Output.of(certificateBlock));
        }

        /**
         * @param certificateSubmittedBy The user who uploaded the THIRD_PARTY client certificate version. Appears as null if not specified.
         * 
         * @return builder
         * 
         */
        public Builder certificateSubmittedBy(@Nullable Output<String> certificateSubmittedBy) {
            $.certificateSubmittedBy = certificateSubmittedBy;
            return this;
        }

        /**
         * @param certificateSubmittedBy The user who uploaded the THIRD_PARTY client certificate version. Appears as null if not specified.
         * 
         * @return builder
         * 
         */
        public Builder certificateSubmittedBy(String certificateSubmittedBy) {
            return certificateSubmittedBy(Output.of(certificateSubmittedBy));
        }

        /**
         * @param certificateSubmittedDate An ISO 8601 timestamp indicating when the THIRD_PARTY signer client certificate version was uploaded. Appears as null if not specified.
         * 
         * @return builder
         * 
         */
        public Builder certificateSubmittedDate(@Nullable Output<String> certificateSubmittedDate) {
            $.certificateSubmittedDate = certificateSubmittedDate;
            return this;
        }

        /**
         * @param certificateSubmittedDate An ISO 8601 timestamp indicating when the THIRD_PARTY signer client certificate version was uploaded. Appears as null if not specified.
         * 
         * @return builder
         * 
         */
        public Builder certificateSubmittedDate(String certificateSubmittedDate) {
            return certificateSubmittedDate(Output.of(certificateSubmittedDate));
        }

        /**
         * @param createdBy The user who created the client certificate version.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy The user who created the client certificate version.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param createdDate An ISO 8601 timestamp indicating the client certificate version&#39;s creation.
         * 
         * @return builder
         * 
         */
        public Builder createdDate(@Nullable Output<String> createdDate) {
            $.createdDate = createdDate;
            return this;
        }

        /**
         * @param createdDate An ISO 8601 timestamp indicating the client certificate version&#39;s creation.
         * 
         * @return builder
         * 
         */
        public Builder createdDate(String createdDate) {
            return createdDate(Output.of(createdDate));
        }

        /**
         * @param csrBlock Details of the Certificate Signing Request (CSR) for the client certificate version.
         * 
         * @return builder
         * 
         */
        public Builder csrBlock(@Nullable Output<MtlskeystoreClientCertificateThirdPartyVersionsCsrBlockArgs> csrBlock) {
            $.csrBlock = csrBlock;
            return this;
        }

        /**
         * @param csrBlock Details of the Certificate Signing Request (CSR) for the client certificate version.
         * 
         * @return builder
         * 
         */
        public Builder csrBlock(MtlskeystoreClientCertificateThirdPartyVersionsCsrBlockArgs csrBlock) {
            return csrBlock(Output.of(csrBlock));
        }

        /**
         * @param deleteRequestedDate An ISO 8601 timestamp indicating the client certificate version&#39;s deletion request. Appears as null if there&#39;s no request.
         * 
         * @return builder
         * 
         */
        public Builder deleteRequestedDate(@Nullable Output<String> deleteRequestedDate) {
            $.deleteRequestedDate = deleteRequestedDate;
            return this;
        }

        /**
         * @param deleteRequestedDate An ISO 8601 timestamp indicating the client certificate version&#39;s deletion request. Appears as null if there&#39;s no request.
         * 
         * @return builder
         * 
         */
        public Builder deleteRequestedDate(String deleteRequestedDate) {
            return deleteRequestedDate(Output.of(deleteRequestedDate));
        }

        /**
         * @param ellipticCurve Specifies the key elliptic curve when key algorithm `ECDSA` is used.
         * 
         * @return builder
         * 
         */
        public Builder ellipticCurve(@Nullable Output<String> ellipticCurve) {
            $.ellipticCurve = ellipticCurve;
            return this;
        }

        /**
         * @param ellipticCurve Specifies the key elliptic curve when key algorithm `ECDSA` is used.
         * 
         * @return builder
         * 
         */
        public Builder ellipticCurve(String ellipticCurve) {
            return ellipticCurve(Output.of(ellipticCurve));
        }

        /**
         * @param expiryDate An ISO 8601 timestamp indicating when the client certificate version expires.
         * 
         * @return builder
         * 
         */
        public Builder expiryDate(@Nullable Output<String> expiryDate) {
            $.expiryDate = expiryDate;
            return this;
        }

        /**
         * @param expiryDate An ISO 8601 timestamp indicating when the client certificate version expires.
         * 
         * @return builder
         * 
         */
        public Builder expiryDate(String expiryDate) {
            return expiryDate(Output.of(expiryDate));
        }

        /**
         * @param issuedDate An ISO 8601 timestamp indicating the client certificate version&#39;s availability.
         * 
         * @return builder
         * 
         */
        public Builder issuedDate(@Nullable Output<String> issuedDate) {
            $.issuedDate = issuedDate;
            return this;
        }

        /**
         * @param issuedDate An ISO 8601 timestamp indicating the client certificate version&#39;s availability.
         * 
         * @return builder
         * 
         */
        public Builder issuedDate(String issuedDate) {
            return issuedDate(Output.of(issuedDate));
        }

        /**
         * @param issuer The signing entity of the client certificate version.
         * 
         * @return builder
         * 
         */
        public Builder issuer(@Nullable Output<String> issuer) {
            $.issuer = issuer;
            return this;
        }

        /**
         * @param issuer The signing entity of the client certificate version.
         * 
         * @return builder
         * 
         */
        public Builder issuer(String issuer) {
            return issuer(Output.of(issuer));
        }

        /**
         * @param keyAlgorithm Identifies the client certificate version&#39;s encryption algorithm. Supported values are `RSA` and `ECDSA`.
         * 
         * @return builder
         * 
         */
        public Builder keyAlgorithm(@Nullable Output<String> keyAlgorithm) {
            $.keyAlgorithm = keyAlgorithm;
            return this;
        }

        /**
         * @param keyAlgorithm Identifies the client certificate version&#39;s encryption algorithm. Supported values are `RSA` and `ECDSA`.
         * 
         * @return builder
         * 
         */
        public Builder keyAlgorithm(String keyAlgorithm) {
            return keyAlgorithm(Output.of(keyAlgorithm));
        }

        /**
         * @param keySizeInBytes The private key length of the client certificate version when key algorithm `RSA` is used.
         * 
         * @return builder
         * 
         */
        public Builder keySizeInBytes(@Nullable Output<String> keySizeInBytes) {
            $.keySizeInBytes = keySizeInBytes;
            return this;
        }

        /**
         * @param keySizeInBytes The private key length of the client certificate version when key algorithm `RSA` is used.
         * 
         * @return builder
         * 
         */
        public Builder keySizeInBytes(String keySizeInBytes) {
            return keySizeInBytes(Output.of(keySizeInBytes));
        }

        /**
         * @param scheduledDeleteDate An ISO 8601 timestamp indicating the client certificate version&#39;s deletion. Appears as null if there&#39;s no request.
         * 
         * @return builder
         * 
         */
        public Builder scheduledDeleteDate(@Nullable Output<String> scheduledDeleteDate) {
            $.scheduledDeleteDate = scheduledDeleteDate;
            return this;
        }

        /**
         * @param scheduledDeleteDate An ISO 8601 timestamp indicating the client certificate version&#39;s deletion. Appears as null if there&#39;s no request.
         * 
         * @return builder
         * 
         */
        public Builder scheduledDeleteDate(String scheduledDeleteDate) {
            return scheduledDeleteDate(Output.of(scheduledDeleteDate));
        }

        /**
         * @param signatureAlgorithm Specifies the algorithm that secures the data exchange between the edge server and origin.
         * 
         * @return builder
         * 
         */
        public Builder signatureAlgorithm(@Nullable Output<String> signatureAlgorithm) {
            $.signatureAlgorithm = signatureAlgorithm;
            return this;
        }

        /**
         * @param signatureAlgorithm Specifies the algorithm that secures the data exchange between the edge server and origin.
         * 
         * @return builder
         * 
         */
        public Builder signatureAlgorithm(String signatureAlgorithm) {
            return signatureAlgorithm(Output.of(signatureAlgorithm));
        }

        /**
         * @param status The client certificate version status. Possible values: `AWAITING_SIGNED_CERTIFICATE`, `DEPLOYMENT_PENDING`, `DEPLOYED`, or `DELETE_PENDING`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The client certificate version status. Possible values: `AWAITING_SIGNED_CERTIFICATE`, `DEPLOYMENT_PENDING`, `DEPLOYED`, or `DELETE_PENDING`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param subject The public key&#39;s entity stored in the client certificate version&#39;s subject public key field.
         * 
         * @return builder
         * 
         */
        public Builder subject(@Nullable Output<String> subject) {
            $.subject = subject;
            return this;
        }

        /**
         * @param subject The public key&#39;s entity stored in the client certificate version&#39;s subject public key field.
         * 
         * @return builder
         * 
         */
        public Builder subject(String subject) {
            return subject(Output.of(subject));
        }

        /**
         * @param version The unique identifier of the client certificate version.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<Integer> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The unique identifier of the client certificate version.
         * 
         * @return builder
         * 
         */
        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        /**
         * @param versionGuid Unique identifier for the client certificate version. Use it to configure mutual authentication (mTLS) sessions between the origin and edge servers in Property Manager&#39;s Mutual TLS Origin Keystore behavior.
         * 
         * @return builder
         * 
         */
        public Builder versionGuid(@Nullable Output<String> versionGuid) {
            $.versionGuid = versionGuid;
            return this;
        }

        /**
         * @param versionGuid Unique identifier for the client certificate version. Use it to configure mutual authentication (mTLS) sessions between the origin and edge servers in Property Manager&#39;s Mutual TLS Origin Keystore behavior.
         * 
         * @return builder
         * 
         */
        public Builder versionGuid(String versionGuid) {
            return versionGuid(Output.of(versionGuid));
        }

        public MtlskeystoreClientCertificateThirdPartyVersionsArgs build() {
            return $;
        }
    }

}
