// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class GetPropertyRulesBuilderRulesV20240109Variable extends com.pulumi.resources.InvokeArgs {

    public static final GetPropertyRulesBuilderRulesV20240109Variable Empty = new GetPropertyRulesBuilderRulesV20240109Variable();

    /**
     * The description for a variable
     * 
     */
    @Import(name="description", required=true)
    private String description;

    /**
     * @return The description for a variable
     * 
     */
    public String description() {
        return this.description;
    }

    /**
     * Whether a variable should be hidden
     * 
     */
    @Import(name="hidden", required=true)
    private Boolean hidden;

    /**
     * @return Whether a variable should be hidden
     * 
     */
    public Boolean hidden() {
        return this.hidden;
    }

    /**
     * The name of a variable
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The name of a variable
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * States whether a variable contains sensitive information
     * 
     */
    @Import(name="sensitive", required=true)
    private Boolean sensitive;

    /**
     * @return States whether a variable contains sensitive information
     * 
     */
    public Boolean sensitive() {
        return this.sensitive;
    }

    /**
     * The value for a variable
     * 
     */
    @Import(name="value", required=true)
    private String value;

    /**
     * @return The value for a variable
     * 
     */
    public String value() {
        return this.value;
    }

    private GetPropertyRulesBuilderRulesV20240109Variable() {}

    private GetPropertyRulesBuilderRulesV20240109Variable(GetPropertyRulesBuilderRulesV20240109Variable $) {
        this.description = $.description;
        this.hidden = $.hidden;
        this.name = $.name;
        this.sensitive = $.sensitive;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesBuilderRulesV20240109Variable defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesBuilderRulesV20240109Variable $;

        public Builder() {
            $ = new GetPropertyRulesBuilderRulesV20240109Variable();
        }

        public Builder(GetPropertyRulesBuilderRulesV20240109Variable defaults) {
            $ = new GetPropertyRulesBuilderRulesV20240109Variable(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description for a variable
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            $.description = description;
            return this;
        }

        /**
         * @param hidden Whether a variable should be hidden
         * 
         * @return builder
         * 
         */
        public Builder hidden(Boolean hidden) {
            $.hidden = hidden;
            return this;
        }

        /**
         * @param name The name of a variable
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param sensitive States whether a variable contains sensitive information
         * 
         * @return builder
         * 
         */
        public Builder sensitive(Boolean sensitive) {
            $.sensitive = sensitive;
            return this;
        }

        /**
         * @param value The value for a variable
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            $.value = value;
            return this;
        }

        public GetPropertyRulesBuilderRulesV20240109Variable build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("GetPropertyRulesBuilderRulesV20240109Variable", "description");
            }
            if ($.hidden == null) {
                throw new MissingRequiredPropertyException("GetPropertyRulesBuilderRulesV20240109Variable", "hidden");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetPropertyRulesBuilderRulesV20240109Variable", "name");
            }
            if ($.sensitive == null) {
                throw new MissingRequiredPropertyException("GetPropertyRulesBuilderRulesV20240109Variable", "sensitive");
            }
            if ($.value == null) {
                throw new MissingRequiredPropertyException("GetPropertyRulesBuilderRulesV20240109Variable", "value");
            }
            return $;
        }
    }

}
