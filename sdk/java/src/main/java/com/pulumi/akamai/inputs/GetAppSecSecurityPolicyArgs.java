// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAppSecSecurityPolicyArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAppSecSecurityPolicyArgs Empty = new GetAppSecSecurityPolicyArgs();

    /**
     * . Unique identifier of the security configuration associated with the security policies.
     * 
     */
    @Import(name="configId", required=true)
    private Output<Integer> configId;

    /**
     * @return . Unique identifier of the security configuration associated with the security policies.
     * 
     */
    public Output<Integer> configId() {
        return this.configId;
    }

    /**
     * . (Optional). Name of the security policy you want to return information for (be sure to reference the policy name and not the policy ID). If not included, information is returned for all your security policies.
     * 
     */
    @Import(name="securityPolicyName")
    private @Nullable Output<String> securityPolicyName;

    /**
     * @return . (Optional). Name of the security policy you want to return information for (be sure to reference the policy name and not the policy ID). If not included, information is returned for all your security policies.
     * 
     */
    public Optional<Output<String>> securityPolicyName() {
        return Optional.ofNullable(this.securityPolicyName);
    }

    private GetAppSecSecurityPolicyArgs() {}

    private GetAppSecSecurityPolicyArgs(GetAppSecSecurityPolicyArgs $) {
        this.configId = $.configId;
        this.securityPolicyName = $.securityPolicyName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAppSecSecurityPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAppSecSecurityPolicyArgs $;

        public Builder() {
            $ = new GetAppSecSecurityPolicyArgs();
        }

        public Builder(GetAppSecSecurityPolicyArgs defaults) {
            $ = new GetAppSecSecurityPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configId . Unique identifier of the security configuration associated with the security policies.
         * 
         * @return builder
         * 
         */
        public Builder configId(Output<Integer> configId) {
            $.configId = configId;
            return this;
        }

        /**
         * @param configId . Unique identifier of the security configuration associated with the security policies.
         * 
         * @return builder
         * 
         */
        public Builder configId(Integer configId) {
            return configId(Output.of(configId));
        }

        /**
         * @param securityPolicyName . (Optional). Name of the security policy you want to return information for (be sure to reference the policy name and not the policy ID). If not included, information is returned for all your security policies.
         * 
         * @return builder
         * 
         */
        public Builder securityPolicyName(@Nullable Output<String> securityPolicyName) {
            $.securityPolicyName = securityPolicyName;
            return this;
        }

        /**
         * @param securityPolicyName . (Optional). Name of the security policy you want to return information for (be sure to reference the policy name and not the policy ID). If not included, information is returned for all your security policies.
         * 
         * @return builder
         * 
         */
        public Builder securityPolicyName(String securityPolicyName) {
            return securityPolicyName(Output.of(securityPolicyName));
        }

        public GetAppSecSecurityPolicyArgs build() {
            $.configId = Objects.requireNonNull($.configId, "expected parameter 'configId' to be non-null");
            return $;
        }
    }

}
