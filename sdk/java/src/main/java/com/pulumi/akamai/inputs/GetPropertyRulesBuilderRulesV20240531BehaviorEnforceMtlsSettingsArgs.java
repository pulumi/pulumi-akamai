// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyRulesBuilderRulesV20240531BehaviorEnforceMtlsSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetPropertyRulesBuilderRulesV20240531BehaviorEnforceMtlsSettingsArgs Empty = new GetPropertyRulesBuilderRulesV20240531BehaviorEnforceMtlsSettingsArgs();

    /**
     * Specify the client certificate authority (CA) sets you want to support in client requests. Run the `List CA Sets` operation in the mTLS Edge TrustStore API to get the `setId` value and pass it in this option as a string. If a request includes a set not defined here, it will be denied. The preset list items you can select are contingent on the CA sets you&#39;ve created using the mTLS Edge Truststore, and then associated with a certificate in the `Certificate Provisioning System`.
     * 
     */
    @Import(name="certificateAuthoritySets")
    private @Nullable Output<List<String>> certificateAuthoritySets;

    /**
     * @return Specify the client certificate authority (CA) sets you want to support in client requests. Run the `List CA Sets` operation in the mTLS Edge TrustStore API to get the `setId` value and pass it in this option as a string. If a request includes a set not defined here, it will be denied. The preset list items you can select are contingent on the CA sets you&#39;ve created using the mTLS Edge Truststore, and then associated with a certificate in the `Certificate Provisioning System`.
     * 
     */
    public Optional<Output<List<String>>> certificateAuthoritySets() {
        return Optional.ofNullable(this.certificateAuthoritySets);
    }

    /**
     * Whether to require a specific mutual transport layer security (mTLS) certificate authority (CA) set in a request from a client to the edge network.
     * 
     */
    @Import(name="enableAuthSet")
    private @Nullable Output<Boolean> enableAuthSet;

    /**
     * @return Whether to require a specific mutual transport layer security (mTLS) certificate authority (CA) set in a request from a client to the edge network.
     * 
     */
    public Optional<Output<Boolean>> enableAuthSet() {
        return Optional.ofNullable(this.enableAuthSet);
    }

    /**
     * This denies a request from a client that doesn&#39;t match what you&#39;ve set for the options in this behavior. When disabled, non-matching requests are allowed, but you can incorporate a custom handling operation, such as reviewing generated log entries to see the discrepancies, enable the `Client-To-Edge` authentication header, or issue a custom message.
     * 
     */
    @Import(name="enableDenyRequest")
    private @Nullable Output<Boolean> enableDenyRequest;

    /**
     * @return This denies a request from a client that doesn&#39;t match what you&#39;ve set for the options in this behavior. When disabled, non-matching requests are allowed, but you can incorporate a custom handling operation, such as reviewing generated log entries to see the discrepancies, enable the `Client-To-Edge` authentication header, or issue a custom message.
     * 
     */
    public Optional<Output<Boolean>> enableDenyRequest() {
        return Optional.ofNullable(this.enableDenyRequest);
    }

    /**
     * Whether the mutual transport layer security requests from a client should use the online certificate support protocol (OCSP). OCSP can determine the x.509 certificate revocation status during the TLS handshake.
     * 
     */
    @Import(name="enableOcspStatus")
    private @Nullable Output<Boolean> enableOcspStatus;

    /**
     * @return Whether the mutual transport layer security requests from a client should use the online certificate support protocol (OCSP). OCSP can determine the x.509 certificate revocation status during the TLS handshake.
     * 
     */
    public Optional<Output<Boolean>> enableOcspStatus() {
        return Optional.ofNullable(this.enableOcspStatus);
    }

    /**
     * Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    @Import(name="locked")
    private @Nullable Output<Boolean> locked;

    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Output<Boolean>> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * This option is for internal usage only.
     * 
     */
    @Import(name="templateUuid")
    private @Nullable Output<String> templateUuid;

    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<Output<String>> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }

    /**
     * A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private GetPropertyRulesBuilderRulesV20240531BehaviorEnforceMtlsSettingsArgs() {}

    private GetPropertyRulesBuilderRulesV20240531BehaviorEnforceMtlsSettingsArgs(GetPropertyRulesBuilderRulesV20240531BehaviorEnforceMtlsSettingsArgs $) {
        this.certificateAuthoritySets = $.certificateAuthoritySets;
        this.enableAuthSet = $.enableAuthSet;
        this.enableDenyRequest = $.enableDenyRequest;
        this.enableOcspStatus = $.enableOcspStatus;
        this.locked = $.locked;
        this.templateUuid = $.templateUuid;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesBuilderRulesV20240531BehaviorEnforceMtlsSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesBuilderRulesV20240531BehaviorEnforceMtlsSettingsArgs $;

        public Builder() {
            $ = new GetPropertyRulesBuilderRulesV20240531BehaviorEnforceMtlsSettingsArgs();
        }

        public Builder(GetPropertyRulesBuilderRulesV20240531BehaviorEnforceMtlsSettingsArgs defaults) {
            $ = new GetPropertyRulesBuilderRulesV20240531BehaviorEnforceMtlsSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateAuthoritySets Specify the client certificate authority (CA) sets you want to support in client requests. Run the `List CA Sets` operation in the mTLS Edge TrustStore API to get the `setId` value and pass it in this option as a string. If a request includes a set not defined here, it will be denied. The preset list items you can select are contingent on the CA sets you&#39;ve created using the mTLS Edge Truststore, and then associated with a certificate in the `Certificate Provisioning System`.
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthoritySets(@Nullable Output<List<String>> certificateAuthoritySets) {
            $.certificateAuthoritySets = certificateAuthoritySets;
            return this;
        }

        /**
         * @param certificateAuthoritySets Specify the client certificate authority (CA) sets you want to support in client requests. Run the `List CA Sets` operation in the mTLS Edge TrustStore API to get the `setId` value and pass it in this option as a string. If a request includes a set not defined here, it will be denied. The preset list items you can select are contingent on the CA sets you&#39;ve created using the mTLS Edge Truststore, and then associated with a certificate in the `Certificate Provisioning System`.
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthoritySets(List<String> certificateAuthoritySets) {
            return certificateAuthoritySets(Output.of(certificateAuthoritySets));
        }

        /**
         * @param certificateAuthoritySets Specify the client certificate authority (CA) sets you want to support in client requests. Run the `List CA Sets` operation in the mTLS Edge TrustStore API to get the `setId` value and pass it in this option as a string. If a request includes a set not defined here, it will be denied. The preset list items you can select are contingent on the CA sets you&#39;ve created using the mTLS Edge Truststore, and then associated with a certificate in the `Certificate Provisioning System`.
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthoritySets(String... certificateAuthoritySets) {
            return certificateAuthoritySets(List.of(certificateAuthoritySets));
        }

        /**
         * @param enableAuthSet Whether to require a specific mutual transport layer security (mTLS) certificate authority (CA) set in a request from a client to the edge network.
         * 
         * @return builder
         * 
         */
        public Builder enableAuthSet(@Nullable Output<Boolean> enableAuthSet) {
            $.enableAuthSet = enableAuthSet;
            return this;
        }

        /**
         * @param enableAuthSet Whether to require a specific mutual transport layer security (mTLS) certificate authority (CA) set in a request from a client to the edge network.
         * 
         * @return builder
         * 
         */
        public Builder enableAuthSet(Boolean enableAuthSet) {
            return enableAuthSet(Output.of(enableAuthSet));
        }

        /**
         * @param enableDenyRequest This denies a request from a client that doesn&#39;t match what you&#39;ve set for the options in this behavior. When disabled, non-matching requests are allowed, but you can incorporate a custom handling operation, such as reviewing generated log entries to see the discrepancies, enable the `Client-To-Edge` authentication header, or issue a custom message.
         * 
         * @return builder
         * 
         */
        public Builder enableDenyRequest(@Nullable Output<Boolean> enableDenyRequest) {
            $.enableDenyRequest = enableDenyRequest;
            return this;
        }

        /**
         * @param enableDenyRequest This denies a request from a client that doesn&#39;t match what you&#39;ve set for the options in this behavior. When disabled, non-matching requests are allowed, but you can incorporate a custom handling operation, such as reviewing generated log entries to see the discrepancies, enable the `Client-To-Edge` authentication header, or issue a custom message.
         * 
         * @return builder
         * 
         */
        public Builder enableDenyRequest(Boolean enableDenyRequest) {
            return enableDenyRequest(Output.of(enableDenyRequest));
        }

        /**
         * @param enableOcspStatus Whether the mutual transport layer security requests from a client should use the online certificate support protocol (OCSP). OCSP can determine the x.509 certificate revocation status during the TLS handshake.
         * 
         * @return builder
         * 
         */
        public Builder enableOcspStatus(@Nullable Output<Boolean> enableOcspStatus) {
            $.enableOcspStatus = enableOcspStatus;
            return this;
        }

        /**
         * @param enableOcspStatus Whether the mutual transport layer security requests from a client should use the online certificate support protocol (OCSP). OCSP can determine the x.509 certificate revocation status during the TLS handshake.
         * 
         * @return builder
         * 
         */
        public Builder enableOcspStatus(Boolean enableOcspStatus) {
            return enableOcspStatus(Output.of(enableOcspStatus));
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(@Nullable Output<Boolean> locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(Boolean locked) {
            return locked(Output.of(locked));
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(@Nullable Output<String> templateUuid) {
            $.templateUuid = templateUuid;
            return this;
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(String templateUuid) {
            return templateUuid(Output.of(templateUuid));
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public GetPropertyRulesBuilderRulesV20240531BehaviorEnforceMtlsSettingsArgs build() {
            return $;
        }
    }

}
