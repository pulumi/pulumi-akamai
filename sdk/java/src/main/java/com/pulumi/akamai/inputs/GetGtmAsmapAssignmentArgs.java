// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetGtmAsmapAssignmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetGtmAsmapAssignmentArgs Empty = new GetGtmAsmapAssignmentArgs();

    /**
     * Specifies an array of AS numbers.
     * 
     */
    @Import(name="asNumbers", required=true)
    private Output<List<Integer>> asNumbers;

    /**
     * @return Specifies an array of AS numbers.
     * 
     */
    public Output<List<Integer>> asNumbers() {
        return this.asNumbers;
    }

    /**
     * A unique identifier for an existing data center in the domain.
     * 
     */
    @Import(name="datacenterId", required=true)
    private Output<Integer> datacenterId;

    /**
     * @return A unique identifier for an existing data center in the domain.
     * 
     */
    public Output<Integer> datacenterId() {
        return this.datacenterId;
    }

    /**
     * A descriptive label for the group.
     * 
     */
    @Import(name="nickname", required=true)
    private Output<String> nickname;

    /**
     * @return A descriptive label for the group.
     * 
     */
    public Output<String> nickname() {
        return this.nickname;
    }

    private GetGtmAsmapAssignmentArgs() {}

    private GetGtmAsmapAssignmentArgs(GetGtmAsmapAssignmentArgs $) {
        this.asNumbers = $.asNumbers;
        this.datacenterId = $.datacenterId;
        this.nickname = $.nickname;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGtmAsmapAssignmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGtmAsmapAssignmentArgs $;

        public Builder() {
            $ = new GetGtmAsmapAssignmentArgs();
        }

        public Builder(GetGtmAsmapAssignmentArgs defaults) {
            $ = new GetGtmAsmapAssignmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param asNumbers Specifies an array of AS numbers.
         * 
         * @return builder
         * 
         */
        public Builder asNumbers(Output<List<Integer>> asNumbers) {
            $.asNumbers = asNumbers;
            return this;
        }

        /**
         * @param asNumbers Specifies an array of AS numbers.
         * 
         * @return builder
         * 
         */
        public Builder asNumbers(List<Integer> asNumbers) {
            return asNumbers(Output.of(asNumbers));
        }

        /**
         * @param asNumbers Specifies an array of AS numbers.
         * 
         * @return builder
         * 
         */
        public Builder asNumbers(Integer... asNumbers) {
            return asNumbers(List.of(asNumbers));
        }

        /**
         * @param datacenterId A unique identifier for an existing data center in the domain.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(Output<Integer> datacenterId) {
            $.datacenterId = datacenterId;
            return this;
        }

        /**
         * @param datacenterId A unique identifier for an existing data center in the domain.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(Integer datacenterId) {
            return datacenterId(Output.of(datacenterId));
        }

        /**
         * @param nickname A descriptive label for the group.
         * 
         * @return builder
         * 
         */
        public Builder nickname(Output<String> nickname) {
            $.nickname = nickname;
            return this;
        }

        /**
         * @param nickname A descriptive label for the group.
         * 
         * @return builder
         * 
         */
        public Builder nickname(String nickname) {
            return nickname(Output.of(nickname));
        }

        public GetGtmAsmapAssignmentArgs build() {
            if ($.asNumbers == null) {
                throw new MissingRequiredPropertyException("GetGtmAsmapAssignmentArgs", "asNumbers");
            }
            if ($.datacenterId == null) {
                throw new MissingRequiredPropertyException("GetGtmAsmapAssignmentArgs", "datacenterId");
            }
            if ($.nickname == null) {
                throw new MissingRequiredPropertyException("GetGtmAsmapAssignmentArgs", "nickname");
            }
            return $;
        }
    }

}
