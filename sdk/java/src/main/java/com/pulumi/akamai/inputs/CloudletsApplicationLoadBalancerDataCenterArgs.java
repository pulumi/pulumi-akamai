// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CloudletsApplicationLoadBalancerDataCenterArgs extends com.pulumi.resources.ResourceArgs {

    public static final CloudletsApplicationLoadBalancerDataCenterArgs Empty = new CloudletsApplicationLoadBalancerDataCenterArgs();

    @Import(name="city")
    private @Nullable Output<String> city;

    public Optional<Output<String>> city() {
        return Optional.ofNullable(this.city);
    }

    @Import(name="cloudServerHostHeaderOverride")
    private @Nullable Output<Boolean> cloudServerHostHeaderOverride;

    public Optional<Output<Boolean>> cloudServerHostHeaderOverride() {
        return Optional.ofNullable(this.cloudServerHostHeaderOverride);
    }

    @Import(name="cloudService")
    private @Nullable Output<Boolean> cloudService;

    public Optional<Output<Boolean>> cloudService() {
        return Optional.ofNullable(this.cloudService);
    }

    @Import(name="continent", required=true)
    private Output<String> continent;

    public Output<String> continent() {
        return this.continent;
    }

    @Import(name="country", required=true)
    private Output<String> country;

    public Output<String> country() {
        return this.country;
    }

    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    @Import(name="latitude", required=true)
    private Output<Double> latitude;

    public Output<Double> latitude() {
        return this.latitude;
    }

    @Import(name="livenessHosts")
    private @Nullable Output<List<String>> livenessHosts;

    public Optional<Output<List<String>>> livenessHosts() {
        return Optional.ofNullable(this.livenessHosts);
    }

    @Import(name="longitude", required=true)
    private Output<Double> longitude;

    public Output<Double> longitude() {
        return this.longitude;
    }

    @Import(name="originId", required=true)
    private Output<String> originId;

    public Output<String> originId() {
        return this.originId;
    }

    @Import(name="percent", required=true)
    private Output<Double> percent;

    public Output<Double> percent() {
        return this.percent;
    }

    @Import(name="stateOrProvince")
    private @Nullable Output<String> stateOrProvince;

    public Optional<Output<String>> stateOrProvince() {
        return Optional.ofNullable(this.stateOrProvince);
    }

    private CloudletsApplicationLoadBalancerDataCenterArgs() {}

    private CloudletsApplicationLoadBalancerDataCenterArgs(CloudletsApplicationLoadBalancerDataCenterArgs $) {
        this.city = $.city;
        this.cloudServerHostHeaderOverride = $.cloudServerHostHeaderOverride;
        this.cloudService = $.cloudService;
        this.continent = $.continent;
        this.country = $.country;
        this.hostname = $.hostname;
        this.latitude = $.latitude;
        this.livenessHosts = $.livenessHosts;
        this.longitude = $.longitude;
        this.originId = $.originId;
        this.percent = $.percent;
        this.stateOrProvince = $.stateOrProvince;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CloudletsApplicationLoadBalancerDataCenterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CloudletsApplicationLoadBalancerDataCenterArgs $;

        public Builder() {
            $ = new CloudletsApplicationLoadBalancerDataCenterArgs();
        }

        public Builder(CloudletsApplicationLoadBalancerDataCenterArgs defaults) {
            $ = new CloudletsApplicationLoadBalancerDataCenterArgs(Objects.requireNonNull(defaults));
        }

        public Builder city(@Nullable Output<String> city) {
            $.city = city;
            return this;
        }

        public Builder city(String city) {
            return city(Output.of(city));
        }

        public Builder cloudServerHostHeaderOverride(@Nullable Output<Boolean> cloudServerHostHeaderOverride) {
            $.cloudServerHostHeaderOverride = cloudServerHostHeaderOverride;
            return this;
        }

        public Builder cloudServerHostHeaderOverride(Boolean cloudServerHostHeaderOverride) {
            return cloudServerHostHeaderOverride(Output.of(cloudServerHostHeaderOverride));
        }

        public Builder cloudService(@Nullable Output<Boolean> cloudService) {
            $.cloudService = cloudService;
            return this;
        }

        public Builder cloudService(Boolean cloudService) {
            return cloudService(Output.of(cloudService));
        }

        public Builder continent(Output<String> continent) {
            $.continent = continent;
            return this;
        }

        public Builder continent(String continent) {
            return continent(Output.of(continent));
        }

        public Builder country(Output<String> country) {
            $.country = country;
            return this;
        }

        public Builder country(String country) {
            return country(Output.of(country));
        }

        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        public Builder latitude(Output<Double> latitude) {
            $.latitude = latitude;
            return this;
        }

        public Builder latitude(Double latitude) {
            return latitude(Output.of(latitude));
        }

        public Builder livenessHosts(@Nullable Output<List<String>> livenessHosts) {
            $.livenessHosts = livenessHosts;
            return this;
        }

        public Builder livenessHosts(List<String> livenessHosts) {
            return livenessHosts(Output.of(livenessHosts));
        }

        public Builder livenessHosts(String... livenessHosts) {
            return livenessHosts(List.of(livenessHosts));
        }

        public Builder longitude(Output<Double> longitude) {
            $.longitude = longitude;
            return this;
        }

        public Builder longitude(Double longitude) {
            return longitude(Output.of(longitude));
        }

        public Builder originId(Output<String> originId) {
            $.originId = originId;
            return this;
        }

        public Builder originId(String originId) {
            return originId(Output.of(originId));
        }

        public Builder percent(Output<Double> percent) {
            $.percent = percent;
            return this;
        }

        public Builder percent(Double percent) {
            return percent(Output.of(percent));
        }

        public Builder stateOrProvince(@Nullable Output<String> stateOrProvince) {
            $.stateOrProvince = stateOrProvince;
            return this;
        }

        public Builder stateOrProvince(String stateOrProvince) {
            return stateOrProvince(Output.of(stateOrProvince));
        }

        public CloudletsApplicationLoadBalancerDataCenterArgs build() {
            if ($.continent == null) {
                throw new MissingRequiredPropertyException("CloudletsApplicationLoadBalancerDataCenterArgs", "continent");
            }
            if ($.country == null) {
                throw new MissingRequiredPropertyException("CloudletsApplicationLoadBalancerDataCenterArgs", "country");
            }
            if ($.latitude == null) {
                throw new MissingRequiredPropertyException("CloudletsApplicationLoadBalancerDataCenterArgs", "latitude");
            }
            if ($.longitude == null) {
                throw new MissingRequiredPropertyException("CloudletsApplicationLoadBalancerDataCenterArgs", "longitude");
            }
            if ($.originId == null) {
                throw new MissingRequiredPropertyException("CloudletsApplicationLoadBalancerDataCenterArgs", "originId");
            }
            if ($.percent == null) {
                throw new MissingRequiredPropertyException("CloudletsApplicationLoadBalancerDataCenterArgs", "percent");
            }
            return $;
        }
    }

}
