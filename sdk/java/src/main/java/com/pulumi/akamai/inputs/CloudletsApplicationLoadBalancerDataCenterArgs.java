// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CloudletsApplicationLoadBalancerDataCenterArgs extends com.pulumi.resources.ResourceArgs {

    public static final CloudletsApplicationLoadBalancerDataCenterArgs Empty = new CloudletsApplicationLoadBalancerDataCenterArgs();

    /**
     * The city in which the data center is located.
     * 
     */
    @Import(name="city")
    private @Nullable Output<String> city;

    /**
     * @return The city in which the data center is located.
     * 
     */
    public Optional<Output<String>> city() {
        return Optional.ofNullable(this.city);
    }

    /**
     * Describes if cloud server host header is overridden
     * 
     */
    @Import(name="cloudServerHostHeaderOverride")
    private @Nullable Output<Boolean> cloudServerHostHeaderOverride;

    /**
     * @return Describes if cloud server host header is overridden
     * 
     */
    public Optional<Output<Boolean>> cloudServerHostHeaderOverride() {
        return Optional.ofNullable(this.cloudServerHostHeaderOverride);
    }

    /**
     * Describes if this datacenter is a cloud service
     * 
     */
    @Import(name="cloudService")
    private @Nullable Output<Boolean> cloudService;

    /**
     * @return Describes if this datacenter is a cloud service
     * 
     */
    public Optional<Output<Boolean>> cloudService() {
        return Optional.ofNullable(this.cloudService);
    }

    /**
     * The continent on which the data center is located
     * 
     */
    @Import(name="continent", required=true)
    private Output<String> continent;

    /**
     * @return The continent on which the data center is located
     * 
     */
    public Output<String> continent() {
        return this.continent;
    }

    /**
     * The country in which the data center is located
     * 
     */
    @Import(name="country", required=true)
    private Output<String> country;

    /**
     * @return The country in which the data center is located
     * 
     */
    public Output<String> country() {
        return this.country;
    }

    /**
     * This should match the &#39;hostname&#39; value defined for this datacenter in Property Manager
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return This should match the &#39;hostname&#39; value defined for this datacenter in Property Manager
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * The latitude value for the data center. This member supports six decimal places of precision.
     * 
     */
    @Import(name="latitude", required=true)
    private Output<Double> latitude;

    /**
     * @return The latitude value for the data center. This member supports six decimal places of precision.
     * 
     */
    public Output<Double> latitude() {
        return this.latitude;
    }

    /**
     * An array of strings that represent the origin servers used to poll the data centers in an application load balancer configuration. These servers support basic HTTP polling.
     * 
     */
    @Import(name="livenessHosts")
    private @Nullable Output<List<String>> livenessHosts;

    /**
     * @return An array of strings that represent the origin servers used to poll the data centers in an application load balancer configuration. These servers support basic HTTP polling.
     * 
     */
    public Optional<Output<List<String>>> livenessHosts() {
        return Optional.ofNullable(this.livenessHosts);
    }

    /**
     * The longitude value for the data center. This member supports six decimal places of precision.
     * 
     */
    @Import(name="longitude", required=true)
    private Output<Double> longitude;

    /**
     * @return The longitude value for the data center. This member supports six decimal places of precision.
     * 
     */
    public Output<Double> longitude() {
        return this.longitude;
    }

    /**
     * The ID of an origin that represents the data center. The conditional origin, which is defined in the Property Manager API, must have an originType of either CUSTOMER or NET_STORAGE
     * 
     */
    @Import(name="originId", required=true)
    private Output<String> originId;

    /**
     * @return The ID of an origin that represents the data center. The conditional origin, which is defined in the Property Manager API, must have an originType of either CUSTOMER or NET_STORAGE
     * 
     */
    public Output<String> originId() {
        return this.originId;
    }

    /**
     * The percent of traffic that is sent to the data center. The total for all data centers must equal 100%!
     * (MISSING)
     * 
     */
    @Import(name="percent", required=true)
    private Output<Double> percent;

    /**
     * @return The percent of traffic that is sent to the data center. The total for all data centers must equal 100%!
     * (MISSING)
     * 
     */
    public Output<Double> percent() {
        return this.percent;
    }

    /**
     * The state, province, or region where the data center is located
     * 
     */
    @Import(name="stateOrProvince")
    private @Nullable Output<String> stateOrProvince;

    /**
     * @return The state, province, or region where the data center is located
     * 
     */
    public Optional<Output<String>> stateOrProvince() {
        return Optional.ofNullable(this.stateOrProvince);
    }

    private CloudletsApplicationLoadBalancerDataCenterArgs() {}

    private CloudletsApplicationLoadBalancerDataCenterArgs(CloudletsApplicationLoadBalancerDataCenterArgs $) {
        this.city = $.city;
        this.cloudServerHostHeaderOverride = $.cloudServerHostHeaderOverride;
        this.cloudService = $.cloudService;
        this.continent = $.continent;
        this.country = $.country;
        this.hostname = $.hostname;
        this.latitude = $.latitude;
        this.livenessHosts = $.livenessHosts;
        this.longitude = $.longitude;
        this.originId = $.originId;
        this.percent = $.percent;
        this.stateOrProvince = $.stateOrProvince;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CloudletsApplicationLoadBalancerDataCenterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CloudletsApplicationLoadBalancerDataCenterArgs $;

        public Builder() {
            $ = new CloudletsApplicationLoadBalancerDataCenterArgs();
        }

        public Builder(CloudletsApplicationLoadBalancerDataCenterArgs defaults) {
            $ = new CloudletsApplicationLoadBalancerDataCenterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param city The city in which the data center is located.
         * 
         * @return builder
         * 
         */
        public Builder city(@Nullable Output<String> city) {
            $.city = city;
            return this;
        }

        /**
         * @param city The city in which the data center is located.
         * 
         * @return builder
         * 
         */
        public Builder city(String city) {
            return city(Output.of(city));
        }

        /**
         * @param cloudServerHostHeaderOverride Describes if cloud server host header is overridden
         * 
         * @return builder
         * 
         */
        public Builder cloudServerHostHeaderOverride(@Nullable Output<Boolean> cloudServerHostHeaderOverride) {
            $.cloudServerHostHeaderOverride = cloudServerHostHeaderOverride;
            return this;
        }

        /**
         * @param cloudServerHostHeaderOverride Describes if cloud server host header is overridden
         * 
         * @return builder
         * 
         */
        public Builder cloudServerHostHeaderOverride(Boolean cloudServerHostHeaderOverride) {
            return cloudServerHostHeaderOverride(Output.of(cloudServerHostHeaderOverride));
        }

        /**
         * @param cloudService Describes if this datacenter is a cloud service
         * 
         * @return builder
         * 
         */
        public Builder cloudService(@Nullable Output<Boolean> cloudService) {
            $.cloudService = cloudService;
            return this;
        }

        /**
         * @param cloudService Describes if this datacenter is a cloud service
         * 
         * @return builder
         * 
         */
        public Builder cloudService(Boolean cloudService) {
            return cloudService(Output.of(cloudService));
        }

        /**
         * @param continent The continent on which the data center is located
         * 
         * @return builder
         * 
         */
        public Builder continent(Output<String> continent) {
            $.continent = continent;
            return this;
        }

        /**
         * @param continent The continent on which the data center is located
         * 
         * @return builder
         * 
         */
        public Builder continent(String continent) {
            return continent(Output.of(continent));
        }

        /**
         * @param country The country in which the data center is located
         * 
         * @return builder
         * 
         */
        public Builder country(Output<String> country) {
            $.country = country;
            return this;
        }

        /**
         * @param country The country in which the data center is located
         * 
         * @return builder
         * 
         */
        public Builder country(String country) {
            return country(Output.of(country));
        }

        /**
         * @param hostname This should match the &#39;hostname&#39; value defined for this datacenter in Property Manager
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname This should match the &#39;hostname&#39; value defined for this datacenter in Property Manager
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param latitude The latitude value for the data center. This member supports six decimal places of precision.
         * 
         * @return builder
         * 
         */
        public Builder latitude(Output<Double> latitude) {
            $.latitude = latitude;
            return this;
        }

        /**
         * @param latitude The latitude value for the data center. This member supports six decimal places of precision.
         * 
         * @return builder
         * 
         */
        public Builder latitude(Double latitude) {
            return latitude(Output.of(latitude));
        }

        /**
         * @param livenessHosts An array of strings that represent the origin servers used to poll the data centers in an application load balancer configuration. These servers support basic HTTP polling.
         * 
         * @return builder
         * 
         */
        public Builder livenessHosts(@Nullable Output<List<String>> livenessHosts) {
            $.livenessHosts = livenessHosts;
            return this;
        }

        /**
         * @param livenessHosts An array of strings that represent the origin servers used to poll the data centers in an application load balancer configuration. These servers support basic HTTP polling.
         * 
         * @return builder
         * 
         */
        public Builder livenessHosts(List<String> livenessHosts) {
            return livenessHosts(Output.of(livenessHosts));
        }

        /**
         * @param livenessHosts An array of strings that represent the origin servers used to poll the data centers in an application load balancer configuration. These servers support basic HTTP polling.
         * 
         * @return builder
         * 
         */
        public Builder livenessHosts(String... livenessHosts) {
            return livenessHosts(List.of(livenessHosts));
        }

        /**
         * @param longitude The longitude value for the data center. This member supports six decimal places of precision.
         * 
         * @return builder
         * 
         */
        public Builder longitude(Output<Double> longitude) {
            $.longitude = longitude;
            return this;
        }

        /**
         * @param longitude The longitude value for the data center. This member supports six decimal places of precision.
         * 
         * @return builder
         * 
         */
        public Builder longitude(Double longitude) {
            return longitude(Output.of(longitude));
        }

        /**
         * @param originId The ID of an origin that represents the data center. The conditional origin, which is defined in the Property Manager API, must have an originType of either CUSTOMER or NET_STORAGE
         * 
         * @return builder
         * 
         */
        public Builder originId(Output<String> originId) {
            $.originId = originId;
            return this;
        }

        /**
         * @param originId The ID of an origin that represents the data center. The conditional origin, which is defined in the Property Manager API, must have an originType of either CUSTOMER or NET_STORAGE
         * 
         * @return builder
         * 
         */
        public Builder originId(String originId) {
            return originId(Output.of(originId));
        }

        /**
         * @param percent The percent of traffic that is sent to the data center. The total for all data centers must equal 100%!
         * (MISSING)
         * 
         * @return builder
         * 
         */
        public Builder percent(Output<Double> percent) {
            $.percent = percent;
            return this;
        }

        /**
         * @param percent The percent of traffic that is sent to the data center. The total for all data centers must equal 100%!
         * (MISSING)
         * 
         * @return builder
         * 
         */
        public Builder percent(Double percent) {
            return percent(Output.of(percent));
        }

        /**
         * @param stateOrProvince The state, province, or region where the data center is located
         * 
         * @return builder
         * 
         */
        public Builder stateOrProvince(@Nullable Output<String> stateOrProvince) {
            $.stateOrProvince = stateOrProvince;
            return this;
        }

        /**
         * @param stateOrProvince The state, province, or region where the data center is located
         * 
         * @return builder
         * 
         */
        public Builder stateOrProvince(String stateOrProvince) {
            return stateOrProvince(Output.of(stateOrProvince));
        }

        public CloudletsApplicationLoadBalancerDataCenterArgs build() {
            if ($.continent == null) {
                throw new MissingRequiredPropertyException("CloudletsApplicationLoadBalancerDataCenterArgs", "continent");
            }
            if ($.country == null) {
                throw new MissingRequiredPropertyException("CloudletsApplicationLoadBalancerDataCenterArgs", "country");
            }
            if ($.latitude == null) {
                throw new MissingRequiredPropertyException("CloudletsApplicationLoadBalancerDataCenterArgs", "latitude");
            }
            if ($.longitude == null) {
                throw new MissingRequiredPropertyException("CloudletsApplicationLoadBalancerDataCenterArgs", "longitude");
            }
            if ($.originId == null) {
                throw new MissingRequiredPropertyException("CloudletsApplicationLoadBalancerDataCenterArgs", "originId");
            }
            if ($.percent == null) {
                throw new MissingRequiredPropertyException("CloudletsApplicationLoadBalancerDataCenterArgs", "percent");
            }
            return $;
        }
    }

}
