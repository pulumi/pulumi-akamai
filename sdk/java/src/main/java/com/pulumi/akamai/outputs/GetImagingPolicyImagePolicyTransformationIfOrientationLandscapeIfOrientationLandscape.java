// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeAppend;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeAspectCrop;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeBackgroundColor;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeBlur;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeChromaKey;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeComposite;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeCompound;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeContrast;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeCrop;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeFaceCrop;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeFeatureCrop;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeFitAndFill;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeGoop;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeGrayscale;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeHsl;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeHsv;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfDimension;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientation;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeImQuery;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeMaxColor;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeMirror;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeMonoHue;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeOpacity;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRegionOfInterestCrop;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRelativeCrop;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRemoveColor;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeResize;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRotate;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeScale;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeShears;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeTrim;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeUnsharpMask;
import com.pulumi.core.annotations.CustomType;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscape {
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeAppend> appends;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeAspectCrop> aspectCrops;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeBackgroundColor> backgroundColors;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeBlur> blurs;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeChromaKey> chromaKeys;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeComposite> composites;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeCompound> compounds;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeContrast> contrasts;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeCrop> crops;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeFaceCrop> faceCrops;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeFeatureCrop> featureCrops;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeFitAndFill> fitAndFills;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeGoop> goops;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeGrayscale> grayscales;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeHsl> hsls;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeHsv> hsvs;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfDimension> ifDimensions;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientation> ifOrientations;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeImQuery> imQueries;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeMaxColor> maxColors;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeMirror> mirrors;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeMonoHue> monoHues;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeOpacity> opacities;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRegionOfInterestCrop> regionOfInterestCrops;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRelativeCrop> relativeCrops;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRemoveColor> removeColors;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeResize> resizes;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRotate> rotates;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeScale> scales;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeShears> shears;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeTrim> trims;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeUnsharpMask> unsharpMasks;

    private GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscape() {}
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeAppend> appends() {
        return this.appends == null ? List.of() : this.appends;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeAspectCrop> aspectCrops() {
        return this.aspectCrops == null ? List.of() : this.aspectCrops;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeBackgroundColor> backgroundColors() {
        return this.backgroundColors == null ? List.of() : this.backgroundColors;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeBlur> blurs() {
        return this.blurs == null ? List.of() : this.blurs;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeChromaKey> chromaKeys() {
        return this.chromaKeys == null ? List.of() : this.chromaKeys;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeComposite> composites() {
        return this.composites == null ? List.of() : this.composites;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeCompound> compounds() {
        return this.compounds == null ? List.of() : this.compounds;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeContrast> contrasts() {
        return this.contrasts == null ? List.of() : this.contrasts;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeCrop> crops() {
        return this.crops == null ? List.of() : this.crops;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeFaceCrop> faceCrops() {
        return this.faceCrops == null ? List.of() : this.faceCrops;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeFeatureCrop> featureCrops() {
        return this.featureCrops == null ? List.of() : this.featureCrops;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeFitAndFill> fitAndFills() {
        return this.fitAndFills == null ? List.of() : this.fitAndFills;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeGoop> goops() {
        return this.goops == null ? List.of() : this.goops;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeGrayscale> grayscales() {
        return this.grayscales == null ? List.of() : this.grayscales;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeHsl> hsls() {
        return this.hsls == null ? List.of() : this.hsls;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeHsv> hsvs() {
        return this.hsvs == null ? List.of() : this.hsvs;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfDimension> ifDimensions() {
        return this.ifDimensions == null ? List.of() : this.ifDimensions;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientation> ifOrientations() {
        return this.ifOrientations == null ? List.of() : this.ifOrientations;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeImQuery> imQueries() {
        return this.imQueries == null ? List.of() : this.imQueries;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeMaxColor> maxColors() {
        return this.maxColors == null ? List.of() : this.maxColors;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeMirror> mirrors() {
        return this.mirrors == null ? List.of() : this.mirrors;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeMonoHue> monoHues() {
        return this.monoHues == null ? List.of() : this.monoHues;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeOpacity> opacities() {
        return this.opacities == null ? List.of() : this.opacities;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRegionOfInterestCrop> regionOfInterestCrops() {
        return this.regionOfInterestCrops == null ? List.of() : this.regionOfInterestCrops;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRelativeCrop> relativeCrops() {
        return this.relativeCrops == null ? List.of() : this.relativeCrops;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRemoveColor> removeColors() {
        return this.removeColors == null ? List.of() : this.removeColors;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeResize> resizes() {
        return this.resizes == null ? List.of() : this.resizes;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRotate> rotates() {
        return this.rotates == null ? List.of() : this.rotates;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeScale> scales() {
        return this.scales == null ? List.of() : this.scales;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeShears> shears() {
        return this.shears == null ? List.of() : this.shears;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeTrim> trims() {
        return this.trims == null ? List.of() : this.trims;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeUnsharpMask> unsharpMasks() {
        return this.unsharpMasks == null ? List.of() : this.unsharpMasks;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscape defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeAppend> appends;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeAspectCrop> aspectCrops;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeBackgroundColor> backgroundColors;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeBlur> blurs;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeChromaKey> chromaKeys;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeComposite> composites;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeCompound> compounds;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeContrast> contrasts;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeCrop> crops;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeFaceCrop> faceCrops;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeFeatureCrop> featureCrops;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeFitAndFill> fitAndFills;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeGoop> goops;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeGrayscale> grayscales;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeHsl> hsls;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeHsv> hsvs;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfDimension> ifDimensions;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientation> ifOrientations;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeImQuery> imQueries;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeMaxColor> maxColors;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeMirror> mirrors;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeMonoHue> monoHues;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeOpacity> opacities;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRegionOfInterestCrop> regionOfInterestCrops;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRelativeCrop> relativeCrops;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRemoveColor> removeColors;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeResize> resizes;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRotate> rotates;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeScale> scales;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeShears> shears;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeTrim> trims;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeUnsharpMask> unsharpMasks;
        public Builder() {}
        public Builder(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscape defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appends = defaults.appends;
    	      this.aspectCrops = defaults.aspectCrops;
    	      this.backgroundColors = defaults.backgroundColors;
    	      this.blurs = defaults.blurs;
    	      this.chromaKeys = defaults.chromaKeys;
    	      this.composites = defaults.composites;
    	      this.compounds = defaults.compounds;
    	      this.contrasts = defaults.contrasts;
    	      this.crops = defaults.crops;
    	      this.faceCrops = defaults.faceCrops;
    	      this.featureCrops = defaults.featureCrops;
    	      this.fitAndFills = defaults.fitAndFills;
    	      this.goops = defaults.goops;
    	      this.grayscales = defaults.grayscales;
    	      this.hsls = defaults.hsls;
    	      this.hsvs = defaults.hsvs;
    	      this.ifDimensions = defaults.ifDimensions;
    	      this.ifOrientations = defaults.ifOrientations;
    	      this.imQueries = defaults.imQueries;
    	      this.maxColors = defaults.maxColors;
    	      this.mirrors = defaults.mirrors;
    	      this.monoHues = defaults.monoHues;
    	      this.opacities = defaults.opacities;
    	      this.regionOfInterestCrops = defaults.regionOfInterestCrops;
    	      this.relativeCrops = defaults.relativeCrops;
    	      this.removeColors = defaults.removeColors;
    	      this.resizes = defaults.resizes;
    	      this.rotates = defaults.rotates;
    	      this.scales = defaults.scales;
    	      this.shears = defaults.shears;
    	      this.trims = defaults.trims;
    	      this.unsharpMasks = defaults.unsharpMasks;
        }

        @CustomType.Setter
        public Builder appends(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeAppend> appends) {
            this.appends = appends;
            return this;
        }
        public Builder appends(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeAppend... appends) {
            return appends(List.of(appends));
        }
        @CustomType.Setter
        public Builder aspectCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeAspectCrop> aspectCrops) {
            this.aspectCrops = aspectCrops;
            return this;
        }
        public Builder aspectCrops(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeAspectCrop... aspectCrops) {
            return aspectCrops(List.of(aspectCrops));
        }
        @CustomType.Setter
        public Builder backgroundColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeBackgroundColor> backgroundColors) {
            this.backgroundColors = backgroundColors;
            return this;
        }
        public Builder backgroundColors(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeBackgroundColor... backgroundColors) {
            return backgroundColors(List.of(backgroundColors));
        }
        @CustomType.Setter
        public Builder blurs(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeBlur> blurs) {
            this.blurs = blurs;
            return this;
        }
        public Builder blurs(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeBlur... blurs) {
            return blurs(List.of(blurs));
        }
        @CustomType.Setter
        public Builder chromaKeys(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeChromaKey> chromaKeys) {
            this.chromaKeys = chromaKeys;
            return this;
        }
        public Builder chromaKeys(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeChromaKey... chromaKeys) {
            return chromaKeys(List.of(chromaKeys));
        }
        @CustomType.Setter
        public Builder composites(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeComposite> composites) {
            this.composites = composites;
            return this;
        }
        public Builder composites(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeComposite... composites) {
            return composites(List.of(composites));
        }
        @CustomType.Setter
        public Builder compounds(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeCompound> compounds) {
            this.compounds = compounds;
            return this;
        }
        public Builder compounds(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeCompound... compounds) {
            return compounds(List.of(compounds));
        }
        @CustomType.Setter
        public Builder contrasts(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeContrast> contrasts) {
            this.contrasts = contrasts;
            return this;
        }
        public Builder contrasts(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeContrast... contrasts) {
            return contrasts(List.of(contrasts));
        }
        @CustomType.Setter
        public Builder crops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeCrop> crops) {
            this.crops = crops;
            return this;
        }
        public Builder crops(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeCrop... crops) {
            return crops(List.of(crops));
        }
        @CustomType.Setter
        public Builder faceCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeFaceCrop> faceCrops) {
            this.faceCrops = faceCrops;
            return this;
        }
        public Builder faceCrops(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeFaceCrop... faceCrops) {
            return faceCrops(List.of(faceCrops));
        }
        @CustomType.Setter
        public Builder featureCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeFeatureCrop> featureCrops) {
            this.featureCrops = featureCrops;
            return this;
        }
        public Builder featureCrops(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeFeatureCrop... featureCrops) {
            return featureCrops(List.of(featureCrops));
        }
        @CustomType.Setter
        public Builder fitAndFills(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeFitAndFill> fitAndFills) {
            this.fitAndFills = fitAndFills;
            return this;
        }
        public Builder fitAndFills(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeFitAndFill... fitAndFills) {
            return fitAndFills(List.of(fitAndFills));
        }
        @CustomType.Setter
        public Builder goops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeGoop> goops) {
            this.goops = goops;
            return this;
        }
        public Builder goops(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeGoop... goops) {
            return goops(List.of(goops));
        }
        @CustomType.Setter
        public Builder grayscales(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeGrayscale> grayscales) {
            this.grayscales = grayscales;
            return this;
        }
        public Builder grayscales(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeGrayscale... grayscales) {
            return grayscales(List.of(grayscales));
        }
        @CustomType.Setter
        public Builder hsls(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeHsl> hsls) {
            this.hsls = hsls;
            return this;
        }
        public Builder hsls(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeHsl... hsls) {
            return hsls(List.of(hsls));
        }
        @CustomType.Setter
        public Builder hsvs(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeHsv> hsvs) {
            this.hsvs = hsvs;
            return this;
        }
        public Builder hsvs(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeHsv... hsvs) {
            return hsvs(List.of(hsvs));
        }
        @CustomType.Setter
        public Builder ifDimensions(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfDimension> ifDimensions) {
            this.ifDimensions = ifDimensions;
            return this;
        }
        public Builder ifDimensions(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfDimension... ifDimensions) {
            return ifDimensions(List.of(ifDimensions));
        }
        @CustomType.Setter
        public Builder ifOrientations(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientation> ifOrientations) {
            this.ifOrientations = ifOrientations;
            return this;
        }
        public Builder ifOrientations(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientation... ifOrientations) {
            return ifOrientations(List.of(ifOrientations));
        }
        @CustomType.Setter
        public Builder imQueries(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeImQuery> imQueries) {
            this.imQueries = imQueries;
            return this;
        }
        public Builder imQueries(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeImQuery... imQueries) {
            return imQueries(List.of(imQueries));
        }
        @CustomType.Setter
        public Builder maxColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeMaxColor> maxColors) {
            this.maxColors = maxColors;
            return this;
        }
        public Builder maxColors(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeMaxColor... maxColors) {
            return maxColors(List.of(maxColors));
        }
        @CustomType.Setter
        public Builder mirrors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeMirror> mirrors) {
            this.mirrors = mirrors;
            return this;
        }
        public Builder mirrors(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeMirror... mirrors) {
            return mirrors(List.of(mirrors));
        }
        @CustomType.Setter
        public Builder monoHues(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeMonoHue> monoHues) {
            this.monoHues = monoHues;
            return this;
        }
        public Builder monoHues(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeMonoHue... monoHues) {
            return monoHues(List.of(monoHues));
        }
        @CustomType.Setter
        public Builder opacities(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeOpacity> opacities) {
            this.opacities = opacities;
            return this;
        }
        public Builder opacities(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeOpacity... opacities) {
            return opacities(List.of(opacities));
        }
        @CustomType.Setter
        public Builder regionOfInterestCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRegionOfInterestCrop> regionOfInterestCrops) {
            this.regionOfInterestCrops = regionOfInterestCrops;
            return this;
        }
        public Builder regionOfInterestCrops(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRegionOfInterestCrop... regionOfInterestCrops) {
            return regionOfInterestCrops(List.of(regionOfInterestCrops));
        }
        @CustomType.Setter
        public Builder relativeCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRelativeCrop> relativeCrops) {
            this.relativeCrops = relativeCrops;
            return this;
        }
        public Builder relativeCrops(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRelativeCrop... relativeCrops) {
            return relativeCrops(List.of(relativeCrops));
        }
        @CustomType.Setter
        public Builder removeColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRemoveColor> removeColors) {
            this.removeColors = removeColors;
            return this;
        }
        public Builder removeColors(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRemoveColor... removeColors) {
            return removeColors(List.of(removeColors));
        }
        @CustomType.Setter
        public Builder resizes(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeResize> resizes) {
            this.resizes = resizes;
            return this;
        }
        public Builder resizes(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeResize... resizes) {
            return resizes(List.of(resizes));
        }
        @CustomType.Setter
        public Builder rotates(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRotate> rotates) {
            this.rotates = rotates;
            return this;
        }
        public Builder rotates(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRotate... rotates) {
            return rotates(List.of(rotates));
        }
        @CustomType.Setter
        public Builder scales(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeScale> scales) {
            this.scales = scales;
            return this;
        }
        public Builder scales(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeScale... scales) {
            return scales(List.of(scales));
        }
        @CustomType.Setter
        public Builder shears(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeShears> shears) {
            this.shears = shears;
            return this;
        }
        public Builder shears(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeShears... shears) {
            return shears(List.of(shears));
        }
        @CustomType.Setter
        public Builder trims(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeTrim> trims) {
            this.trims = trims;
            return this;
        }
        public Builder trims(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeTrim... trims) {
            return trims(List.of(trims));
        }
        @CustomType.Setter
        public Builder unsharpMasks(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeUnsharpMask> unsharpMasks) {
            this.unsharpMasks = unsharpMasks;
            return this;
        }
        public Builder unsharpMasks(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeUnsharpMask... unsharpMasks) {
            return unsharpMasks(List.of(unsharpMasks));
        }
        public GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscape build() {
            final var o = new GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscape();
            o.appends = appends;
            o.aspectCrops = aspectCrops;
            o.backgroundColors = backgroundColors;
            o.blurs = blurs;
            o.chromaKeys = chromaKeys;
            o.composites = composites;
            o.compounds = compounds;
            o.contrasts = contrasts;
            o.crops = crops;
            o.faceCrops = faceCrops;
            o.featureCrops = featureCrops;
            o.fitAndFills = fitAndFills;
            o.goops = goops;
            o.grayscales = grayscales;
            o.hsls = hsls;
            o.hsvs = hsvs;
            o.ifDimensions = ifDimensions;
            o.ifOrientations = ifOrientations;
            o.imQueries = imQueries;
            o.maxColors = maxColors;
            o.mirrors = mirrors;
            o.monoHues = monoHues;
            o.opacities = opacities;
            o.regionOfInterestCrops = regionOfInterestCrops;
            o.relativeCrops = relativeCrops;
            o.removeColors = removeColors;
            o.resizes = resizes;
            o.rotates = rotates;
            o.scales = scales;
            o.shears = shears;
            o.trims = trims;
            o.unsharpMasks = unsharpMasks;
            return o;
        }
    }
}
