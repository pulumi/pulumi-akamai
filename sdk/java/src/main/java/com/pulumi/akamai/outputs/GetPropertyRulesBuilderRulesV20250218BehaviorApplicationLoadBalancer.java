// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.akamai.outputs.GetPropertyRulesBuilderRulesV20250218BehaviorApplicationLoadBalancerAllDownNetStorage;
import com.pulumi.akamai.outputs.GetPropertyRulesBuilderRulesV20250218BehaviorApplicationLoadBalancerCloudletPolicy;
import com.pulumi.akamai.outputs.GetPropertyRulesBuilderRulesV20250218BehaviorApplicationLoadBalancerFailoverOriginMap;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPropertyRulesBuilderRulesV20250218BehaviorApplicationLoadBalancer {
    /**
     * @return Specifies a NetStorage account for a static maintenance page as a fallback when no origins are available.
     * 
     */
    private @Nullable GetPropertyRulesBuilderRulesV20250218BehaviorApplicationLoadBalancerAllDownNetStorage allDownNetStorage;
    /**
     * @return Specifies the fallback maintenance page&#39;s filename, expressed as a full path from the root of the NetStorage server.
     * 
     */
    private @Nullable String allDownNetStorageFile;
    /**
     * @return Specifies the HTTP response code when all load-balancing origins are unavailable.
     * 
     */
    private @Nullable String allDownStatusCode;
    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    private @Nullable String allDownTitle;
    /**
     * @return Allows the cache to prefresh.  Only appropriate if all origins serve the same content for the same URL.
     * 
     */
    private @Nullable Boolean allowCachePrefresh;
    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    private @Nullable String cachedContentTitle;
    /**
     * @return Identifies the Cloudlet policy.
     * 
     */
    private @Nullable GetPropertyRulesBuilderRulesV20250218BehaviorApplicationLoadBalancerCloudletPolicy cloudletPolicy;
    /**
     * @return Activates the Application Load Balancer Cloudlet.
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return Sets the number of failed requests that would trigger the failover process.
     * 
     */
    private @Nullable Integer failoverAttemptsThreshold;
    /**
     * @return Determines what to do if an origin fails.
     * 
     */
    private @Nullable String failoverMode;
    /**
     * @return Specifies a fixed set of failover mapping rules.
     * 
     */
    private @Nullable List<GetPropertyRulesBuilderRulesV20250218BehaviorApplicationLoadBalancerFailoverOriginMap> failoverOriginMaps;
    /**
     * @return Specifies a set of HTTP status codes that signal a failure on the origin, in which case the cookie that binds the client to that origin is invalidated and the client is rerouted to another available origin.
     * 
     */
    private @Nullable List<String> failoverStatusCodes;
    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    private @Nullable String failoverTitle;
    /**
     * @return A label to distinguish this Application Load Balancer policy from any others within the same property.
     * 
     */
    private @Nullable String label;
    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    private @Nullable Boolean locked;
    /**
     * @return Specifies the name for your session cookie.
     * 
     */
    private @Nullable String originCookieName;
    /**
     * @return Specifies whether to use a cookie domain with the stickiness cookie, to tell the browser to which domain to send the cookie.
     * 
     */
    private @Nullable Boolean specifyStickinessCookieDomain;
    /**
     * @return Sets whether to assign a `salt` value automatically to the cookie to prevent manipulation by the user. You should not enable this if sharing the population cookie across more than one property.
     * 
     */
    private @Nullable Boolean stickinessCookieAutomaticSalt;
    /**
     * @return Specifies the domain to track the stickiness cookie.
     * 
     */
    private @Nullable String stickinessCookieDomain;
    /**
     * @return Specifies the stickiness cookie&#39;s salt value. Use this option to share the cookie across many properties.
     * 
     */
    private @Nullable String stickinessCookieSalt;
    /**
     * @return Ensures the cookie is transmitted only over HTTP.
     * 
     */
    private @Nullable Boolean stickinessCookieSetHttpOnlyFlag;
    /**
     * @return Determines how a cookie persistently associates the client with a load-balanced origin.
     * 
     */
    private @Nullable String stickinessCookieType;
    /**
     * @return Sets how long it is before the cookie expires.
     * 
     */
    private @Nullable String stickinessDuration;
    /**
     * @return Specifies when the cookie expires.
     * 
     */
    private @Nullable String stickinessExpirationDate;
    /**
     * @return Extends the duration of the cookie with each new request. When enabled, the `DURATION` thus specifies the latency between requests that would cause the cookie to expire.
     * 
     */
    private @Nullable Boolean stickinessRefresh;
    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    private @Nullable String stickinessTitle;
    /**
     * @return This option is for internal usage only.
     * 
     */
    private @Nullable String templateUuid;
    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    private @Nullable String uuid;

    private GetPropertyRulesBuilderRulesV20250218BehaviorApplicationLoadBalancer() {}
    /**
     * @return Specifies a NetStorage account for a static maintenance page as a fallback when no origins are available.
     * 
     */
    public Optional<GetPropertyRulesBuilderRulesV20250218BehaviorApplicationLoadBalancerAllDownNetStorage> allDownNetStorage() {
        return Optional.ofNullable(this.allDownNetStorage);
    }
    /**
     * @return Specifies the fallback maintenance page&#39;s filename, expressed as a full path from the root of the NetStorage server.
     * 
     */
    public Optional<String> allDownNetStorageFile() {
        return Optional.ofNullable(this.allDownNetStorageFile);
    }
    /**
     * @return Specifies the HTTP response code when all load-balancing origins are unavailable.
     * 
     */
    public Optional<String> allDownStatusCode() {
        return Optional.ofNullable(this.allDownStatusCode);
    }
    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<String> allDownTitle() {
        return Optional.ofNullable(this.allDownTitle);
    }
    /**
     * @return Allows the cache to prefresh.  Only appropriate if all origins serve the same content for the same URL.
     * 
     */
    public Optional<Boolean> allowCachePrefresh() {
        return Optional.ofNullable(this.allowCachePrefresh);
    }
    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<String> cachedContentTitle() {
        return Optional.ofNullable(this.cachedContentTitle);
    }
    /**
     * @return Identifies the Cloudlet policy.
     * 
     */
    public Optional<GetPropertyRulesBuilderRulesV20250218BehaviorApplicationLoadBalancerCloudletPolicy> cloudletPolicy() {
        return Optional.ofNullable(this.cloudletPolicy);
    }
    /**
     * @return Activates the Application Load Balancer Cloudlet.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return Sets the number of failed requests that would trigger the failover process.
     * 
     */
    public Optional<Integer> failoverAttemptsThreshold() {
        return Optional.ofNullable(this.failoverAttemptsThreshold);
    }
    /**
     * @return Determines what to do if an origin fails.
     * 
     */
    public Optional<String> failoverMode() {
        return Optional.ofNullable(this.failoverMode);
    }
    /**
     * @return Specifies a fixed set of failover mapping rules.
     * 
     */
    public List<GetPropertyRulesBuilderRulesV20250218BehaviorApplicationLoadBalancerFailoverOriginMap> failoverOriginMaps() {
        return this.failoverOriginMaps == null ? List.of() : this.failoverOriginMaps;
    }
    /**
     * @return Specifies a set of HTTP status codes that signal a failure on the origin, in which case the cookie that binds the client to that origin is invalidated and the client is rerouted to another available origin.
     * 
     */
    public List<String> failoverStatusCodes() {
        return this.failoverStatusCodes == null ? List.of() : this.failoverStatusCodes;
    }
    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<String> failoverTitle() {
        return Optional.ofNullable(this.failoverTitle);
    }
    /**
     * @return A label to distinguish this Application Load Balancer policy from any others within the same property.
     * 
     */
    public Optional<String> label() {
        return Optional.ofNullable(this.label);
    }
    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Boolean> locked() {
        return Optional.ofNullable(this.locked);
    }
    /**
     * @return Specifies the name for your session cookie.
     * 
     */
    public Optional<String> originCookieName() {
        return Optional.ofNullable(this.originCookieName);
    }
    /**
     * @return Specifies whether to use a cookie domain with the stickiness cookie, to tell the browser to which domain to send the cookie.
     * 
     */
    public Optional<Boolean> specifyStickinessCookieDomain() {
        return Optional.ofNullable(this.specifyStickinessCookieDomain);
    }
    /**
     * @return Sets whether to assign a `salt` value automatically to the cookie to prevent manipulation by the user. You should not enable this if sharing the population cookie across more than one property.
     * 
     */
    public Optional<Boolean> stickinessCookieAutomaticSalt() {
        return Optional.ofNullable(this.stickinessCookieAutomaticSalt);
    }
    /**
     * @return Specifies the domain to track the stickiness cookie.
     * 
     */
    public Optional<String> stickinessCookieDomain() {
        return Optional.ofNullable(this.stickinessCookieDomain);
    }
    /**
     * @return Specifies the stickiness cookie&#39;s salt value. Use this option to share the cookie across many properties.
     * 
     */
    public Optional<String> stickinessCookieSalt() {
        return Optional.ofNullable(this.stickinessCookieSalt);
    }
    /**
     * @return Ensures the cookie is transmitted only over HTTP.
     * 
     */
    public Optional<Boolean> stickinessCookieSetHttpOnlyFlag() {
        return Optional.ofNullable(this.stickinessCookieSetHttpOnlyFlag);
    }
    /**
     * @return Determines how a cookie persistently associates the client with a load-balanced origin.
     * 
     */
    public Optional<String> stickinessCookieType() {
        return Optional.ofNullable(this.stickinessCookieType);
    }
    /**
     * @return Sets how long it is before the cookie expires.
     * 
     */
    public Optional<String> stickinessDuration() {
        return Optional.ofNullable(this.stickinessDuration);
    }
    /**
     * @return Specifies when the cookie expires.
     * 
     */
    public Optional<String> stickinessExpirationDate() {
        return Optional.ofNullable(this.stickinessExpirationDate);
    }
    /**
     * @return Extends the duration of the cookie with each new request. When enabled, the `DURATION` thus specifies the latency between requests that would cause the cookie to expire.
     * 
     */
    public Optional<Boolean> stickinessRefresh() {
        return Optional.ofNullable(this.stickinessRefresh);
    }
    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<String> stickinessTitle() {
        return Optional.ofNullable(this.stickinessTitle);
    }
    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<String> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }
    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPropertyRulesBuilderRulesV20250218BehaviorApplicationLoadBalancer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable GetPropertyRulesBuilderRulesV20250218BehaviorApplicationLoadBalancerAllDownNetStorage allDownNetStorage;
        private @Nullable String allDownNetStorageFile;
        private @Nullable String allDownStatusCode;
        private @Nullable String allDownTitle;
        private @Nullable Boolean allowCachePrefresh;
        private @Nullable String cachedContentTitle;
        private @Nullable GetPropertyRulesBuilderRulesV20250218BehaviorApplicationLoadBalancerCloudletPolicy cloudletPolicy;
        private @Nullable Boolean enabled;
        private @Nullable Integer failoverAttemptsThreshold;
        private @Nullable String failoverMode;
        private @Nullable List<GetPropertyRulesBuilderRulesV20250218BehaviorApplicationLoadBalancerFailoverOriginMap> failoverOriginMaps;
        private @Nullable List<String> failoverStatusCodes;
        private @Nullable String failoverTitle;
        private @Nullable String label;
        private @Nullable Boolean locked;
        private @Nullable String originCookieName;
        private @Nullable Boolean specifyStickinessCookieDomain;
        private @Nullable Boolean stickinessCookieAutomaticSalt;
        private @Nullable String stickinessCookieDomain;
        private @Nullable String stickinessCookieSalt;
        private @Nullable Boolean stickinessCookieSetHttpOnlyFlag;
        private @Nullable String stickinessCookieType;
        private @Nullable String stickinessDuration;
        private @Nullable String stickinessExpirationDate;
        private @Nullable Boolean stickinessRefresh;
        private @Nullable String stickinessTitle;
        private @Nullable String templateUuid;
        private @Nullable String uuid;
        public Builder() {}
        public Builder(GetPropertyRulesBuilderRulesV20250218BehaviorApplicationLoadBalancer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allDownNetStorage = defaults.allDownNetStorage;
    	      this.allDownNetStorageFile = defaults.allDownNetStorageFile;
    	      this.allDownStatusCode = defaults.allDownStatusCode;
    	      this.allDownTitle = defaults.allDownTitle;
    	      this.allowCachePrefresh = defaults.allowCachePrefresh;
    	      this.cachedContentTitle = defaults.cachedContentTitle;
    	      this.cloudletPolicy = defaults.cloudletPolicy;
    	      this.enabled = defaults.enabled;
    	      this.failoverAttemptsThreshold = defaults.failoverAttemptsThreshold;
    	      this.failoverMode = defaults.failoverMode;
    	      this.failoverOriginMaps = defaults.failoverOriginMaps;
    	      this.failoverStatusCodes = defaults.failoverStatusCodes;
    	      this.failoverTitle = defaults.failoverTitle;
    	      this.label = defaults.label;
    	      this.locked = defaults.locked;
    	      this.originCookieName = defaults.originCookieName;
    	      this.specifyStickinessCookieDomain = defaults.specifyStickinessCookieDomain;
    	      this.stickinessCookieAutomaticSalt = defaults.stickinessCookieAutomaticSalt;
    	      this.stickinessCookieDomain = defaults.stickinessCookieDomain;
    	      this.stickinessCookieSalt = defaults.stickinessCookieSalt;
    	      this.stickinessCookieSetHttpOnlyFlag = defaults.stickinessCookieSetHttpOnlyFlag;
    	      this.stickinessCookieType = defaults.stickinessCookieType;
    	      this.stickinessDuration = defaults.stickinessDuration;
    	      this.stickinessExpirationDate = defaults.stickinessExpirationDate;
    	      this.stickinessRefresh = defaults.stickinessRefresh;
    	      this.stickinessTitle = defaults.stickinessTitle;
    	      this.templateUuid = defaults.templateUuid;
    	      this.uuid = defaults.uuid;
        }

        @CustomType.Setter
        public Builder allDownNetStorage(@Nullable GetPropertyRulesBuilderRulesV20250218BehaviorApplicationLoadBalancerAllDownNetStorage allDownNetStorage) {

            this.allDownNetStorage = allDownNetStorage;
            return this;
        }
        @CustomType.Setter
        public Builder allDownNetStorageFile(@Nullable String allDownNetStorageFile) {

            this.allDownNetStorageFile = allDownNetStorageFile;
            return this;
        }
        @CustomType.Setter
        public Builder allDownStatusCode(@Nullable String allDownStatusCode) {

            this.allDownStatusCode = allDownStatusCode;
            return this;
        }
        @CustomType.Setter
        public Builder allDownTitle(@Nullable String allDownTitle) {

            this.allDownTitle = allDownTitle;
            return this;
        }
        @CustomType.Setter
        public Builder allowCachePrefresh(@Nullable Boolean allowCachePrefresh) {

            this.allowCachePrefresh = allowCachePrefresh;
            return this;
        }
        @CustomType.Setter
        public Builder cachedContentTitle(@Nullable String cachedContentTitle) {

            this.cachedContentTitle = cachedContentTitle;
            return this;
        }
        @CustomType.Setter
        public Builder cloudletPolicy(@Nullable GetPropertyRulesBuilderRulesV20250218BehaviorApplicationLoadBalancerCloudletPolicy cloudletPolicy) {

            this.cloudletPolicy = cloudletPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder failoverAttemptsThreshold(@Nullable Integer failoverAttemptsThreshold) {

            this.failoverAttemptsThreshold = failoverAttemptsThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder failoverMode(@Nullable String failoverMode) {

            this.failoverMode = failoverMode;
            return this;
        }
        @CustomType.Setter
        public Builder failoverOriginMaps(@Nullable List<GetPropertyRulesBuilderRulesV20250218BehaviorApplicationLoadBalancerFailoverOriginMap> failoverOriginMaps) {

            this.failoverOriginMaps = failoverOriginMaps;
            return this;
        }
        public Builder failoverOriginMaps(GetPropertyRulesBuilderRulesV20250218BehaviorApplicationLoadBalancerFailoverOriginMap... failoverOriginMaps) {
            return failoverOriginMaps(List.of(failoverOriginMaps));
        }
        @CustomType.Setter
        public Builder failoverStatusCodes(@Nullable List<String> failoverStatusCodes) {

            this.failoverStatusCodes = failoverStatusCodes;
            return this;
        }
        public Builder failoverStatusCodes(String... failoverStatusCodes) {
            return failoverStatusCodes(List.of(failoverStatusCodes));
        }
        @CustomType.Setter
        public Builder failoverTitle(@Nullable String failoverTitle) {

            this.failoverTitle = failoverTitle;
            return this;
        }
        @CustomType.Setter
        public Builder label(@Nullable String label) {

            this.label = label;
            return this;
        }
        @CustomType.Setter
        public Builder locked(@Nullable Boolean locked) {

            this.locked = locked;
            return this;
        }
        @CustomType.Setter
        public Builder originCookieName(@Nullable String originCookieName) {

            this.originCookieName = originCookieName;
            return this;
        }
        @CustomType.Setter
        public Builder specifyStickinessCookieDomain(@Nullable Boolean specifyStickinessCookieDomain) {

            this.specifyStickinessCookieDomain = specifyStickinessCookieDomain;
            return this;
        }
        @CustomType.Setter
        public Builder stickinessCookieAutomaticSalt(@Nullable Boolean stickinessCookieAutomaticSalt) {

            this.stickinessCookieAutomaticSalt = stickinessCookieAutomaticSalt;
            return this;
        }
        @CustomType.Setter
        public Builder stickinessCookieDomain(@Nullable String stickinessCookieDomain) {

            this.stickinessCookieDomain = stickinessCookieDomain;
            return this;
        }
        @CustomType.Setter
        public Builder stickinessCookieSalt(@Nullable String stickinessCookieSalt) {

            this.stickinessCookieSalt = stickinessCookieSalt;
            return this;
        }
        @CustomType.Setter
        public Builder stickinessCookieSetHttpOnlyFlag(@Nullable Boolean stickinessCookieSetHttpOnlyFlag) {

            this.stickinessCookieSetHttpOnlyFlag = stickinessCookieSetHttpOnlyFlag;
            return this;
        }
        @CustomType.Setter
        public Builder stickinessCookieType(@Nullable String stickinessCookieType) {

            this.stickinessCookieType = stickinessCookieType;
            return this;
        }
        @CustomType.Setter
        public Builder stickinessDuration(@Nullable String stickinessDuration) {

            this.stickinessDuration = stickinessDuration;
            return this;
        }
        @CustomType.Setter
        public Builder stickinessExpirationDate(@Nullable String stickinessExpirationDate) {

            this.stickinessExpirationDate = stickinessExpirationDate;
            return this;
        }
        @CustomType.Setter
        public Builder stickinessRefresh(@Nullable Boolean stickinessRefresh) {

            this.stickinessRefresh = stickinessRefresh;
            return this;
        }
        @CustomType.Setter
        public Builder stickinessTitle(@Nullable String stickinessTitle) {

            this.stickinessTitle = stickinessTitle;
            return this;
        }
        @CustomType.Setter
        public Builder templateUuid(@Nullable String templateUuid) {

            this.templateUuid = templateUuid;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(@Nullable String uuid) {

            this.uuid = uuid;
            return this;
        }
        public GetPropertyRulesBuilderRulesV20250218BehaviorApplicationLoadBalancer build() {
            final var _resultValue = new GetPropertyRulesBuilderRulesV20250218BehaviorApplicationLoadBalancer();
            _resultValue.allDownNetStorage = allDownNetStorage;
            _resultValue.allDownNetStorageFile = allDownNetStorageFile;
            _resultValue.allDownStatusCode = allDownStatusCode;
            _resultValue.allDownTitle = allDownTitle;
            _resultValue.allowCachePrefresh = allowCachePrefresh;
            _resultValue.cachedContentTitle = cachedContentTitle;
            _resultValue.cloudletPolicy = cloudletPolicy;
            _resultValue.enabled = enabled;
            _resultValue.failoverAttemptsThreshold = failoverAttemptsThreshold;
            _resultValue.failoverMode = failoverMode;
            _resultValue.failoverOriginMaps = failoverOriginMaps;
            _resultValue.failoverStatusCodes = failoverStatusCodes;
            _resultValue.failoverTitle = failoverTitle;
            _resultValue.label = label;
            _resultValue.locked = locked;
            _resultValue.originCookieName = originCookieName;
            _resultValue.specifyStickinessCookieDomain = specifyStickinessCookieDomain;
            _resultValue.stickinessCookieAutomaticSalt = stickinessCookieAutomaticSalt;
            _resultValue.stickinessCookieDomain = stickinessCookieDomain;
            _resultValue.stickinessCookieSalt = stickinessCookieSalt;
            _resultValue.stickinessCookieSetHttpOnlyFlag = stickinessCookieSetHttpOnlyFlag;
            _resultValue.stickinessCookieType = stickinessCookieType;
            _resultValue.stickinessDuration = stickinessDuration;
            _resultValue.stickinessExpirationDate = stickinessExpirationDate;
            _resultValue.stickinessRefresh = stickinessRefresh;
            _resultValue.stickinessTitle = stickinessTitle;
            _resultValue.templateUuid = templateUuid;
            _resultValue.uuid = uuid;
            return _resultValue;
        }
    }
}
