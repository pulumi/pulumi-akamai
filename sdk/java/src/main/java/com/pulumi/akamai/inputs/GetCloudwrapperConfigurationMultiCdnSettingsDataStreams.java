// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;


public final class GetCloudwrapperConfigurationMultiCdnSettingsDataStreams extends com.pulumi.resources.InvokeArgs {

    public static final GetCloudwrapperConfigurationMultiCdnSettingsDataStreams Empty = new GetCloudwrapperConfigurationMultiCdnSettingsDataStreams();

    /**
     * Unique identifiers of the Data Streams.
     * 
     */
    @Import(name="dataStreamIds", required=true)
    private List<Integer> dataStreamIds;

    /**
     * @return Unique identifiers of the Data Streams.
     * 
     */
    public List<Integer> dataStreamIds() {
        return this.dataStreamIds;
    }

    /**
     * Enables DataStream reporting.
     * 
     */
    @Import(name="enabled", required=true)
    private Boolean enabled;

    /**
     * @return Enables DataStream reporting.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Specifies the percentage of log data you want to collect for this configuration.
     * 
     */
    @Import(name="samplingRate", required=true)
    private Integer samplingRate;

    /**
     * @return Specifies the percentage of log data you want to collect for this configuration.
     * 
     */
    public Integer samplingRate() {
        return this.samplingRate;
    }

    private GetCloudwrapperConfigurationMultiCdnSettingsDataStreams() {}

    private GetCloudwrapperConfigurationMultiCdnSettingsDataStreams(GetCloudwrapperConfigurationMultiCdnSettingsDataStreams $) {
        this.dataStreamIds = $.dataStreamIds;
        this.enabled = $.enabled;
        this.samplingRate = $.samplingRate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCloudwrapperConfigurationMultiCdnSettingsDataStreams defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCloudwrapperConfigurationMultiCdnSettingsDataStreams $;

        public Builder() {
            $ = new GetCloudwrapperConfigurationMultiCdnSettingsDataStreams();
        }

        public Builder(GetCloudwrapperConfigurationMultiCdnSettingsDataStreams defaults) {
            $ = new GetCloudwrapperConfigurationMultiCdnSettingsDataStreams(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataStreamIds Unique identifiers of the Data Streams.
         * 
         * @return builder
         * 
         */
        public Builder dataStreamIds(List<Integer> dataStreamIds) {
            $.dataStreamIds = dataStreamIds;
            return this;
        }

        /**
         * @param dataStreamIds Unique identifiers of the Data Streams.
         * 
         * @return builder
         * 
         */
        public Builder dataStreamIds(Integer... dataStreamIds) {
            return dataStreamIds(List.of(dataStreamIds));
        }

        /**
         * @param enabled Enables DataStream reporting.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param samplingRate Specifies the percentage of log data you want to collect for this configuration.
         * 
         * @return builder
         * 
         */
        public Builder samplingRate(Integer samplingRate) {
            $.samplingRate = samplingRate;
            return this;
        }

        public GetCloudwrapperConfigurationMultiCdnSettingsDataStreams build() {
            if ($.dataStreamIds == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationMultiCdnSettingsDataStreams", "dataStreamIds");
            }
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationMultiCdnSettingsDataStreams", "enabled");
            }
            if ($.samplingRate == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationMultiCdnSettingsDataStreams", "samplingRate");
            }
            return $;
        }
    }

}
