// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationResize extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyTransformationResize Empty = new GetImagingPolicyImagePolicyTransformationResize();

    /**
     * Preserves the aspect ratio. Select `fit` to make the image fit entirely within the selected width and height. When using `fit`, the resulting image has the largest possible size for the specified dimensions. Select `fill` to size the image so it both completely fills the dimensions and has the smallest possible file size. Otherwise `ignore` changes the original aspect ratio to fit within an arbitrarily shaped rectangle.
     * 
     */
    @Import(name="aspect")
    private @Nullable String aspect;

    /**
     * @return Preserves the aspect ratio. Select `fit` to make the image fit entirely within the selected width and height. When using `fit`, the resulting image has the largest possible size for the specified dimensions. Select `fill` to size the image so it both completely fills the dimensions and has the smallest possible file size. Otherwise `ignore` changes the original aspect ratio to fit within an arbitrarily shaped rectangle.
     * 
     */
    public Optional<String> aspect() {
        return Optional.ofNullable(this.aspect);
    }

    /**
     * Preserves the aspect ratio. Select `fit` to make the image fit entirely within the selected width and height. When using `fit`, the resulting image has the largest possible size for the specified dimensions. Select `fill` to size the image so it both completely fills the dimensions and has the smallest possible file size. Otherwise `ignore` changes the original aspect ratio to fit within an arbitrarily shaped rectangle.
     * 
     */
    @Import(name="aspectVar")
    private @Nullable String aspectVar;

    /**
     * @return Preserves the aspect ratio. Select `fit` to make the image fit entirely within the selected width and height. When using `fit`, the resulting image has the largest possible size for the specified dimensions. Select `fill` to size the image so it both completely fills the dimensions and has the smallest possible file size. Otherwise `ignore` changes the original aspect ratio to fit within an arbitrarily shaped rectangle.
     * 
     */
    public Optional<String> aspectVar() {
        return Optional.ofNullable(this.aspectVar);
    }

    /**
     * The height to resize the source image to. Must be set if height is not specified.
     * 
     */
    @Import(name="height")
    private @Nullable String height;

    /**
     * @return The height to resize the source image to. Must be set if height is not specified.
     * 
     */
    public Optional<String> height() {
        return Optional.ofNullable(this.height);
    }

    /**
     * The height to resize the source image to. Must be set if height is not specified.
     * 
     */
    @Import(name="heightVar")
    private @Nullable String heightVar;

    /**
     * @return The height to resize the source image to. Must be set if height is not specified.
     * 
     */
    public Optional<String> heightVar() {
        return Optional.ofNullable(this.heightVar);
    }

    /**
     * Sets constraints for the image resize. Select `normal` to resize in all cases, either increasing or decreasing the dimensions. Select `downsize` to ignore this transformation if the result would be larger than the original. Select `upsize` to ignore this transformation if the result would be smaller.
     * 
     */
    @Import(name="type")
    private @Nullable String type;

    /**
     * @return Sets constraints for the image resize. Select `normal` to resize in all cases, either increasing or decreasing the dimensions. Select `downsize` to ignore this transformation if the result would be larger than the original. Select `upsize` to ignore this transformation if the result would be smaller.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Sets constraints for the image resize. Select `normal` to resize in all cases, either increasing or decreasing the dimensions. Select `downsize` to ignore this transformation if the result would be larger than the original. Select `upsize` to ignore this transformation if the result would be smaller.
     * 
     */
    @Import(name="typeVar")
    private @Nullable String typeVar;

    /**
     * @return Sets constraints for the image resize. Select `normal` to resize in all cases, either increasing or decreasing the dimensions. Select `downsize` to ignore this transformation if the result would be larger than the original. Select `upsize` to ignore this transformation if the result would be smaller.
     * 
     */
    public Optional<String> typeVar() {
        return Optional.ofNullable(this.typeVar);
    }

    /**
     * The width to resize the source image to. Must be set if width is not specified.
     * 
     */
    @Import(name="width")
    private @Nullable String width;

    /**
     * @return The width to resize the source image to. Must be set if width is not specified.
     * 
     */
    public Optional<String> width() {
        return Optional.ofNullable(this.width);
    }

    /**
     * The width to resize the source image to. Must be set if width is not specified.
     * 
     */
    @Import(name="widthVar")
    private @Nullable String widthVar;

    /**
     * @return The width to resize the source image to. Must be set if width is not specified.
     * 
     */
    public Optional<String> widthVar() {
        return Optional.ofNullable(this.widthVar);
    }

    private GetImagingPolicyImagePolicyTransformationResize() {}

    private GetImagingPolicyImagePolicyTransformationResize(GetImagingPolicyImagePolicyTransformationResize $) {
        this.aspect = $.aspect;
        this.aspectVar = $.aspectVar;
        this.height = $.height;
        this.heightVar = $.heightVar;
        this.type = $.type;
        this.typeVar = $.typeVar;
        this.width = $.width;
        this.widthVar = $.widthVar;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationResize defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationResize $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationResize();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationResize defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationResize(Objects.requireNonNull(defaults));
        }

        /**
         * @param aspect Preserves the aspect ratio. Select `fit` to make the image fit entirely within the selected width and height. When using `fit`, the resulting image has the largest possible size for the specified dimensions. Select `fill` to size the image so it both completely fills the dimensions and has the smallest possible file size. Otherwise `ignore` changes the original aspect ratio to fit within an arbitrarily shaped rectangle.
         * 
         * @return builder
         * 
         */
        public Builder aspect(@Nullable String aspect) {
            $.aspect = aspect;
            return this;
        }

        /**
         * @param aspectVar Preserves the aspect ratio. Select `fit` to make the image fit entirely within the selected width and height. When using `fit`, the resulting image has the largest possible size for the specified dimensions. Select `fill` to size the image so it both completely fills the dimensions and has the smallest possible file size. Otherwise `ignore` changes the original aspect ratio to fit within an arbitrarily shaped rectangle.
         * 
         * @return builder
         * 
         */
        public Builder aspectVar(@Nullable String aspectVar) {
            $.aspectVar = aspectVar;
            return this;
        }

        /**
         * @param height The height to resize the source image to. Must be set if height is not specified.
         * 
         * @return builder
         * 
         */
        public Builder height(@Nullable String height) {
            $.height = height;
            return this;
        }

        /**
         * @param heightVar The height to resize the source image to. Must be set if height is not specified.
         * 
         * @return builder
         * 
         */
        public Builder heightVar(@Nullable String heightVar) {
            $.heightVar = heightVar;
            return this;
        }

        /**
         * @param type Sets constraints for the image resize. Select `normal` to resize in all cases, either increasing or decreasing the dimensions. Select `downsize` to ignore this transformation if the result would be larger than the original. Select `upsize` to ignore this transformation if the result would be smaller.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        /**
         * @param typeVar Sets constraints for the image resize. Select `normal` to resize in all cases, either increasing or decreasing the dimensions. Select `downsize` to ignore this transformation if the result would be larger than the original. Select `upsize` to ignore this transformation if the result would be smaller.
         * 
         * @return builder
         * 
         */
        public Builder typeVar(@Nullable String typeVar) {
            $.typeVar = typeVar;
            return this;
        }

        /**
         * @param width The width to resize the source image to. Must be set if width is not specified.
         * 
         * @return builder
         * 
         */
        public Builder width(@Nullable String width) {
            $.width = width;
            return this;
        }

        /**
         * @param widthVar The width to resize the source image to. Must be set if width is not specified.
         * 
         * @return builder
         * 
         */
        public Builder widthVar(@Nullable String widthVar) {
            $.widthVar = widthVar;
            return this;
        }

        public GetImagingPolicyImagePolicyTransformationResize build() {
            return $;
        }
    }

}
