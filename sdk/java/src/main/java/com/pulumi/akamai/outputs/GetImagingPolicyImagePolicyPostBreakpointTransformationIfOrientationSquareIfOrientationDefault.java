// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultBackgroundColor;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultBlur;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultChromaKey;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultComposite;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultCompound;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultContrast;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultGoop;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultGrayscale;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultHsl;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultHsv;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfDimension;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfOrientation;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultMaxColor;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultMirror;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultMonoHue;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultOpacity;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultRemoveColor;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultUnsharpMask;
import com.pulumi.core.annotations.CustomType;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefault {
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultBackgroundColor> backgroundColors;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultBlur> blurs;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultChromaKey> chromaKeys;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultComposite> composites;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultCompound> compounds;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultContrast> contrasts;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultGoop> goops;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultGrayscale> grayscales;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultHsl> hsls;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultHsv> hsvs;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfDimension> ifDimensions;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfOrientation> ifOrientations;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultMaxColor> maxColors;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultMirror> mirrors;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultMonoHue> monoHues;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultOpacity> opacities;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultRemoveColor> removeColors;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultUnsharpMask> unsharpMasks;

    private GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefault() {}
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultBackgroundColor> backgroundColors() {
        return this.backgroundColors == null ? List.of() : this.backgroundColors;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultBlur> blurs() {
        return this.blurs == null ? List.of() : this.blurs;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultChromaKey> chromaKeys() {
        return this.chromaKeys == null ? List.of() : this.chromaKeys;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultComposite> composites() {
        return this.composites == null ? List.of() : this.composites;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultCompound> compounds() {
        return this.compounds == null ? List.of() : this.compounds;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultContrast> contrasts() {
        return this.contrasts == null ? List.of() : this.contrasts;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultGoop> goops() {
        return this.goops == null ? List.of() : this.goops;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultGrayscale> grayscales() {
        return this.grayscales == null ? List.of() : this.grayscales;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultHsl> hsls() {
        return this.hsls == null ? List.of() : this.hsls;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultHsv> hsvs() {
        return this.hsvs == null ? List.of() : this.hsvs;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfDimension> ifDimensions() {
        return this.ifDimensions == null ? List.of() : this.ifDimensions;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfOrientation> ifOrientations() {
        return this.ifOrientations == null ? List.of() : this.ifOrientations;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultMaxColor> maxColors() {
        return this.maxColors == null ? List.of() : this.maxColors;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultMirror> mirrors() {
        return this.mirrors == null ? List.of() : this.mirrors;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultMonoHue> monoHues() {
        return this.monoHues == null ? List.of() : this.monoHues;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultOpacity> opacities() {
        return this.opacities == null ? List.of() : this.opacities;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultRemoveColor> removeColors() {
        return this.removeColors == null ? List.of() : this.removeColors;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultUnsharpMask> unsharpMasks() {
        return this.unsharpMasks == null ? List.of() : this.unsharpMasks;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefault defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultBackgroundColor> backgroundColors;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultBlur> blurs;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultChromaKey> chromaKeys;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultComposite> composites;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultCompound> compounds;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultContrast> contrasts;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultGoop> goops;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultGrayscale> grayscales;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultHsl> hsls;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultHsv> hsvs;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfDimension> ifDimensions;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfOrientation> ifOrientations;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultMaxColor> maxColors;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultMirror> mirrors;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultMonoHue> monoHues;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultOpacity> opacities;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultRemoveColor> removeColors;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultUnsharpMask> unsharpMasks;
        public Builder() {}
        public Builder(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefault defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backgroundColors = defaults.backgroundColors;
    	      this.blurs = defaults.blurs;
    	      this.chromaKeys = defaults.chromaKeys;
    	      this.composites = defaults.composites;
    	      this.compounds = defaults.compounds;
    	      this.contrasts = defaults.contrasts;
    	      this.goops = defaults.goops;
    	      this.grayscales = defaults.grayscales;
    	      this.hsls = defaults.hsls;
    	      this.hsvs = defaults.hsvs;
    	      this.ifDimensions = defaults.ifDimensions;
    	      this.ifOrientations = defaults.ifOrientations;
    	      this.maxColors = defaults.maxColors;
    	      this.mirrors = defaults.mirrors;
    	      this.monoHues = defaults.monoHues;
    	      this.opacities = defaults.opacities;
    	      this.removeColors = defaults.removeColors;
    	      this.unsharpMasks = defaults.unsharpMasks;
        }

        @CustomType.Setter
        public Builder backgroundColors(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultBackgroundColor> backgroundColors) {
            this.backgroundColors = backgroundColors;
            return this;
        }
        public Builder backgroundColors(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultBackgroundColor... backgroundColors) {
            return backgroundColors(List.of(backgroundColors));
        }
        @CustomType.Setter
        public Builder blurs(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultBlur> blurs) {
            this.blurs = blurs;
            return this;
        }
        public Builder blurs(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultBlur... blurs) {
            return blurs(List.of(blurs));
        }
        @CustomType.Setter
        public Builder chromaKeys(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultChromaKey> chromaKeys) {
            this.chromaKeys = chromaKeys;
            return this;
        }
        public Builder chromaKeys(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultChromaKey... chromaKeys) {
            return chromaKeys(List.of(chromaKeys));
        }
        @CustomType.Setter
        public Builder composites(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultComposite> composites) {
            this.composites = composites;
            return this;
        }
        public Builder composites(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultComposite... composites) {
            return composites(List.of(composites));
        }
        @CustomType.Setter
        public Builder compounds(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultCompound> compounds) {
            this.compounds = compounds;
            return this;
        }
        public Builder compounds(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultCompound... compounds) {
            return compounds(List.of(compounds));
        }
        @CustomType.Setter
        public Builder contrasts(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultContrast> contrasts) {
            this.contrasts = contrasts;
            return this;
        }
        public Builder contrasts(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultContrast... contrasts) {
            return contrasts(List.of(contrasts));
        }
        @CustomType.Setter
        public Builder goops(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultGoop> goops) {
            this.goops = goops;
            return this;
        }
        public Builder goops(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultGoop... goops) {
            return goops(List.of(goops));
        }
        @CustomType.Setter
        public Builder grayscales(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultGrayscale> grayscales) {
            this.grayscales = grayscales;
            return this;
        }
        public Builder grayscales(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultGrayscale... grayscales) {
            return grayscales(List.of(grayscales));
        }
        @CustomType.Setter
        public Builder hsls(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultHsl> hsls) {
            this.hsls = hsls;
            return this;
        }
        public Builder hsls(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultHsl... hsls) {
            return hsls(List.of(hsls));
        }
        @CustomType.Setter
        public Builder hsvs(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultHsv> hsvs) {
            this.hsvs = hsvs;
            return this;
        }
        public Builder hsvs(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultHsv... hsvs) {
            return hsvs(List.of(hsvs));
        }
        @CustomType.Setter
        public Builder ifDimensions(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfDimension> ifDimensions) {
            this.ifDimensions = ifDimensions;
            return this;
        }
        public Builder ifDimensions(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfDimension... ifDimensions) {
            return ifDimensions(List.of(ifDimensions));
        }
        @CustomType.Setter
        public Builder ifOrientations(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfOrientation> ifOrientations) {
            this.ifOrientations = ifOrientations;
            return this;
        }
        public Builder ifOrientations(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfOrientation... ifOrientations) {
            return ifOrientations(List.of(ifOrientations));
        }
        @CustomType.Setter
        public Builder maxColors(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultMaxColor> maxColors) {
            this.maxColors = maxColors;
            return this;
        }
        public Builder maxColors(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultMaxColor... maxColors) {
            return maxColors(List.of(maxColors));
        }
        @CustomType.Setter
        public Builder mirrors(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultMirror> mirrors) {
            this.mirrors = mirrors;
            return this;
        }
        public Builder mirrors(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultMirror... mirrors) {
            return mirrors(List.of(mirrors));
        }
        @CustomType.Setter
        public Builder monoHues(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultMonoHue> monoHues) {
            this.monoHues = monoHues;
            return this;
        }
        public Builder monoHues(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultMonoHue... monoHues) {
            return monoHues(List.of(monoHues));
        }
        @CustomType.Setter
        public Builder opacities(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultOpacity> opacities) {
            this.opacities = opacities;
            return this;
        }
        public Builder opacities(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultOpacity... opacities) {
            return opacities(List.of(opacities));
        }
        @CustomType.Setter
        public Builder removeColors(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultRemoveColor> removeColors) {
            this.removeColors = removeColors;
            return this;
        }
        public Builder removeColors(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultRemoveColor... removeColors) {
            return removeColors(List.of(removeColors));
        }
        @CustomType.Setter
        public Builder unsharpMasks(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultUnsharpMask> unsharpMasks) {
            this.unsharpMasks = unsharpMasks;
            return this;
        }
        public Builder unsharpMasks(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultUnsharpMask... unsharpMasks) {
            return unsharpMasks(List.of(unsharpMasks));
        }
        public GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefault build() {
            final var o = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefault();
            o.backgroundColors = backgroundColors;
            o.blurs = blurs;
            o.chromaKeys = chromaKeys;
            o.composites = composites;
            o.compounds = compounds;
            o.contrasts = contrasts;
            o.goops = goops;
            o.grayscales = grayscales;
            o.hsls = hsls;
            o.hsvs = hsvs;
            o.ifDimensions = ifDimensions;
            o.ifOrientations = ifOrientations;
            o.maxColors = maxColors;
            o.mirrors = mirrors;
            o.monoHues = monoHues;
            o.opacities = opacities;
            o.removeColors = removeColors;
            o.unsharpMasks = unsharpMasks;
            return o;
        }
    }
}
