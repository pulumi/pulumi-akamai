// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualBackgroundColor;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualBlur;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualChromaKey;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualComposite;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualCompound;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualContrast;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualGoop;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualGrayscale;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualHsl;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualHsv;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfDimension;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfOrientation;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualMaxColor;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualMirror;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualMonoHue;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualOpacity;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualRemoveColor;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualUnsharpMask;
import com.pulumi.core.annotations.CustomType;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqual {
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualBackgroundColor> backgroundColors;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualBlur> blurs;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualChromaKey> chromaKeys;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualComposite> composites;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualCompound> compounds;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualContrast> contrasts;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualGoop> goops;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualGrayscale> grayscales;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualHsl> hsls;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualHsv> hsvs;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfDimension> ifDimensions;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfOrientation> ifOrientations;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualMaxColor> maxColors;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualMirror> mirrors;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualMonoHue> monoHues;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualOpacity> opacities;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualRemoveColor> removeColors;
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualUnsharpMask> unsharpMasks;

    private GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqual() {}
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualBackgroundColor> backgroundColors() {
        return this.backgroundColors == null ? List.of() : this.backgroundColors;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualBlur> blurs() {
        return this.blurs == null ? List.of() : this.blurs;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualChromaKey> chromaKeys() {
        return this.chromaKeys == null ? List.of() : this.chromaKeys;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualComposite> composites() {
        return this.composites == null ? List.of() : this.composites;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualCompound> compounds() {
        return this.compounds == null ? List.of() : this.compounds;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualContrast> contrasts() {
        return this.contrasts == null ? List.of() : this.contrasts;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualGoop> goops() {
        return this.goops == null ? List.of() : this.goops;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualGrayscale> grayscales() {
        return this.grayscales == null ? List.of() : this.grayscales;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualHsl> hsls() {
        return this.hsls == null ? List.of() : this.hsls;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualHsv> hsvs() {
        return this.hsvs == null ? List.of() : this.hsvs;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfDimension> ifDimensions() {
        return this.ifDimensions == null ? List.of() : this.ifDimensions;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfOrientation> ifOrientations() {
        return this.ifOrientations == null ? List.of() : this.ifOrientations;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualMaxColor> maxColors() {
        return this.maxColors == null ? List.of() : this.maxColors;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualMirror> mirrors() {
        return this.mirrors == null ? List.of() : this.mirrors;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualMonoHue> monoHues() {
        return this.monoHues == null ? List.of() : this.monoHues;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualOpacity> opacities() {
        return this.opacities == null ? List.of() : this.opacities;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualRemoveColor> removeColors() {
        return this.removeColors == null ? List.of() : this.removeColors;
    }
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualUnsharpMask> unsharpMasks() {
        return this.unsharpMasks == null ? List.of() : this.unsharpMasks;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqual defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualBackgroundColor> backgroundColors;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualBlur> blurs;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualChromaKey> chromaKeys;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualComposite> composites;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualCompound> compounds;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualContrast> contrasts;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualGoop> goops;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualGrayscale> grayscales;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualHsl> hsls;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualHsv> hsvs;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfDimension> ifDimensions;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfOrientation> ifOrientations;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualMaxColor> maxColors;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualMirror> mirrors;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualMonoHue> monoHues;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualOpacity> opacities;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualRemoveColor> removeColors;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualUnsharpMask> unsharpMasks;
        public Builder() {}
        public Builder(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqual defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backgroundColors = defaults.backgroundColors;
    	      this.blurs = defaults.blurs;
    	      this.chromaKeys = defaults.chromaKeys;
    	      this.composites = defaults.composites;
    	      this.compounds = defaults.compounds;
    	      this.contrasts = defaults.contrasts;
    	      this.goops = defaults.goops;
    	      this.grayscales = defaults.grayscales;
    	      this.hsls = defaults.hsls;
    	      this.hsvs = defaults.hsvs;
    	      this.ifDimensions = defaults.ifDimensions;
    	      this.ifOrientations = defaults.ifOrientations;
    	      this.maxColors = defaults.maxColors;
    	      this.mirrors = defaults.mirrors;
    	      this.monoHues = defaults.monoHues;
    	      this.opacities = defaults.opacities;
    	      this.removeColors = defaults.removeColors;
    	      this.unsharpMasks = defaults.unsharpMasks;
        }

        @CustomType.Setter
        public Builder backgroundColors(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualBackgroundColor> backgroundColors) {
            this.backgroundColors = backgroundColors;
            return this;
        }
        public Builder backgroundColors(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualBackgroundColor... backgroundColors) {
            return backgroundColors(List.of(backgroundColors));
        }
        @CustomType.Setter
        public Builder blurs(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualBlur> blurs) {
            this.blurs = blurs;
            return this;
        }
        public Builder blurs(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualBlur... blurs) {
            return blurs(List.of(blurs));
        }
        @CustomType.Setter
        public Builder chromaKeys(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualChromaKey> chromaKeys) {
            this.chromaKeys = chromaKeys;
            return this;
        }
        public Builder chromaKeys(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualChromaKey... chromaKeys) {
            return chromaKeys(List.of(chromaKeys));
        }
        @CustomType.Setter
        public Builder composites(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualComposite> composites) {
            this.composites = composites;
            return this;
        }
        public Builder composites(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualComposite... composites) {
            return composites(List.of(composites));
        }
        @CustomType.Setter
        public Builder compounds(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualCompound> compounds) {
            this.compounds = compounds;
            return this;
        }
        public Builder compounds(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualCompound... compounds) {
            return compounds(List.of(compounds));
        }
        @CustomType.Setter
        public Builder contrasts(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualContrast> contrasts) {
            this.contrasts = contrasts;
            return this;
        }
        public Builder contrasts(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualContrast... contrasts) {
            return contrasts(List.of(contrasts));
        }
        @CustomType.Setter
        public Builder goops(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualGoop> goops) {
            this.goops = goops;
            return this;
        }
        public Builder goops(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualGoop... goops) {
            return goops(List.of(goops));
        }
        @CustomType.Setter
        public Builder grayscales(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualGrayscale> grayscales) {
            this.grayscales = grayscales;
            return this;
        }
        public Builder grayscales(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualGrayscale... grayscales) {
            return grayscales(List.of(grayscales));
        }
        @CustomType.Setter
        public Builder hsls(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualHsl> hsls) {
            this.hsls = hsls;
            return this;
        }
        public Builder hsls(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualHsl... hsls) {
            return hsls(List.of(hsls));
        }
        @CustomType.Setter
        public Builder hsvs(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualHsv> hsvs) {
            this.hsvs = hsvs;
            return this;
        }
        public Builder hsvs(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualHsv... hsvs) {
            return hsvs(List.of(hsvs));
        }
        @CustomType.Setter
        public Builder ifDimensions(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfDimension> ifDimensions) {
            this.ifDimensions = ifDimensions;
            return this;
        }
        public Builder ifDimensions(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfDimension... ifDimensions) {
            return ifDimensions(List.of(ifDimensions));
        }
        @CustomType.Setter
        public Builder ifOrientations(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfOrientation> ifOrientations) {
            this.ifOrientations = ifOrientations;
            return this;
        }
        public Builder ifOrientations(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfOrientation... ifOrientations) {
            return ifOrientations(List.of(ifOrientations));
        }
        @CustomType.Setter
        public Builder maxColors(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualMaxColor> maxColors) {
            this.maxColors = maxColors;
            return this;
        }
        public Builder maxColors(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualMaxColor... maxColors) {
            return maxColors(List.of(maxColors));
        }
        @CustomType.Setter
        public Builder mirrors(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualMirror> mirrors) {
            this.mirrors = mirrors;
            return this;
        }
        public Builder mirrors(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualMirror... mirrors) {
            return mirrors(List.of(mirrors));
        }
        @CustomType.Setter
        public Builder monoHues(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualMonoHue> monoHues) {
            this.monoHues = monoHues;
            return this;
        }
        public Builder monoHues(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualMonoHue... monoHues) {
            return monoHues(List.of(monoHues));
        }
        @CustomType.Setter
        public Builder opacities(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualOpacity> opacities) {
            this.opacities = opacities;
            return this;
        }
        public Builder opacities(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualOpacity... opacities) {
            return opacities(List.of(opacities));
        }
        @CustomType.Setter
        public Builder removeColors(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualRemoveColor> removeColors) {
            this.removeColors = removeColors;
            return this;
        }
        public Builder removeColors(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualRemoveColor... removeColors) {
            return removeColors(List.of(removeColors));
        }
        @CustomType.Setter
        public Builder unsharpMasks(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualUnsharpMask> unsharpMasks) {
            this.unsharpMasks = unsharpMasks;
            return this;
        }
        public Builder unsharpMasks(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualUnsharpMask... unsharpMasks) {
            return unsharpMasks(List.of(unsharpMasks));
        }
        public GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqual build() {
            final var o = new GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqual();
            o.backgroundColors = backgroundColors;
            o.blurs = blurs;
            o.chromaKeys = chromaKeys;
            o.composites = composites;
            o.compounds = compounds;
            o.contrasts = contrasts;
            o.goops = goops;
            o.grayscales = grayscales;
            o.hsls = hsls;
            o.hsvs = hsvs;
            o.ifDimensions = ifDimensions;
            o.ifOrientations = ifOrientations;
            o.maxColors = maxColors;
            o.mirrors = mirrors;
            o.monoHues = monoHues;
            o.opacities = opacities;
            o.removeColors = removeColors;
            o.unsharpMasks = unsharpMasks;
            return o;
        }
    }
}
