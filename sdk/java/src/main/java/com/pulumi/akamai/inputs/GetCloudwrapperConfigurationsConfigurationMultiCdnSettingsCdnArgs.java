// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnArgs Empty = new GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnArgs();

    @Import(name="cdnAuthKeys")
    private @Nullable Output<List<GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs>> cdnAuthKeys;

    public Optional<Output<List<GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs>>> cdnAuthKeys() {
        return Optional.ofNullable(this.cdnAuthKeys);
    }

    @Import(name="cdnCode", required=true)
    private Output<String> cdnCode;

    public Output<String> cdnCode() {
        return this.cdnCode;
    }

    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    public Output<Boolean> enabled() {
        return this.enabled;
    }

    @Import(name="httpsOnly", required=true)
    private Output<Boolean> httpsOnly;

    public Output<Boolean> httpsOnly() {
        return this.httpsOnly;
    }

    @Import(name="ipAclCidrs", required=true)
    private Output<List<String>> ipAclCidrs;

    public Output<List<String>> ipAclCidrs() {
        return this.ipAclCidrs;
    }

    private GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnArgs() {}

    private GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnArgs(GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnArgs $) {
        this.cdnAuthKeys = $.cdnAuthKeys;
        this.cdnCode = $.cdnCode;
        this.enabled = $.enabled;
        this.httpsOnly = $.httpsOnly;
        this.ipAclCidrs = $.ipAclCidrs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnArgs $;

        public Builder() {
            $ = new GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnArgs();
        }

        public Builder(GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnArgs defaults) {
            $ = new GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnArgs(Objects.requireNonNull(defaults));
        }

        public Builder cdnAuthKeys(@Nullable Output<List<GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs>> cdnAuthKeys) {
            $.cdnAuthKeys = cdnAuthKeys;
            return this;
        }

        public Builder cdnAuthKeys(List<GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs> cdnAuthKeys) {
            return cdnAuthKeys(Output.of(cdnAuthKeys));
        }

        public Builder cdnAuthKeys(GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs... cdnAuthKeys) {
            return cdnAuthKeys(List.of(cdnAuthKeys));
        }

        public Builder cdnCode(Output<String> cdnCode) {
            $.cdnCode = cdnCode;
            return this;
        }

        public Builder cdnCode(String cdnCode) {
            return cdnCode(Output.of(cdnCode));
        }

        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder httpsOnly(Output<Boolean> httpsOnly) {
            $.httpsOnly = httpsOnly;
            return this;
        }

        public Builder httpsOnly(Boolean httpsOnly) {
            return httpsOnly(Output.of(httpsOnly));
        }

        public Builder ipAclCidrs(Output<List<String>> ipAclCidrs) {
            $.ipAclCidrs = ipAclCidrs;
            return this;
        }

        public Builder ipAclCidrs(List<String> ipAclCidrs) {
            return ipAclCidrs(Output.of(ipAclCidrs));
        }

        public Builder ipAclCidrs(String... ipAclCidrs) {
            return ipAclCidrs(List.of(ipAclCidrs));
        }

        public GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnArgs build() {
            $.cdnCode = Objects.requireNonNull($.cdnCode, "expected parameter 'cdnCode' to be non-null");
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            $.httpsOnly = Objects.requireNonNull($.httpsOnly, "expected parameter 'httpsOnly' to be non-null");
            $.ipAclCidrs = Objects.requireNonNull($.ipAclCidrs, "expected parameter 'ipAclCidrs' to be non-null");
            return $;
        }
    }

}
