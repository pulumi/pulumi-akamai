// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkListState extends com.pulumi.resources.ResourceArgs {

    public static final NetworkListState Empty = new NetworkListState();

    /**
     * The contract ID of the network list. If supplied, group_id must also be supplied. The
     * contract_id value of an existing network list may not be modified.
     * 
     */
    @Import(name="contractId")
    private @Nullable Output<String> contractId;

    /**
     * @return The contract ID of the network list. If supplied, group_id must also be supplied. The
     * contract_id value of an existing network list may not be modified.
     * 
     */
    public Optional<Output<String>> contractId() {
        return Optional.ofNullable(this.contractId);
    }

    /**
     * The description to be assigned to the network list.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description to be assigned to the network list.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The group ID of the network list. If supplied, contract_id must also be supplied. The
     * group_id value of an existing network list may not be modified.
     * 
     */
    @Import(name="groupId")
    private @Nullable Output<Integer> groupId;

    /**
     * @return The group ID of the network list. If supplied, contract_id must also be supplied. The
     * group_id value of an existing network list may not be modified.
     * 
     */
    public Optional<Output<Integer>> groupId() {
        return Optional.ofNullable(this.groupId);
    }

    /**
     * A list of IP addresses or locations to be included in the list, added to an existing list, or
     * removed from an existing list.
     * 
     */
    @Import(name="lists")
    private @Nullable Output<List<String>> lists;

    /**
     * @return A list of IP addresses or locations to be included in the list, added to an existing list, or
     * removed from an existing list.
     * 
     */
    public Optional<Output<List<String>>> lists() {
        return Optional.ofNullable(this.lists);
    }

    /**
     * A string specifying the interpretation of the `list` parameter. Must be one of the following:
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return A string specifying the interpretation of the `list` parameter. Must be one of the following:
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * The name to be assigned to the network list.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name to be assigned to the network list.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the network list.
     * 
     */
    @Import(name="networkListId")
    private @Nullable Output<String> networkListId;

    /**
     * @return The ID of the network list.
     * 
     */
    public Optional<Output<String>> networkListId() {
        return Optional.ofNullable(this.networkListId);
    }

    /**
     * An integer that identifies the current version of the network list; this value is incremented each time
     * the list is modified.
     * 
     */
    @Import(name="syncPoint")
    private @Nullable Output<Integer> syncPoint;

    /**
     * @return An integer that identifies the current version of the network list; this value is incremented each time
     * the list is modified.
     * 
     */
    public Optional<Output<Integer>> syncPoint() {
        return Optional.ofNullable(this.syncPoint);
    }

    /**
     * The type of the network list; must be either &#34;IP&#34; or &#34;GEO&#34;.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of the network list; must be either &#34;IP&#34; or &#34;GEO&#34;.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * unique ID
     * 
     */
    @Import(name="uniqueid")
    private @Nullable Output<String> uniqueid;

    /**
     * @return unique ID
     * 
     */
    public Optional<Output<String>> uniqueid() {
        return Optional.ofNullable(this.uniqueid);
    }

    private NetworkListState() {}

    private NetworkListState(NetworkListState $) {
        this.contractId = $.contractId;
        this.description = $.description;
        this.groupId = $.groupId;
        this.lists = $.lists;
        this.mode = $.mode;
        this.name = $.name;
        this.networkListId = $.networkListId;
        this.syncPoint = $.syncPoint;
        this.type = $.type;
        this.uniqueid = $.uniqueid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkListState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkListState $;

        public Builder() {
            $ = new NetworkListState();
        }

        public Builder(NetworkListState defaults) {
            $ = new NetworkListState(Objects.requireNonNull(defaults));
        }

        /**
         * @param contractId The contract ID of the network list. If supplied, group_id must also be supplied. The
         * contract_id value of an existing network list may not be modified.
         * 
         * @return builder
         * 
         */
        public Builder contractId(@Nullable Output<String> contractId) {
            $.contractId = contractId;
            return this;
        }

        /**
         * @param contractId The contract ID of the network list. If supplied, group_id must also be supplied. The
         * contract_id value of an existing network list may not be modified.
         * 
         * @return builder
         * 
         */
        public Builder contractId(String contractId) {
            return contractId(Output.of(contractId));
        }

        /**
         * @param description The description to be assigned to the network list.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description to be assigned to the network list.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param groupId The group ID of the network list. If supplied, contract_id must also be supplied. The
         * group_id value of an existing network list may not be modified.
         * 
         * @return builder
         * 
         */
        public Builder groupId(@Nullable Output<Integer> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId The group ID of the network list. If supplied, contract_id must also be supplied. The
         * group_id value of an existing network list may not be modified.
         * 
         * @return builder
         * 
         */
        public Builder groupId(Integer groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param lists A list of IP addresses or locations to be included in the list, added to an existing list, or
         * removed from an existing list.
         * 
         * @return builder
         * 
         */
        public Builder lists(@Nullable Output<List<String>> lists) {
            $.lists = lists;
            return this;
        }

        /**
         * @param lists A list of IP addresses or locations to be included in the list, added to an existing list, or
         * removed from an existing list.
         * 
         * @return builder
         * 
         */
        public Builder lists(List<String> lists) {
            return lists(Output.of(lists));
        }

        /**
         * @param lists A list of IP addresses or locations to be included in the list, added to an existing list, or
         * removed from an existing list.
         * 
         * @return builder
         * 
         */
        public Builder lists(String... lists) {
            return lists(List.of(lists));
        }

        /**
         * @param mode A string specifying the interpretation of the `list` parameter. Must be one of the following:
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode A string specifying the interpretation of the `list` parameter. Must be one of the following:
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param name The name to be assigned to the network list.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name to be assigned to the network list.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkListId The ID of the network list.
         * 
         * @return builder
         * 
         */
        public Builder networkListId(@Nullable Output<String> networkListId) {
            $.networkListId = networkListId;
            return this;
        }

        /**
         * @param networkListId The ID of the network list.
         * 
         * @return builder
         * 
         */
        public Builder networkListId(String networkListId) {
            return networkListId(Output.of(networkListId));
        }

        /**
         * @param syncPoint An integer that identifies the current version of the network list; this value is incremented each time
         * the list is modified.
         * 
         * @return builder
         * 
         */
        public Builder syncPoint(@Nullable Output<Integer> syncPoint) {
            $.syncPoint = syncPoint;
            return this;
        }

        /**
         * @param syncPoint An integer that identifies the current version of the network list; this value is incremented each time
         * the list is modified.
         * 
         * @return builder
         * 
         */
        public Builder syncPoint(Integer syncPoint) {
            return syncPoint(Output.of(syncPoint));
        }

        /**
         * @param type The type of the network list; must be either &#34;IP&#34; or &#34;GEO&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the network list; must be either &#34;IP&#34; or &#34;GEO&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param uniqueid unique ID
         * 
         * @return builder
         * 
         */
        public Builder uniqueid(@Nullable Output<String> uniqueid) {
            $.uniqueid = uniqueid;
            return this;
        }

        /**
         * @param uniqueid unique ID
         * 
         * @return builder
         * 
         */
        public Builder uniqueid(String uniqueid) {
            return uniqueid(Output.of(uniqueid));
        }

        public NetworkListState build() {
            return $;
        }
    }

}
