// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanAppendArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanAspectCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanBackgroundColorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanBlurArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanChromaKeyArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCompositeArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCompoundArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanContrastArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFaceCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFeatureCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFitAndFillArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanGoopArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanGrayscaleArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanHslArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanHsvArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfDimensionArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfOrientationArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanImQueryArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMaxColorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMirrorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMonoHueArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanOpacityArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRegionOfInterestCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRelativeCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRemoveColorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanResizeArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRotateArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanScaleArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanShearsArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanTrimArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanUnsharpMaskArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanArgs Empty = new GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanArgs();

    @Import(name="appends")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanAppendArgs>> appends;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanAppendArgs>>> appends() {
        return Optional.ofNullable(this.appends);
    }

    @Import(name="aspectCrops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanAspectCropArgs>> aspectCrops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanAspectCropArgs>>> aspectCrops() {
        return Optional.ofNullable(this.aspectCrops);
    }

    @Import(name="backgroundColors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanBackgroundColorArgs>> backgroundColors;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanBackgroundColorArgs>>> backgroundColors() {
        return Optional.ofNullable(this.backgroundColors);
    }

    @Import(name="blurs")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanBlurArgs>> blurs;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanBlurArgs>>> blurs() {
        return Optional.ofNullable(this.blurs);
    }

    @Import(name="chromaKeys")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanChromaKeyArgs>> chromaKeys;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanChromaKeyArgs>>> chromaKeys() {
        return Optional.ofNullable(this.chromaKeys);
    }

    @Import(name="composites")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCompositeArgs>> composites;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCompositeArgs>>> composites() {
        return Optional.ofNullable(this.composites);
    }

    @Import(name="compounds")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCompoundArgs>> compounds;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCompoundArgs>>> compounds() {
        return Optional.ofNullable(this.compounds);
    }

    @Import(name="contrasts")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanContrastArgs>> contrasts;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanContrastArgs>>> contrasts() {
        return Optional.ofNullable(this.contrasts);
    }

    @Import(name="crops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCropArgs>> crops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCropArgs>>> crops() {
        return Optional.ofNullable(this.crops);
    }

    @Import(name="faceCrops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFaceCropArgs>> faceCrops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFaceCropArgs>>> faceCrops() {
        return Optional.ofNullable(this.faceCrops);
    }

    @Import(name="featureCrops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFeatureCropArgs>> featureCrops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFeatureCropArgs>>> featureCrops() {
        return Optional.ofNullable(this.featureCrops);
    }

    @Import(name="fitAndFills")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFitAndFillArgs>> fitAndFills;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFitAndFillArgs>>> fitAndFills() {
        return Optional.ofNullable(this.fitAndFills);
    }

    @Import(name="goops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanGoopArgs>> goops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanGoopArgs>>> goops() {
        return Optional.ofNullable(this.goops);
    }

    @Import(name="grayscales")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanGrayscaleArgs>> grayscales;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanGrayscaleArgs>>> grayscales() {
        return Optional.ofNullable(this.grayscales);
    }

    @Import(name="hsls")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanHslArgs>> hsls;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanHslArgs>>> hsls() {
        return Optional.ofNullable(this.hsls);
    }

    @Import(name="hsvs")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanHsvArgs>> hsvs;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanHsvArgs>>> hsvs() {
        return Optional.ofNullable(this.hsvs);
    }

    @Import(name="ifDimensions")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfDimensionArgs>> ifDimensions;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfDimensionArgs>>> ifDimensions() {
        return Optional.ofNullable(this.ifDimensions);
    }

    @Import(name="ifOrientations")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfOrientationArgs>> ifOrientations;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfOrientationArgs>>> ifOrientations() {
        return Optional.ofNullable(this.ifOrientations);
    }

    @Import(name="imQueries")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanImQueryArgs>> imQueries;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanImQueryArgs>>> imQueries() {
        return Optional.ofNullable(this.imQueries);
    }

    @Import(name="maxColors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMaxColorArgs>> maxColors;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMaxColorArgs>>> maxColors() {
        return Optional.ofNullable(this.maxColors);
    }

    @Import(name="mirrors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMirrorArgs>> mirrors;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMirrorArgs>>> mirrors() {
        return Optional.ofNullable(this.mirrors);
    }

    @Import(name="monoHues")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMonoHueArgs>> monoHues;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMonoHueArgs>>> monoHues() {
        return Optional.ofNullable(this.monoHues);
    }

    @Import(name="opacities")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanOpacityArgs>> opacities;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanOpacityArgs>>> opacities() {
        return Optional.ofNullable(this.opacities);
    }

    @Import(name="regionOfInterestCrops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRegionOfInterestCropArgs>> regionOfInterestCrops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRegionOfInterestCropArgs>>> regionOfInterestCrops() {
        return Optional.ofNullable(this.regionOfInterestCrops);
    }

    @Import(name="relativeCrops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRelativeCropArgs>> relativeCrops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRelativeCropArgs>>> relativeCrops() {
        return Optional.ofNullable(this.relativeCrops);
    }

    @Import(name="removeColors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRemoveColorArgs>> removeColors;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRemoveColorArgs>>> removeColors() {
        return Optional.ofNullable(this.removeColors);
    }

    @Import(name="resizes")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanResizeArgs>> resizes;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanResizeArgs>>> resizes() {
        return Optional.ofNullable(this.resizes);
    }

    @Import(name="rotates")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRotateArgs>> rotates;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRotateArgs>>> rotates() {
        return Optional.ofNullable(this.rotates);
    }

    @Import(name="scales")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanScaleArgs>> scales;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanScaleArgs>>> scales() {
        return Optional.ofNullable(this.scales);
    }

    @Import(name="shears")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanShearsArgs>> shears;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanShearsArgs>>> shears() {
        return Optional.ofNullable(this.shears);
    }

    @Import(name="trims")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanTrimArgs>> trims;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanTrimArgs>>> trims() {
        return Optional.ofNullable(this.trims);
    }

    @Import(name="unsharpMasks")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanUnsharpMaskArgs>> unsharpMasks;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanUnsharpMaskArgs>>> unsharpMasks() {
        return Optional.ofNullable(this.unsharpMasks);
    }

    private GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanArgs() {}

    private GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanArgs(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanArgs $) {
        this.appends = $.appends;
        this.aspectCrops = $.aspectCrops;
        this.backgroundColors = $.backgroundColors;
        this.blurs = $.blurs;
        this.chromaKeys = $.chromaKeys;
        this.composites = $.composites;
        this.compounds = $.compounds;
        this.contrasts = $.contrasts;
        this.crops = $.crops;
        this.faceCrops = $.faceCrops;
        this.featureCrops = $.featureCrops;
        this.fitAndFills = $.fitAndFills;
        this.goops = $.goops;
        this.grayscales = $.grayscales;
        this.hsls = $.hsls;
        this.hsvs = $.hsvs;
        this.ifDimensions = $.ifDimensions;
        this.ifOrientations = $.ifOrientations;
        this.imQueries = $.imQueries;
        this.maxColors = $.maxColors;
        this.mirrors = $.mirrors;
        this.monoHues = $.monoHues;
        this.opacities = $.opacities;
        this.regionOfInterestCrops = $.regionOfInterestCrops;
        this.relativeCrops = $.relativeCrops;
        this.removeColors = $.removeColors;
        this.resizes = $.resizes;
        this.rotates = $.rotates;
        this.scales = $.scales;
        this.shears = $.shears;
        this.trims = $.trims;
        this.unsharpMasks = $.unsharpMasks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanArgs();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanArgs defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanArgs(Objects.requireNonNull(defaults));
        }

        public Builder appends(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanAppendArgs>> appends) {
            $.appends = appends;
            return this;
        }

        public Builder appends(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanAppendArgs> appends) {
            return appends(Output.of(appends));
        }

        public Builder appends(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanAppendArgs... appends) {
            return appends(List.of(appends));
        }

        public Builder aspectCrops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanAspectCropArgs>> aspectCrops) {
            $.aspectCrops = aspectCrops;
            return this;
        }

        public Builder aspectCrops(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanAspectCropArgs> aspectCrops) {
            return aspectCrops(Output.of(aspectCrops));
        }

        public Builder aspectCrops(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanAspectCropArgs... aspectCrops) {
            return aspectCrops(List.of(aspectCrops));
        }

        public Builder backgroundColors(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanBackgroundColorArgs>> backgroundColors) {
            $.backgroundColors = backgroundColors;
            return this;
        }

        public Builder backgroundColors(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanBackgroundColorArgs> backgroundColors) {
            return backgroundColors(Output.of(backgroundColors));
        }

        public Builder backgroundColors(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanBackgroundColorArgs... backgroundColors) {
            return backgroundColors(List.of(backgroundColors));
        }

        public Builder blurs(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanBlurArgs>> blurs) {
            $.blurs = blurs;
            return this;
        }

        public Builder blurs(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanBlurArgs> blurs) {
            return blurs(Output.of(blurs));
        }

        public Builder blurs(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanBlurArgs... blurs) {
            return blurs(List.of(blurs));
        }

        public Builder chromaKeys(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanChromaKeyArgs>> chromaKeys) {
            $.chromaKeys = chromaKeys;
            return this;
        }

        public Builder chromaKeys(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanChromaKeyArgs> chromaKeys) {
            return chromaKeys(Output.of(chromaKeys));
        }

        public Builder chromaKeys(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanChromaKeyArgs... chromaKeys) {
            return chromaKeys(List.of(chromaKeys));
        }

        public Builder composites(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCompositeArgs>> composites) {
            $.composites = composites;
            return this;
        }

        public Builder composites(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCompositeArgs> composites) {
            return composites(Output.of(composites));
        }

        public Builder composites(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCompositeArgs... composites) {
            return composites(List.of(composites));
        }

        public Builder compounds(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCompoundArgs>> compounds) {
            $.compounds = compounds;
            return this;
        }

        public Builder compounds(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCompoundArgs> compounds) {
            return compounds(Output.of(compounds));
        }

        public Builder compounds(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCompoundArgs... compounds) {
            return compounds(List.of(compounds));
        }

        public Builder contrasts(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanContrastArgs>> contrasts) {
            $.contrasts = contrasts;
            return this;
        }

        public Builder contrasts(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanContrastArgs> contrasts) {
            return contrasts(Output.of(contrasts));
        }

        public Builder contrasts(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanContrastArgs... contrasts) {
            return contrasts(List.of(contrasts));
        }

        public Builder crops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCropArgs>> crops) {
            $.crops = crops;
            return this;
        }

        public Builder crops(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCropArgs> crops) {
            return crops(Output.of(crops));
        }

        public Builder crops(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCropArgs... crops) {
            return crops(List.of(crops));
        }

        public Builder faceCrops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFaceCropArgs>> faceCrops) {
            $.faceCrops = faceCrops;
            return this;
        }

        public Builder faceCrops(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFaceCropArgs> faceCrops) {
            return faceCrops(Output.of(faceCrops));
        }

        public Builder faceCrops(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFaceCropArgs... faceCrops) {
            return faceCrops(List.of(faceCrops));
        }

        public Builder featureCrops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFeatureCropArgs>> featureCrops) {
            $.featureCrops = featureCrops;
            return this;
        }

        public Builder featureCrops(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFeatureCropArgs> featureCrops) {
            return featureCrops(Output.of(featureCrops));
        }

        public Builder featureCrops(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFeatureCropArgs... featureCrops) {
            return featureCrops(List.of(featureCrops));
        }

        public Builder fitAndFills(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFitAndFillArgs>> fitAndFills) {
            $.fitAndFills = fitAndFills;
            return this;
        }

        public Builder fitAndFills(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFitAndFillArgs> fitAndFills) {
            return fitAndFills(Output.of(fitAndFills));
        }

        public Builder fitAndFills(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFitAndFillArgs... fitAndFills) {
            return fitAndFills(List.of(fitAndFills));
        }

        public Builder goops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanGoopArgs>> goops) {
            $.goops = goops;
            return this;
        }

        public Builder goops(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanGoopArgs> goops) {
            return goops(Output.of(goops));
        }

        public Builder goops(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanGoopArgs... goops) {
            return goops(List.of(goops));
        }

        public Builder grayscales(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanGrayscaleArgs>> grayscales) {
            $.grayscales = grayscales;
            return this;
        }

        public Builder grayscales(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanGrayscaleArgs> grayscales) {
            return grayscales(Output.of(grayscales));
        }

        public Builder grayscales(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanGrayscaleArgs... grayscales) {
            return grayscales(List.of(grayscales));
        }

        public Builder hsls(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanHslArgs>> hsls) {
            $.hsls = hsls;
            return this;
        }

        public Builder hsls(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanHslArgs> hsls) {
            return hsls(Output.of(hsls));
        }

        public Builder hsls(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanHslArgs... hsls) {
            return hsls(List.of(hsls));
        }

        public Builder hsvs(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanHsvArgs>> hsvs) {
            $.hsvs = hsvs;
            return this;
        }

        public Builder hsvs(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanHsvArgs> hsvs) {
            return hsvs(Output.of(hsvs));
        }

        public Builder hsvs(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanHsvArgs... hsvs) {
            return hsvs(List.of(hsvs));
        }

        public Builder ifDimensions(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfDimensionArgs>> ifDimensions) {
            $.ifDimensions = ifDimensions;
            return this;
        }

        public Builder ifDimensions(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfDimensionArgs> ifDimensions) {
            return ifDimensions(Output.of(ifDimensions));
        }

        public Builder ifDimensions(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfDimensionArgs... ifDimensions) {
            return ifDimensions(List.of(ifDimensions));
        }

        public Builder ifOrientations(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfOrientationArgs>> ifOrientations) {
            $.ifOrientations = ifOrientations;
            return this;
        }

        public Builder ifOrientations(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfOrientationArgs> ifOrientations) {
            return ifOrientations(Output.of(ifOrientations));
        }

        public Builder ifOrientations(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfOrientationArgs... ifOrientations) {
            return ifOrientations(List.of(ifOrientations));
        }

        public Builder imQueries(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanImQueryArgs>> imQueries) {
            $.imQueries = imQueries;
            return this;
        }

        public Builder imQueries(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanImQueryArgs> imQueries) {
            return imQueries(Output.of(imQueries));
        }

        public Builder imQueries(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanImQueryArgs... imQueries) {
            return imQueries(List.of(imQueries));
        }

        public Builder maxColors(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMaxColorArgs>> maxColors) {
            $.maxColors = maxColors;
            return this;
        }

        public Builder maxColors(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMaxColorArgs> maxColors) {
            return maxColors(Output.of(maxColors));
        }

        public Builder maxColors(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMaxColorArgs... maxColors) {
            return maxColors(List.of(maxColors));
        }

        public Builder mirrors(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMirrorArgs>> mirrors) {
            $.mirrors = mirrors;
            return this;
        }

        public Builder mirrors(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMirrorArgs> mirrors) {
            return mirrors(Output.of(mirrors));
        }

        public Builder mirrors(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMirrorArgs... mirrors) {
            return mirrors(List.of(mirrors));
        }

        public Builder monoHues(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMonoHueArgs>> monoHues) {
            $.monoHues = monoHues;
            return this;
        }

        public Builder monoHues(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMonoHueArgs> monoHues) {
            return monoHues(Output.of(monoHues));
        }

        public Builder monoHues(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMonoHueArgs... monoHues) {
            return monoHues(List.of(monoHues));
        }

        public Builder opacities(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanOpacityArgs>> opacities) {
            $.opacities = opacities;
            return this;
        }

        public Builder opacities(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanOpacityArgs> opacities) {
            return opacities(Output.of(opacities));
        }

        public Builder opacities(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanOpacityArgs... opacities) {
            return opacities(List.of(opacities));
        }

        public Builder regionOfInterestCrops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRegionOfInterestCropArgs>> regionOfInterestCrops) {
            $.regionOfInterestCrops = regionOfInterestCrops;
            return this;
        }

        public Builder regionOfInterestCrops(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRegionOfInterestCropArgs> regionOfInterestCrops) {
            return regionOfInterestCrops(Output.of(regionOfInterestCrops));
        }

        public Builder regionOfInterestCrops(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRegionOfInterestCropArgs... regionOfInterestCrops) {
            return regionOfInterestCrops(List.of(regionOfInterestCrops));
        }

        public Builder relativeCrops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRelativeCropArgs>> relativeCrops) {
            $.relativeCrops = relativeCrops;
            return this;
        }

        public Builder relativeCrops(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRelativeCropArgs> relativeCrops) {
            return relativeCrops(Output.of(relativeCrops));
        }

        public Builder relativeCrops(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRelativeCropArgs... relativeCrops) {
            return relativeCrops(List.of(relativeCrops));
        }

        public Builder removeColors(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRemoveColorArgs>> removeColors) {
            $.removeColors = removeColors;
            return this;
        }

        public Builder removeColors(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRemoveColorArgs> removeColors) {
            return removeColors(Output.of(removeColors));
        }

        public Builder removeColors(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRemoveColorArgs... removeColors) {
            return removeColors(List.of(removeColors));
        }

        public Builder resizes(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanResizeArgs>> resizes) {
            $.resizes = resizes;
            return this;
        }

        public Builder resizes(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanResizeArgs> resizes) {
            return resizes(Output.of(resizes));
        }

        public Builder resizes(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanResizeArgs... resizes) {
            return resizes(List.of(resizes));
        }

        public Builder rotates(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRotateArgs>> rotates) {
            $.rotates = rotates;
            return this;
        }

        public Builder rotates(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRotateArgs> rotates) {
            return rotates(Output.of(rotates));
        }

        public Builder rotates(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRotateArgs... rotates) {
            return rotates(List.of(rotates));
        }

        public Builder scales(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanScaleArgs>> scales) {
            $.scales = scales;
            return this;
        }

        public Builder scales(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanScaleArgs> scales) {
            return scales(Output.of(scales));
        }

        public Builder scales(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanScaleArgs... scales) {
            return scales(List.of(scales));
        }

        public Builder shears(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanShearsArgs>> shears) {
            $.shears = shears;
            return this;
        }

        public Builder shears(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanShearsArgs> shears) {
            return shears(Output.of(shears));
        }

        public Builder shears(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanShearsArgs... shears) {
            return shears(List.of(shears));
        }

        public Builder trims(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanTrimArgs>> trims) {
            $.trims = trims;
            return this;
        }

        public Builder trims(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanTrimArgs> trims) {
            return trims(Output.of(trims));
        }

        public Builder trims(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanTrimArgs... trims) {
            return trims(List.of(trims));
        }

        public Builder unsharpMasks(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanUnsharpMaskArgs>> unsharpMasks) {
            $.unsharpMasks = unsharpMasks;
            return this;
        }

        public Builder unsharpMasks(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanUnsharpMaskArgs> unsharpMasks) {
            return unsharpMasks(Output.of(unsharpMasks));
        }

        public Builder unsharpMasks(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanUnsharpMaskArgs... unsharpMasks) {
            return unsharpMasks(List.of(unsharpMasks));
        }

        public GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanArgs build() {
            return $;
        }
    }

}
