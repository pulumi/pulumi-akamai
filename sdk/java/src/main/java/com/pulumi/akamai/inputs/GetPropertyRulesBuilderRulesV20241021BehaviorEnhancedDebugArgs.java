// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyRulesBuilderRulesV20241021BehaviorEnhancedDebugArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetPropertyRulesBuilderRulesV20241021BehaviorEnhancedDebugArgs Empty = new GetPropertyRulesBuilderRulesV20241021BehaviorEnhancedDebugArgs();

    /**
     * Specifies the debug key to use for all requests processed by this property. The debug key value needs to be a 64-byte hex string. You can generate the key in one property and then reuse it in other configurations.
     * 
     */
    @Import(name="debugKey")
    private @Nullable Output<String> debugKey;

    /**
     * @return Specifies the debug key to use for all requests processed by this property. The debug key value needs to be a 64-byte hex string. You can generate the key in one property and then reuse it in other configurations.
     * 
     */
    public Optional<Output<String>> debugKey() {
        return Optional.ofNullable(this.debugKey);
    }

    /**
     * Whether you want to disable the standard debugging that uses the `Pragma` request header.
     * 
     */
    @Import(name="disablePragma")
    private @Nullable Output<Boolean> disablePragma;

    /**
     * @return Whether you want to disable the standard debugging that uses the `Pragma` request header.
     * 
     */
    public Optional<Output<Boolean>> disablePragma() {
        return Optional.ofNullable(this.disablePragma);
    }

    /**
     * Enables enhanced debugging using the `Akamai-Debug` request header.
     * 
     */
    @Import(name="enableDebug")
    private @Nullable Output<Boolean> enableDebug;

    /**
     * @return Enables enhanced debugging using the `Akamai-Debug` request header.
     * 
     */
    public Optional<Output<Boolean>> enableDebug() {
        return Optional.ofNullable(this.enableDebug);
    }

    /**
     * Whether you want to return the Global Request Number (GRN) in the `Akamai-GRN` response header for all requests, even if the `Akamai-Debug` request header is not passed. The `Akamai-GRN` header is useful for log extraction.
     * 
     */
    @Import(name="generateGrn")
    private @Nullable Output<Boolean> generateGrn;

    /**
     * @return Whether you want to return the Global Request Number (GRN) in the `Akamai-GRN` response header for all requests, even if the `Akamai-Debug` request header is not passed. The `Akamai-GRN` header is useful for log extraction.
     * 
     */
    public Optional<Output<Boolean>> generateGrn() {
        return Optional.ofNullable(this.generateGrn);
    }

    /**
     * Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    @Import(name="locked")
    private @Nullable Output<Boolean> locked;

    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Output<Boolean>> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * This option is for internal usage only.
     * 
     */
    @Import(name="templateUuid")
    private @Nullable Output<String> templateUuid;

    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<Output<String>> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }

    /**
     * A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private GetPropertyRulesBuilderRulesV20241021BehaviorEnhancedDebugArgs() {}

    private GetPropertyRulesBuilderRulesV20241021BehaviorEnhancedDebugArgs(GetPropertyRulesBuilderRulesV20241021BehaviorEnhancedDebugArgs $) {
        this.debugKey = $.debugKey;
        this.disablePragma = $.disablePragma;
        this.enableDebug = $.enableDebug;
        this.generateGrn = $.generateGrn;
        this.locked = $.locked;
        this.templateUuid = $.templateUuid;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesBuilderRulesV20241021BehaviorEnhancedDebugArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesBuilderRulesV20241021BehaviorEnhancedDebugArgs $;

        public Builder() {
            $ = new GetPropertyRulesBuilderRulesV20241021BehaviorEnhancedDebugArgs();
        }

        public Builder(GetPropertyRulesBuilderRulesV20241021BehaviorEnhancedDebugArgs defaults) {
            $ = new GetPropertyRulesBuilderRulesV20241021BehaviorEnhancedDebugArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param debugKey Specifies the debug key to use for all requests processed by this property. The debug key value needs to be a 64-byte hex string. You can generate the key in one property and then reuse it in other configurations.
         * 
         * @return builder
         * 
         */
        public Builder debugKey(@Nullable Output<String> debugKey) {
            $.debugKey = debugKey;
            return this;
        }

        /**
         * @param debugKey Specifies the debug key to use for all requests processed by this property. The debug key value needs to be a 64-byte hex string. You can generate the key in one property and then reuse it in other configurations.
         * 
         * @return builder
         * 
         */
        public Builder debugKey(String debugKey) {
            return debugKey(Output.of(debugKey));
        }

        /**
         * @param disablePragma Whether you want to disable the standard debugging that uses the `Pragma` request header.
         * 
         * @return builder
         * 
         */
        public Builder disablePragma(@Nullable Output<Boolean> disablePragma) {
            $.disablePragma = disablePragma;
            return this;
        }

        /**
         * @param disablePragma Whether you want to disable the standard debugging that uses the `Pragma` request header.
         * 
         * @return builder
         * 
         */
        public Builder disablePragma(Boolean disablePragma) {
            return disablePragma(Output.of(disablePragma));
        }

        /**
         * @param enableDebug Enables enhanced debugging using the `Akamai-Debug` request header.
         * 
         * @return builder
         * 
         */
        public Builder enableDebug(@Nullable Output<Boolean> enableDebug) {
            $.enableDebug = enableDebug;
            return this;
        }

        /**
         * @param enableDebug Enables enhanced debugging using the `Akamai-Debug` request header.
         * 
         * @return builder
         * 
         */
        public Builder enableDebug(Boolean enableDebug) {
            return enableDebug(Output.of(enableDebug));
        }

        /**
         * @param generateGrn Whether you want to return the Global Request Number (GRN) in the `Akamai-GRN` response header for all requests, even if the `Akamai-Debug` request header is not passed. The `Akamai-GRN` header is useful for log extraction.
         * 
         * @return builder
         * 
         */
        public Builder generateGrn(@Nullable Output<Boolean> generateGrn) {
            $.generateGrn = generateGrn;
            return this;
        }

        /**
         * @param generateGrn Whether you want to return the Global Request Number (GRN) in the `Akamai-GRN` response header for all requests, even if the `Akamai-Debug` request header is not passed. The `Akamai-GRN` header is useful for log extraction.
         * 
         * @return builder
         * 
         */
        public Builder generateGrn(Boolean generateGrn) {
            return generateGrn(Output.of(generateGrn));
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(@Nullable Output<Boolean> locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(Boolean locked) {
            return locked(Output.of(locked));
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(@Nullable Output<String> templateUuid) {
            $.templateUuid = templateUuid;
            return this;
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(String templateUuid) {
            return templateUuid(Output.of(templateUuid));
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public GetPropertyRulesBuilderRulesV20241021BehaviorEnhancedDebugArgs build() {
            return $;
        }
    }

}
