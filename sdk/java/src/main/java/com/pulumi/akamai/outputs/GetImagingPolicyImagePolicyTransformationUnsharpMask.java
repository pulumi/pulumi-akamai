// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetImagingPolicyImagePolicyTransformationUnsharpMask {
    /**
     * @return Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
     * 
     */
    private @Nullable String gain;
    /**
     * @return Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
     * 
     */
    private @Nullable String gainVar;
    /**
     * @return The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
     * 
     */
    private @Nullable String sigma;
    /**
     * @return The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
     * 
     */
    private @Nullable String sigmaVar;
    /**
     * @return Set the minimum change required to include a detail in the filter. Higher values discard more changes.
     * 
     */
    private @Nullable String threshold;
    /**
     * @return Set the minimum change required to include a detail in the filter. Higher values discard more changes.
     * 
     */
    private @Nullable String thresholdVar;

    private GetImagingPolicyImagePolicyTransformationUnsharpMask() {}
    /**
     * @return Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
     * 
     */
    public Optional<String> gain() {
        return Optional.ofNullable(this.gain);
    }
    /**
     * @return Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
     * 
     */
    public Optional<String> gainVar() {
        return Optional.ofNullable(this.gainVar);
    }
    /**
     * @return The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
     * 
     */
    public Optional<String> sigma() {
        return Optional.ofNullable(this.sigma);
    }
    /**
     * @return The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
     * 
     */
    public Optional<String> sigmaVar() {
        return Optional.ofNullable(this.sigmaVar);
    }
    /**
     * @return Set the minimum change required to include a detail in the filter. Higher values discard more changes.
     * 
     */
    public Optional<String> threshold() {
        return Optional.ofNullable(this.threshold);
    }
    /**
     * @return Set the minimum change required to include a detail in the filter. Higher values discard more changes.
     * 
     */
    public Optional<String> thresholdVar() {
        return Optional.ofNullable(this.thresholdVar);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImagingPolicyImagePolicyTransformationUnsharpMask defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String gain;
        private @Nullable String gainVar;
        private @Nullable String sigma;
        private @Nullable String sigmaVar;
        private @Nullable String threshold;
        private @Nullable String thresholdVar;
        public Builder() {}
        public Builder(GetImagingPolicyImagePolicyTransformationUnsharpMask defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.gain = defaults.gain;
    	      this.gainVar = defaults.gainVar;
    	      this.sigma = defaults.sigma;
    	      this.sigmaVar = defaults.sigmaVar;
    	      this.threshold = defaults.threshold;
    	      this.thresholdVar = defaults.thresholdVar;
        }

        @CustomType.Setter
        public Builder gain(@Nullable String gain) {

            this.gain = gain;
            return this;
        }
        @CustomType.Setter
        public Builder gainVar(@Nullable String gainVar) {

            this.gainVar = gainVar;
            return this;
        }
        @CustomType.Setter
        public Builder sigma(@Nullable String sigma) {

            this.sigma = sigma;
            return this;
        }
        @CustomType.Setter
        public Builder sigmaVar(@Nullable String sigmaVar) {

            this.sigmaVar = sigmaVar;
            return this;
        }
        @CustomType.Setter
        public Builder threshold(@Nullable String threshold) {

            this.threshold = threshold;
            return this;
        }
        @CustomType.Setter
        public Builder thresholdVar(@Nullable String thresholdVar) {

            this.thresholdVar = thresholdVar;
            return this;
        }
        public GetImagingPolicyImagePolicyTransformationUnsharpMask build() {
            final var _resultValue = new GetImagingPolicyImagePolicyTransformationUnsharpMask();
            _resultValue.gain = gain;
            _resultValue.gainVar = gainVar;
            _resultValue.sigma = sigma;
            _resultValue.sigmaVar = sigmaVar;
            _resultValue.threshold = threshold;
            _resultValue.thresholdVar = thresholdVar;
            return _resultValue;
        }
    }
}
