// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.IamApiClientApiAccessApiArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IamApiClientApiAccessArgs extends com.pulumi.resources.ResourceArgs {

    public static final IamApiClientApiAccessArgs Empty = new IamApiClientApiAccessArgs();

    /**
     * Enables the API client to access a full set of available APIs.
     * 
     */
    @Import(name="allAccessibleApis", required=true)
    private Output<Boolean> allAccessibleApis;

    /**
     * @return Enables the API client to access a full set of available APIs.
     * 
     */
    public Output<Boolean> allAccessibleApis() {
        return this.allAccessibleApis;
    }

    /**
     * The set of APIs the API client can access when `allAccessibleApis` is `false`.
     * 
     */
    @Import(name="apis")
    private @Nullable Output<List<IamApiClientApiAccessApiArgs>> apis;

    /**
     * @return The set of APIs the API client can access when `allAccessibleApis` is `false`.
     * 
     */
    public Optional<Output<List<IamApiClientApiAccessApiArgs>>> apis() {
        return Optional.ofNullable(this.apis);
    }

    private IamApiClientApiAccessArgs() {}

    private IamApiClientApiAccessArgs(IamApiClientApiAccessArgs $) {
        this.allAccessibleApis = $.allAccessibleApis;
        this.apis = $.apis;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IamApiClientApiAccessArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IamApiClientApiAccessArgs $;

        public Builder() {
            $ = new IamApiClientApiAccessArgs();
        }

        public Builder(IamApiClientApiAccessArgs defaults) {
            $ = new IamApiClientApiAccessArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allAccessibleApis Enables the API client to access a full set of available APIs.
         * 
         * @return builder
         * 
         */
        public Builder allAccessibleApis(Output<Boolean> allAccessibleApis) {
            $.allAccessibleApis = allAccessibleApis;
            return this;
        }

        /**
         * @param allAccessibleApis Enables the API client to access a full set of available APIs.
         * 
         * @return builder
         * 
         */
        public Builder allAccessibleApis(Boolean allAccessibleApis) {
            return allAccessibleApis(Output.of(allAccessibleApis));
        }

        /**
         * @param apis The set of APIs the API client can access when `allAccessibleApis` is `false`.
         * 
         * @return builder
         * 
         */
        public Builder apis(@Nullable Output<List<IamApiClientApiAccessApiArgs>> apis) {
            $.apis = apis;
            return this;
        }

        /**
         * @param apis The set of APIs the API client can access when `allAccessibleApis` is `false`.
         * 
         * @return builder
         * 
         */
        public Builder apis(List<IamApiClientApiAccessApiArgs> apis) {
            return apis(Output.of(apis));
        }

        /**
         * @param apis The set of APIs the API client can access when `allAccessibleApis` is `false`.
         * 
         * @return builder
         * 
         */
        public Builder apis(IamApiClientApiAccessApiArgs... apis) {
            return apis(List.of(apis));
        }

        public IamApiClientApiAccessArgs build() {
            if ($.allAccessibleApis == null) {
                throw new MissingRequiredPropertyException("IamApiClientApiAccessArgs", "allAccessibleApis");
            }
            return $;
        }
    }

}
