// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PropertyBootstrapState extends com.pulumi.resources.ResourceArgs {

    public static final PropertyBootstrapState Empty = new PropertyBootstrapState();

    /**
     * Contract ID to be assigned to the Property
     * 
     */
    @Import(name="contractId")
    private @Nullable Output<String> contractId;

    /**
     * @return Contract ID to be assigned to the Property
     * 
     */
    public Optional<Output<String>> contractId() {
        return Optional.ofNullable(this.contractId);
    }

    /**
     * Group ID to be assigned to the Property
     * 
     */
    @Import(name="groupId")
    private @Nullable Output<String> groupId;

    /**
     * @return Group ID to be assigned to the Property
     * 
     */
    public Optional<Output<String>> groupId() {
        return Optional.ofNullable(this.groupId);
    }

    /**
     * Name to give to the Property (must be unique)
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name to give to the Property (must be unique)
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Product ID to be assigned to the Property
     * 
     */
    @Import(name="productId")
    private @Nullable Output<String> productId;

    /**
     * @return Product ID to be assigned to the Property
     * 
     */
    public Optional<Output<String>> productId() {
        return Optional.ofNullable(this.productId);
    }

    private PropertyBootstrapState() {}

    private PropertyBootstrapState(PropertyBootstrapState $) {
        this.contractId = $.contractId;
        this.groupId = $.groupId;
        this.name = $.name;
        this.productId = $.productId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PropertyBootstrapState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PropertyBootstrapState $;

        public Builder() {
            $ = new PropertyBootstrapState();
        }

        public Builder(PropertyBootstrapState defaults) {
            $ = new PropertyBootstrapState(Objects.requireNonNull(defaults));
        }

        /**
         * @param contractId Contract ID to be assigned to the Property
         * 
         * @return builder
         * 
         */
        public Builder contractId(@Nullable Output<String> contractId) {
            $.contractId = contractId;
            return this;
        }

        /**
         * @param contractId Contract ID to be assigned to the Property
         * 
         * @return builder
         * 
         */
        public Builder contractId(String contractId) {
            return contractId(Output.of(contractId));
        }

        /**
         * @param groupId Group ID to be assigned to the Property
         * 
         * @return builder
         * 
         */
        public Builder groupId(@Nullable Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId Group ID to be assigned to the Property
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param name Name to give to the Property (must be unique)
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name to give to the Property (must be unique)
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param productId Product ID to be assigned to the Property
         * 
         * @return builder
         * 
         */
        public Builder productId(@Nullable Output<String> productId) {
            $.productId = productId;
            return this;
        }

        /**
         * @param productId Product ID to be assigned to the Property
         * 
         * @return builder
         * 
         */
        public Builder productId(String productId) {
            return productId(Output.of(productId));
        }

        public PropertyBootstrapState build() {
            return $;
        }
    }

}
