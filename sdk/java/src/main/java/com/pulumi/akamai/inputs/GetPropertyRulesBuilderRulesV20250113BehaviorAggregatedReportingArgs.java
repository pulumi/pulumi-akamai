// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyRulesBuilderRulesV20250113BehaviorAggregatedReportingArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetPropertyRulesBuilderRulesV20250113BehaviorAggregatedReportingArgs Empty = new GetPropertyRulesBuilderRulesV20250113BehaviorAggregatedReportingArgs();

    /**
     * Specify a previously user-defined variable name as a report attribute. The values extracted for all attributes range from 0 to 20 characters.
     * 
     */
    @Import(name="attribute1")
    private @Nullable Output<String> attribute1;

    /**
     * @return Specify a previously user-defined variable name as a report attribute. The values extracted for all attributes range from 0 to 20 characters.
     * 
     */
    public Optional<Output<String>> attribute1() {
        return Optional.ofNullable(this.attribute1);
    }

    /**
     * Specify a previously user-defined variable name as a report attribute. The values extracted for all attributes range from 0 to 20 characters.
     * 
     */
    @Import(name="attribute2")
    private @Nullable Output<String> attribute2;

    /**
     * @return Specify a previously user-defined variable name as a report attribute. The values extracted for all attributes range from 0 to 20 characters.
     * 
     */
    public Optional<Output<String>> attribute2() {
        return Optional.ofNullable(this.attribute2);
    }

    /**
     * Specify a previously user-defined variable name as a report attribute. The values extracted for all attributes range from 0 to 20 characters.
     * 
     */
    @Import(name="attribute3")
    private @Nullable Output<String> attribute3;

    /**
     * @return Specify a previously user-defined variable name as a report attribute. The values extracted for all attributes range from 0 to 20 characters.
     * 
     */
    public Optional<Output<String>> attribute3() {
        return Optional.ofNullable(this.attribute3);
    }

    /**
     * Specify a previously user-defined variable name as a report attribute. The values extracted for all attributes range from 0 to 20 characters.
     * 
     */
    @Import(name="attribute4")
    private @Nullable Output<String> attribute4;

    /**
     * @return Specify a previously user-defined variable name as a report attribute. The values extracted for all attributes range from 0 to 20 characters.
     * 
     */
    public Optional<Output<String>> attribute4() {
        return Optional.ofNullable(this.attribute4);
    }

    /**
     * The number of attributes to include in the report, ranging from 1 to 4.
     * 
     */
    @Import(name="attributesCount")
    private @Nullable Output<Integer> attributesCount;

    /**
     * @return The number of attributes to include in the report, ranging from 1 to 4.
     * 
     */
    public Optional<Output<Integer>> attributesCount() {
        return Optional.ofNullable(this.attributesCount);
    }

    /**
     * Enables aggregated reporting.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Enables aggregated reporting.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    @Import(name="locked")
    private @Nullable Output<Boolean> locked;

    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Output<Boolean>> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * The unique name of the aggregated report within the property. If you reconfigure any attributes or variables in the aggregated reporting behavior, update this field to a unique value to enable logging data in a new instance of the report.
     * 
     */
    @Import(name="reportName")
    private @Nullable Output<String> reportName;

    /**
     * @return The unique name of the aggregated report within the property. If you reconfigure any attributes or variables in the aggregated reporting behavior, update this field to a unique value to enable logging data in a new instance of the report.
     * 
     */
    public Optional<Output<String>> reportName() {
        return Optional.ofNullable(this.reportName);
    }

    /**
     * This option is for internal usage only.
     * 
     */
    @Import(name="templateUuid")
    private @Nullable Output<String> templateUuid;

    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<Output<String>> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }

    /**
     * A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private GetPropertyRulesBuilderRulesV20250113BehaviorAggregatedReportingArgs() {}

    private GetPropertyRulesBuilderRulesV20250113BehaviorAggregatedReportingArgs(GetPropertyRulesBuilderRulesV20250113BehaviorAggregatedReportingArgs $) {
        this.attribute1 = $.attribute1;
        this.attribute2 = $.attribute2;
        this.attribute3 = $.attribute3;
        this.attribute4 = $.attribute4;
        this.attributesCount = $.attributesCount;
        this.enabled = $.enabled;
        this.locked = $.locked;
        this.reportName = $.reportName;
        this.templateUuid = $.templateUuid;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesBuilderRulesV20250113BehaviorAggregatedReportingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesBuilderRulesV20250113BehaviorAggregatedReportingArgs $;

        public Builder() {
            $ = new GetPropertyRulesBuilderRulesV20250113BehaviorAggregatedReportingArgs();
        }

        public Builder(GetPropertyRulesBuilderRulesV20250113BehaviorAggregatedReportingArgs defaults) {
            $ = new GetPropertyRulesBuilderRulesV20250113BehaviorAggregatedReportingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attribute1 Specify a previously user-defined variable name as a report attribute. The values extracted for all attributes range from 0 to 20 characters.
         * 
         * @return builder
         * 
         */
        public Builder attribute1(@Nullable Output<String> attribute1) {
            $.attribute1 = attribute1;
            return this;
        }

        /**
         * @param attribute1 Specify a previously user-defined variable name as a report attribute. The values extracted for all attributes range from 0 to 20 characters.
         * 
         * @return builder
         * 
         */
        public Builder attribute1(String attribute1) {
            return attribute1(Output.of(attribute1));
        }

        /**
         * @param attribute2 Specify a previously user-defined variable name as a report attribute. The values extracted for all attributes range from 0 to 20 characters.
         * 
         * @return builder
         * 
         */
        public Builder attribute2(@Nullable Output<String> attribute2) {
            $.attribute2 = attribute2;
            return this;
        }

        /**
         * @param attribute2 Specify a previously user-defined variable name as a report attribute. The values extracted for all attributes range from 0 to 20 characters.
         * 
         * @return builder
         * 
         */
        public Builder attribute2(String attribute2) {
            return attribute2(Output.of(attribute2));
        }

        /**
         * @param attribute3 Specify a previously user-defined variable name as a report attribute. The values extracted for all attributes range from 0 to 20 characters.
         * 
         * @return builder
         * 
         */
        public Builder attribute3(@Nullable Output<String> attribute3) {
            $.attribute3 = attribute3;
            return this;
        }

        /**
         * @param attribute3 Specify a previously user-defined variable name as a report attribute. The values extracted for all attributes range from 0 to 20 characters.
         * 
         * @return builder
         * 
         */
        public Builder attribute3(String attribute3) {
            return attribute3(Output.of(attribute3));
        }

        /**
         * @param attribute4 Specify a previously user-defined variable name as a report attribute. The values extracted for all attributes range from 0 to 20 characters.
         * 
         * @return builder
         * 
         */
        public Builder attribute4(@Nullable Output<String> attribute4) {
            $.attribute4 = attribute4;
            return this;
        }

        /**
         * @param attribute4 Specify a previously user-defined variable name as a report attribute. The values extracted for all attributes range from 0 to 20 characters.
         * 
         * @return builder
         * 
         */
        public Builder attribute4(String attribute4) {
            return attribute4(Output.of(attribute4));
        }

        /**
         * @param attributesCount The number of attributes to include in the report, ranging from 1 to 4.
         * 
         * @return builder
         * 
         */
        public Builder attributesCount(@Nullable Output<Integer> attributesCount) {
            $.attributesCount = attributesCount;
            return this;
        }

        /**
         * @param attributesCount The number of attributes to include in the report, ranging from 1 to 4.
         * 
         * @return builder
         * 
         */
        public Builder attributesCount(Integer attributesCount) {
            return attributesCount(Output.of(attributesCount));
        }

        /**
         * @param enabled Enables aggregated reporting.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Enables aggregated reporting.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(@Nullable Output<Boolean> locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(Boolean locked) {
            return locked(Output.of(locked));
        }

        /**
         * @param reportName The unique name of the aggregated report within the property. If you reconfigure any attributes or variables in the aggregated reporting behavior, update this field to a unique value to enable logging data in a new instance of the report.
         * 
         * @return builder
         * 
         */
        public Builder reportName(@Nullable Output<String> reportName) {
            $.reportName = reportName;
            return this;
        }

        /**
         * @param reportName The unique name of the aggregated report within the property. If you reconfigure any attributes or variables in the aggregated reporting behavior, update this field to a unique value to enable logging data in a new instance of the report.
         * 
         * @return builder
         * 
         */
        public Builder reportName(String reportName) {
            return reportName(Output.of(reportName));
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(@Nullable Output<String> templateUuid) {
            $.templateUuid = templateUuid;
            return this;
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(String templateUuid) {
            return templateUuid(Output.of(templateUuid));
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public GetPropertyRulesBuilderRulesV20250113BehaviorAggregatedReportingArgs build() {
            return $;
        }
    }

}
