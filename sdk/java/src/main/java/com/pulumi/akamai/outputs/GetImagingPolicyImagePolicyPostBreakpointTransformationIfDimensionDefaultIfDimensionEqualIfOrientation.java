// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientationDefault;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientationLandscape;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientationPortrait;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientationSquare;
import com.pulumi.core.annotations.CustomType;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientation {
    private @Nullable GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientationDefault default_;
    private @Nullable GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientationLandscape landscape;
    private @Nullable GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientationPortrait portrait;
    private @Nullable GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientationSquare square;

    private GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientation() {}
    public Optional<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientationDefault> default_() {
        return Optional.ofNullable(this.default_);
    }
    public Optional<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientationLandscape> landscape() {
        return Optional.ofNullable(this.landscape);
    }
    public Optional<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientationPortrait> portrait() {
        return Optional.ofNullable(this.portrait);
    }
    public Optional<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientationSquare> square() {
        return Optional.ofNullable(this.square);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientation defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientationDefault default_;
        private @Nullable GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientationLandscape landscape;
        private @Nullable GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientationPortrait portrait;
        private @Nullable GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientationSquare square;
        public Builder() {}
        public Builder(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientation defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.default_ = defaults.default_;
    	      this.landscape = defaults.landscape;
    	      this.portrait = defaults.portrait;
    	      this.square = defaults.square;
        }

        @CustomType.Setter("default")
        public Builder default_(@Nullable GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientationDefault default_) {
            this.default_ = default_;
            return this;
        }
        @CustomType.Setter
        public Builder landscape(@Nullable GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientationLandscape landscape) {
            this.landscape = landscape;
            return this;
        }
        @CustomType.Setter
        public Builder portrait(@Nullable GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientationPortrait portrait) {
            this.portrait = portrait;
            return this;
        }
        @CustomType.Setter
        public Builder square(@Nullable GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientationSquare square) {
            this.square = square;
            return this;
        }
        public GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientation build() {
            final var o = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientation();
            o.default_ = default_;
            o.landscape = landscape;
            o.portrait = portrait;
            o.square = square;
            return o;
        }
    }
}
