// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationDefault;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationLandscape;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationPortrait;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationSquare;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientation extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientation Empty = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientation();

    @Import(name="default")
    private @Nullable GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationDefault default_;

    public Optional<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationDefault> default_() {
        return Optional.ofNullable(this.default_);
    }

    @Import(name="landscape")
    private @Nullable GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationLandscape landscape;

    public Optional<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationLandscape> landscape() {
        return Optional.ofNullable(this.landscape);
    }

    @Import(name="portrait")
    private @Nullable GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationPortrait portrait;

    public Optional<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationPortrait> portrait() {
        return Optional.ofNullable(this.portrait);
    }

    @Import(name="square")
    private @Nullable GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationSquare square;

    public Optional<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationSquare> square() {
        return Optional.ofNullable(this.square);
    }

    private GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientation() {}

    private GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientation(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientation $) {
        this.default_ = $.default_;
        this.landscape = $.landscape;
        this.portrait = $.portrait;
        this.square = $.square;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientation defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientation $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientation();
        }

        public Builder(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientation defaults) {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientation(Objects.requireNonNull(defaults));
        }

        public Builder default_(@Nullable GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationDefault default_) {
            $.default_ = default_;
            return this;
        }

        public Builder landscape(@Nullable GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationLandscape landscape) {
            $.landscape = landscape;
            return this;
        }

        public Builder portrait(@Nullable GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationPortrait portrait) {
            $.portrait = portrait;
            return this;
        }

        public Builder square(@Nullable GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationSquare square) {
            $.square = square;
            return this;
        }

        public GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientation build() {
            return $;
        }
    }

}
