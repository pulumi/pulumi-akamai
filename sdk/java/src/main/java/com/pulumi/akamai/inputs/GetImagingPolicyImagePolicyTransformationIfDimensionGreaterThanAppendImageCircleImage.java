// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageCircleImageTransformation;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageCircleImage extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageCircleImage Empty = new GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageCircleImage();

    @Import(name="color")
    private @Nullable String color;

    public Optional<String> color() {
        return Optional.ofNullable(this.color);
    }

    @Import(name="colorVar")
    private @Nullable String colorVar;

    public Optional<String> colorVar() {
        return Optional.ofNullable(this.colorVar);
    }

    @Import(name="diameter")
    private @Nullable String diameter;

    public Optional<String> diameter() {
        return Optional.ofNullable(this.diameter);
    }

    @Import(name="diameterVar")
    private @Nullable String diameterVar;

    public Optional<String> diameterVar() {
        return Optional.ofNullable(this.diameterVar);
    }

    @Import(name="transformation")
    private @Nullable GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageCircleImageTransformation transformation;

    public Optional<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageCircleImageTransformation> transformation() {
        return Optional.ofNullable(this.transformation);
    }

    @Import(name="width")
    private @Nullable String width;

    public Optional<String> width() {
        return Optional.ofNullable(this.width);
    }

    @Import(name="widthVar")
    private @Nullable String widthVar;

    public Optional<String> widthVar() {
        return Optional.ofNullable(this.widthVar);
    }

    private GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageCircleImage() {}

    private GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageCircleImage(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageCircleImage $) {
        this.color = $.color;
        this.colorVar = $.colorVar;
        this.diameter = $.diameter;
        this.diameterVar = $.diameterVar;
        this.transformation = $.transformation;
        this.width = $.width;
        this.widthVar = $.widthVar;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageCircleImage defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageCircleImage $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageCircleImage();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageCircleImage defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageCircleImage(Objects.requireNonNull(defaults));
        }

        public Builder color(@Nullable String color) {
            $.color = color;
            return this;
        }

        public Builder colorVar(@Nullable String colorVar) {
            $.colorVar = colorVar;
            return this;
        }

        public Builder diameter(@Nullable String diameter) {
            $.diameter = diameter;
            return this;
        }

        public Builder diameterVar(@Nullable String diameterVar) {
            $.diameterVar = diameterVar;
            return this;
        }

        public Builder transformation(@Nullable GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageCircleImageTransformation transformation) {
            $.transformation = transformation;
            return this;
        }

        public Builder width(@Nullable String width) {
            $.width = width;
            return this;
        }

        public Builder widthVar(@Nullable String widthVar) {
            $.widthVar = widthVar;
            return this;
        }

        public GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageCircleImage build() {
            return $;
        }
    }

}
