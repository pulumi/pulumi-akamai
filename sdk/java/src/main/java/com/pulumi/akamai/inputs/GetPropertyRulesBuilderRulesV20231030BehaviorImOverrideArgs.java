// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyRulesBuilderRulesV20231030BehaviorImOverrideArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetPropertyRulesBuilderRulesV20231030BehaviorImOverrideArgs Empty = new GetPropertyRulesBuilderRulesV20231030BehaviorImOverrideArgs();

    /**
     * Directly specifies the pixel density. The numeric value is a scaling factor of 1, representing normal density.
     * 
     */
    @Import(name="dpr")
    private @Nullable Output<Double> dpr;

    /**
     * @return Directly specifies the pixel density. The numeric value is a scaling factor of 1, representing normal density.
     * 
     */
    public Optional<Output<Double>> dpr() {
        return Optional.ofNullable(this.dpr);
    }

    /**
     * This selects the variable with the desired pixel density. The variable specifies the same type of data as the `dpr` option below.
     * 
     */
    @Import(name="dprvar")
    private @Nullable Output<String> dprvar;

    /**
     * @return This selects the variable with the desired pixel density. The variable specifies the same type of data as the `dpr` option below.
     * 
     */
    public Optional<Output<String>> dprvar() {
        return Optional.ofNullable(this.dprvar);
    }

    /**
     * Whether to exclude all query parameters from the Image and Video Manager cache key.
     * 
     */
    @Import(name="excludeAllQueryParameters")
    private @Nullable Output<Boolean> excludeAllQueryParameters;

    /**
     * @return Whether to exclude all query parameters from the Image and Video Manager cache key.
     * 
     */
    public Optional<Output<Boolean>> excludeAllQueryParameters() {
        return Optional.ofNullable(this.excludeAllQueryParameters);
    }

    /**
     * Specifies individual query parameters to exclude from the Image and Video Manager cache key.
     * 
     */
    @Import(name="excludedQueryParameters")
    private @Nullable Output<List<String>> excludedQueryParameters;

    /**
     * @return Specifies individual query parameters to exclude from the Image and Video Manager cache key.
     * 
     */
    public Optional<Output<List<String>>> excludedQueryParameters() {
        return Optional.ofNullable(this.excludedQueryParameters);
    }

    /**
     * Specifies the type of the browser, or the encodings passed in the `Accept` header, that you want to optimize images for.
     * 
     */
    @Import(name="format")
    private @Nullable Output<String> format;

    /**
     * @return Specifies the type of the browser, or the encodings passed in the `Accept` header, that you want to optimize images for.
     * 
     */
    public Optional<Output<String>> format() {
        return Optional.ofNullable(this.format);
    }

    /**
     * This selects the variable with the name of the browser you want to optimize images for. The variable specifies the same type of data as the `format` option below.
     * 
     */
    @Import(name="formatvar")
    private @Nullable Output<String> formatvar;

    /**
     * @return This selects the variable with the name of the browser you want to optimize images for. The variable specifies the same type of data as the `format` option below.
     * 
     */
    public Optional<Output<String>> formatvar() {
        return Optional.ofNullable(this.formatvar);
    }

    /**
     * Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    @Import(name="locked")
    private @Nullable Output<Boolean> locked;

    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Output<Boolean>> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * Selects the type of query parameter you want to set.
     * 
     */
    @Import(name="override")
    private @Nullable Output<String> override;

    /**
     * @return Selects the type of query parameter you want to set.
     * 
     */
    public Optional<Output<String>> override() {
        return Optional.ofNullable(this.override);
    }

    /**
     * This selects the desired Image and Video Manager policy name directly. If there is no policy by that name, Image and Video Manager serves the image unmodified.
     * 
     */
    @Import(name="policy")
    private @Nullable Output<String> policy;

    /**
     * @return This selects the desired Image and Video Manager policy name directly. If there is no policy by that name, Image and Video Manager serves the image unmodified.
     * 
     */
    public Optional<Output<String>> policy() {
        return Optional.ofNullable(this.policy);
    }

    /**
     * This selects the variable with the desired Image and Video Manager policy name to apply to image requests. If there is no policy by that name, Image and Video Manager serves the image unmodified.
     * 
     */
    @Import(name="policyvar")
    private @Nullable Output<String> policyvar;

    /**
     * @return This selects the variable with the desired Image and Video Manager policy name to apply to image requests. If there is no policy by that name, Image and Video Manager serves the image unmodified.
     * 
     */
    public Optional<Output<String>> policyvar() {
        return Optional.ofNullable(this.policyvar);
    }

    /**
     * This selects one of the property&#39;s rule tree variables to assign to the `policyvarName` variable within Image and Video Manager.
     * 
     */
    @Import(name="policyvarIMvar")
    private @Nullable Output<String> policyvarIMvar;

    /**
     * @return This selects one of the property&#39;s rule tree variables to assign to the `policyvarName` variable within Image and Video Manager.
     * 
     */
    public Optional<Output<String>> policyvarIMvar() {
        return Optional.ofNullable(this.policyvarIMvar);
    }

    /**
     * This selects the name of one of the variables defined in an Image and Video Manager policy that you want to replace with the property&#39;s rule tree variable.
     * 
     */
    @Import(name="policyvarName")
    private @Nullable Output<String> policyvarName;

    /**
     * @return This selects the name of one of the variables defined in an Image and Video Manager policy that you want to replace with the property&#39;s rule tree variable.
     * 
     */
    public Optional<Output<String>> policyvarName() {
        return Optional.ofNullable(this.policyvarName);
    }

    /**
     * This option is for internal usage only.
     * 
     */
    @Import(name="templateUuid")
    private @Nullable Output<String> templateUuid;

    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<Output<String>> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }

    /**
     * Specifies how to set a query parameter.
     * 
     */
    @Import(name="typesel")
    private @Nullable Output<String> typesel;

    /**
     * @return Specifies how to set a query parameter.
     * 
     */
    public Optional<Output<String>> typesel() {
        return Optional.ofNullable(this.typesel);
    }

    /**
     * A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    /**
     * Sets the image&#39;s desired pixel width directly. If the Image Manager policy doesn&#39;t define that width, it serves the next largest width.
     * 
     */
    @Import(name="width")
    private @Nullable Output<Double> width;

    /**
     * @return Sets the image&#39;s desired pixel width directly. If the Image Manager policy doesn&#39;t define that width, it serves the next largest width.
     * 
     */
    public Optional<Output<Double>> width() {
        return Optional.ofNullable(this.width);
    }

    /**
     * Selects the variable with the desired width.  If the Image and Video Manager policy doesn&#39;t define that width, it serves the next largest width.
     * 
     */
    @Import(name="widthvar")
    private @Nullable Output<String> widthvar;

    /**
     * @return Selects the variable with the desired width.  If the Image and Video Manager policy doesn&#39;t define that width, it serves the next largest width.
     * 
     */
    public Optional<Output<String>> widthvar() {
        return Optional.ofNullable(this.widthvar);
    }

    private GetPropertyRulesBuilderRulesV20231030BehaviorImOverrideArgs() {}

    private GetPropertyRulesBuilderRulesV20231030BehaviorImOverrideArgs(GetPropertyRulesBuilderRulesV20231030BehaviorImOverrideArgs $) {
        this.dpr = $.dpr;
        this.dprvar = $.dprvar;
        this.excludeAllQueryParameters = $.excludeAllQueryParameters;
        this.excludedQueryParameters = $.excludedQueryParameters;
        this.format = $.format;
        this.formatvar = $.formatvar;
        this.locked = $.locked;
        this.override = $.override;
        this.policy = $.policy;
        this.policyvar = $.policyvar;
        this.policyvarIMvar = $.policyvarIMvar;
        this.policyvarName = $.policyvarName;
        this.templateUuid = $.templateUuid;
        this.typesel = $.typesel;
        this.uuid = $.uuid;
        this.width = $.width;
        this.widthvar = $.widthvar;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesBuilderRulesV20231030BehaviorImOverrideArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesBuilderRulesV20231030BehaviorImOverrideArgs $;

        public Builder() {
            $ = new GetPropertyRulesBuilderRulesV20231030BehaviorImOverrideArgs();
        }

        public Builder(GetPropertyRulesBuilderRulesV20231030BehaviorImOverrideArgs defaults) {
            $ = new GetPropertyRulesBuilderRulesV20231030BehaviorImOverrideArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dpr Directly specifies the pixel density. The numeric value is a scaling factor of 1, representing normal density.
         * 
         * @return builder
         * 
         */
        public Builder dpr(@Nullable Output<Double> dpr) {
            $.dpr = dpr;
            return this;
        }

        /**
         * @param dpr Directly specifies the pixel density. The numeric value is a scaling factor of 1, representing normal density.
         * 
         * @return builder
         * 
         */
        public Builder dpr(Double dpr) {
            return dpr(Output.of(dpr));
        }

        /**
         * @param dprvar This selects the variable with the desired pixel density. The variable specifies the same type of data as the `dpr` option below.
         * 
         * @return builder
         * 
         */
        public Builder dprvar(@Nullable Output<String> dprvar) {
            $.dprvar = dprvar;
            return this;
        }

        /**
         * @param dprvar This selects the variable with the desired pixel density. The variable specifies the same type of data as the `dpr` option below.
         * 
         * @return builder
         * 
         */
        public Builder dprvar(String dprvar) {
            return dprvar(Output.of(dprvar));
        }

        /**
         * @param excludeAllQueryParameters Whether to exclude all query parameters from the Image and Video Manager cache key.
         * 
         * @return builder
         * 
         */
        public Builder excludeAllQueryParameters(@Nullable Output<Boolean> excludeAllQueryParameters) {
            $.excludeAllQueryParameters = excludeAllQueryParameters;
            return this;
        }

        /**
         * @param excludeAllQueryParameters Whether to exclude all query parameters from the Image and Video Manager cache key.
         * 
         * @return builder
         * 
         */
        public Builder excludeAllQueryParameters(Boolean excludeAllQueryParameters) {
            return excludeAllQueryParameters(Output.of(excludeAllQueryParameters));
        }

        /**
         * @param excludedQueryParameters Specifies individual query parameters to exclude from the Image and Video Manager cache key.
         * 
         * @return builder
         * 
         */
        public Builder excludedQueryParameters(@Nullable Output<List<String>> excludedQueryParameters) {
            $.excludedQueryParameters = excludedQueryParameters;
            return this;
        }

        /**
         * @param excludedQueryParameters Specifies individual query parameters to exclude from the Image and Video Manager cache key.
         * 
         * @return builder
         * 
         */
        public Builder excludedQueryParameters(List<String> excludedQueryParameters) {
            return excludedQueryParameters(Output.of(excludedQueryParameters));
        }

        /**
         * @param excludedQueryParameters Specifies individual query parameters to exclude from the Image and Video Manager cache key.
         * 
         * @return builder
         * 
         */
        public Builder excludedQueryParameters(String... excludedQueryParameters) {
            return excludedQueryParameters(List.of(excludedQueryParameters));
        }

        /**
         * @param format Specifies the type of the browser, or the encodings passed in the `Accept` header, that you want to optimize images for.
         * 
         * @return builder
         * 
         */
        public Builder format(@Nullable Output<String> format) {
            $.format = format;
            return this;
        }

        /**
         * @param format Specifies the type of the browser, or the encodings passed in the `Accept` header, that you want to optimize images for.
         * 
         * @return builder
         * 
         */
        public Builder format(String format) {
            return format(Output.of(format));
        }

        /**
         * @param formatvar This selects the variable with the name of the browser you want to optimize images for. The variable specifies the same type of data as the `format` option below.
         * 
         * @return builder
         * 
         */
        public Builder formatvar(@Nullable Output<String> formatvar) {
            $.formatvar = formatvar;
            return this;
        }

        /**
         * @param formatvar This selects the variable with the name of the browser you want to optimize images for. The variable specifies the same type of data as the `format` option below.
         * 
         * @return builder
         * 
         */
        public Builder formatvar(String formatvar) {
            return formatvar(Output.of(formatvar));
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(@Nullable Output<Boolean> locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(Boolean locked) {
            return locked(Output.of(locked));
        }

        /**
         * @param override Selects the type of query parameter you want to set.
         * 
         * @return builder
         * 
         */
        public Builder override(@Nullable Output<String> override) {
            $.override = override;
            return this;
        }

        /**
         * @param override Selects the type of query parameter you want to set.
         * 
         * @return builder
         * 
         */
        public Builder override(String override) {
            return override(Output.of(override));
        }

        /**
         * @param policy This selects the desired Image and Video Manager policy name directly. If there is no policy by that name, Image and Video Manager serves the image unmodified.
         * 
         * @return builder
         * 
         */
        public Builder policy(@Nullable Output<String> policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param policy This selects the desired Image and Video Manager policy name directly. If there is no policy by that name, Image and Video Manager serves the image unmodified.
         * 
         * @return builder
         * 
         */
        public Builder policy(String policy) {
            return policy(Output.of(policy));
        }

        /**
         * @param policyvar This selects the variable with the desired Image and Video Manager policy name to apply to image requests. If there is no policy by that name, Image and Video Manager serves the image unmodified.
         * 
         * @return builder
         * 
         */
        public Builder policyvar(@Nullable Output<String> policyvar) {
            $.policyvar = policyvar;
            return this;
        }

        /**
         * @param policyvar This selects the variable with the desired Image and Video Manager policy name to apply to image requests. If there is no policy by that name, Image and Video Manager serves the image unmodified.
         * 
         * @return builder
         * 
         */
        public Builder policyvar(String policyvar) {
            return policyvar(Output.of(policyvar));
        }

        /**
         * @param policyvarIMvar This selects one of the property&#39;s rule tree variables to assign to the `policyvarName` variable within Image and Video Manager.
         * 
         * @return builder
         * 
         */
        public Builder policyvarIMvar(@Nullable Output<String> policyvarIMvar) {
            $.policyvarIMvar = policyvarIMvar;
            return this;
        }

        /**
         * @param policyvarIMvar This selects one of the property&#39;s rule tree variables to assign to the `policyvarName` variable within Image and Video Manager.
         * 
         * @return builder
         * 
         */
        public Builder policyvarIMvar(String policyvarIMvar) {
            return policyvarIMvar(Output.of(policyvarIMvar));
        }

        /**
         * @param policyvarName This selects the name of one of the variables defined in an Image and Video Manager policy that you want to replace with the property&#39;s rule tree variable.
         * 
         * @return builder
         * 
         */
        public Builder policyvarName(@Nullable Output<String> policyvarName) {
            $.policyvarName = policyvarName;
            return this;
        }

        /**
         * @param policyvarName This selects the name of one of the variables defined in an Image and Video Manager policy that you want to replace with the property&#39;s rule tree variable.
         * 
         * @return builder
         * 
         */
        public Builder policyvarName(String policyvarName) {
            return policyvarName(Output.of(policyvarName));
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(@Nullable Output<String> templateUuid) {
            $.templateUuid = templateUuid;
            return this;
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(String templateUuid) {
            return templateUuid(Output.of(templateUuid));
        }

        /**
         * @param typesel Specifies how to set a query parameter.
         * 
         * @return builder
         * 
         */
        public Builder typesel(@Nullable Output<String> typesel) {
            $.typesel = typesel;
            return this;
        }

        /**
         * @param typesel Specifies how to set a query parameter.
         * 
         * @return builder
         * 
         */
        public Builder typesel(String typesel) {
            return typesel(Output.of(typesel));
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        /**
         * @param width Sets the image&#39;s desired pixel width directly. If the Image Manager policy doesn&#39;t define that width, it serves the next largest width.
         * 
         * @return builder
         * 
         */
        public Builder width(@Nullable Output<Double> width) {
            $.width = width;
            return this;
        }

        /**
         * @param width Sets the image&#39;s desired pixel width directly. If the Image Manager policy doesn&#39;t define that width, it serves the next largest width.
         * 
         * @return builder
         * 
         */
        public Builder width(Double width) {
            return width(Output.of(width));
        }

        /**
         * @param widthvar Selects the variable with the desired width.  If the Image and Video Manager policy doesn&#39;t define that width, it serves the next largest width.
         * 
         * @return builder
         * 
         */
        public Builder widthvar(@Nullable Output<String> widthvar) {
            $.widthvar = widthvar;
            return this;
        }

        /**
         * @param widthvar Selects the variable with the desired width.  If the Image and Video Manager policy doesn&#39;t define that width, it serves the next largest width.
         * 
         * @return builder
         * 
         */
        public Builder widthvar(String widthvar) {
            return widthvar(Output.of(widthvar));
        }

        public GetPropertyRulesBuilderRulesV20231030BehaviorImOverrideArgs build() {
            return $;
        }
    }

}
