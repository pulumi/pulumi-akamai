// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationAppend;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationAspectCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationBackgroundColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationBlur;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationChromaKey;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationComposite;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationCompound;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationContrast;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationFaceCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationFeatureCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationFitAndFill;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationGoop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationGrayscale;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationHsl;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationHsv;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationIfDimension;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationIfOrientation;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationImQuery;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationMaxColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationMirror;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationMonoHue;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationOpacity;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationRelativeCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationRemoveColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationResize;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationRotate;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationScale;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationShears;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationTrim;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationUnsharpMask;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformation extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformation Empty = new GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformation();

    @Import(name="appends")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationAppend> appends;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationAppend>> appends() {
        return Optional.ofNullable(this.appends);
    }

    @Import(name="aspectCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationAspectCrop> aspectCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationAspectCrop>> aspectCrops() {
        return Optional.ofNullable(this.aspectCrops);
    }

    @Import(name="backgroundColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationBackgroundColor> backgroundColors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationBackgroundColor>> backgroundColors() {
        return Optional.ofNullable(this.backgroundColors);
    }

    @Import(name="blurs")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationBlur> blurs;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationBlur>> blurs() {
        return Optional.ofNullable(this.blurs);
    }

    @Import(name="chromaKeys")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationChromaKey> chromaKeys;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationChromaKey>> chromaKeys() {
        return Optional.ofNullable(this.chromaKeys);
    }

    @Import(name="composites")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationComposite> composites;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationComposite>> composites() {
        return Optional.ofNullable(this.composites);
    }

    @Import(name="compounds")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationCompound> compounds;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationCompound>> compounds() {
        return Optional.ofNullable(this.compounds);
    }

    @Import(name="contrasts")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationContrast> contrasts;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationContrast>> contrasts() {
        return Optional.ofNullable(this.contrasts);
    }

    @Import(name="crops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationCrop> crops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationCrop>> crops() {
        return Optional.ofNullable(this.crops);
    }

    @Import(name="faceCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationFaceCrop> faceCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationFaceCrop>> faceCrops() {
        return Optional.ofNullable(this.faceCrops);
    }

    @Import(name="featureCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationFeatureCrop> featureCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationFeatureCrop>> featureCrops() {
        return Optional.ofNullable(this.featureCrops);
    }

    @Import(name="fitAndFills")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationFitAndFill> fitAndFills;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationFitAndFill>> fitAndFills() {
        return Optional.ofNullable(this.fitAndFills);
    }

    @Import(name="goops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationGoop> goops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationGoop>> goops() {
        return Optional.ofNullable(this.goops);
    }

    @Import(name="grayscales")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationGrayscale> grayscales;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationGrayscale>> grayscales() {
        return Optional.ofNullable(this.grayscales);
    }

    @Import(name="hsls")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationHsl> hsls;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationHsl>> hsls() {
        return Optional.ofNullable(this.hsls);
    }

    @Import(name="hsvs")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationHsv> hsvs;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationHsv>> hsvs() {
        return Optional.ofNullable(this.hsvs);
    }

    @Import(name="ifDimensions")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationIfDimension> ifDimensions;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationIfDimension>> ifDimensions() {
        return Optional.ofNullable(this.ifDimensions);
    }

    @Import(name="ifOrientations")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationIfOrientation> ifOrientations;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationIfOrientation>> ifOrientations() {
        return Optional.ofNullable(this.ifOrientations);
    }

    @Import(name="imQueries")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationImQuery> imQueries;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationImQuery>> imQueries() {
        return Optional.ofNullable(this.imQueries);
    }

    @Import(name="maxColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationMaxColor> maxColors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationMaxColor>> maxColors() {
        return Optional.ofNullable(this.maxColors);
    }

    @Import(name="mirrors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationMirror> mirrors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationMirror>> mirrors() {
        return Optional.ofNullable(this.mirrors);
    }

    @Import(name="monoHues")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationMonoHue> monoHues;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationMonoHue>> monoHues() {
        return Optional.ofNullable(this.monoHues);
    }

    @Import(name="opacities")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationOpacity> opacities;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationOpacity>> opacities() {
        return Optional.ofNullable(this.opacities);
    }

    @Import(name="regionOfInterestCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCrop> regionOfInterestCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCrop>> regionOfInterestCrops() {
        return Optional.ofNullable(this.regionOfInterestCrops);
    }

    @Import(name="relativeCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationRelativeCrop> relativeCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationRelativeCrop>> relativeCrops() {
        return Optional.ofNullable(this.relativeCrops);
    }

    @Import(name="removeColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationRemoveColor> removeColors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationRemoveColor>> removeColors() {
        return Optional.ofNullable(this.removeColors);
    }

    @Import(name="resizes")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationResize> resizes;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationResize>> resizes() {
        return Optional.ofNullable(this.resizes);
    }

    @Import(name="rotates")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationRotate> rotates;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationRotate>> rotates() {
        return Optional.ofNullable(this.rotates);
    }

    @Import(name="scales")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationScale> scales;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationScale>> scales() {
        return Optional.ofNullable(this.scales);
    }

    @Import(name="shears")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationShears> shears;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationShears>> shears() {
        return Optional.ofNullable(this.shears);
    }

    @Import(name="trims")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationTrim> trims;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationTrim>> trims() {
        return Optional.ofNullable(this.trims);
    }

    @Import(name="unsharpMasks")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationUnsharpMask> unsharpMasks;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationUnsharpMask>> unsharpMasks() {
        return Optional.ofNullable(this.unsharpMasks);
    }

    private GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformation() {}

    private GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformation(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformation $) {
        this.appends = $.appends;
        this.aspectCrops = $.aspectCrops;
        this.backgroundColors = $.backgroundColors;
        this.blurs = $.blurs;
        this.chromaKeys = $.chromaKeys;
        this.composites = $.composites;
        this.compounds = $.compounds;
        this.contrasts = $.contrasts;
        this.crops = $.crops;
        this.faceCrops = $.faceCrops;
        this.featureCrops = $.featureCrops;
        this.fitAndFills = $.fitAndFills;
        this.goops = $.goops;
        this.grayscales = $.grayscales;
        this.hsls = $.hsls;
        this.hsvs = $.hsvs;
        this.ifDimensions = $.ifDimensions;
        this.ifOrientations = $.ifOrientations;
        this.imQueries = $.imQueries;
        this.maxColors = $.maxColors;
        this.mirrors = $.mirrors;
        this.monoHues = $.monoHues;
        this.opacities = $.opacities;
        this.regionOfInterestCrops = $.regionOfInterestCrops;
        this.relativeCrops = $.relativeCrops;
        this.removeColors = $.removeColors;
        this.resizes = $.resizes;
        this.rotates = $.rotates;
        this.scales = $.scales;
        this.shears = $.shears;
        this.trims = $.trims;
        this.unsharpMasks = $.unsharpMasks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformation defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformation $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformation();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformation defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformation(Objects.requireNonNull(defaults));
        }

        public Builder appends(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationAppend> appends) {
            $.appends = appends;
            return this;
        }

        public Builder appends(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationAppend... appends) {
            return appends(List.of(appends));
        }

        public Builder aspectCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationAspectCrop> aspectCrops) {
            $.aspectCrops = aspectCrops;
            return this;
        }

        public Builder aspectCrops(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationAspectCrop... aspectCrops) {
            return aspectCrops(List.of(aspectCrops));
        }

        public Builder backgroundColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationBackgroundColor> backgroundColors) {
            $.backgroundColors = backgroundColors;
            return this;
        }

        public Builder backgroundColors(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationBackgroundColor... backgroundColors) {
            return backgroundColors(List.of(backgroundColors));
        }

        public Builder blurs(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationBlur> blurs) {
            $.blurs = blurs;
            return this;
        }

        public Builder blurs(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationBlur... blurs) {
            return blurs(List.of(blurs));
        }

        public Builder chromaKeys(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationChromaKey> chromaKeys) {
            $.chromaKeys = chromaKeys;
            return this;
        }

        public Builder chromaKeys(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationChromaKey... chromaKeys) {
            return chromaKeys(List.of(chromaKeys));
        }

        public Builder composites(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationComposite> composites) {
            $.composites = composites;
            return this;
        }

        public Builder composites(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationComposite... composites) {
            return composites(List.of(composites));
        }

        public Builder compounds(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationCompound> compounds) {
            $.compounds = compounds;
            return this;
        }

        public Builder compounds(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationCompound... compounds) {
            return compounds(List.of(compounds));
        }

        public Builder contrasts(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationContrast> contrasts) {
            $.contrasts = contrasts;
            return this;
        }

        public Builder contrasts(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationContrast... contrasts) {
            return contrasts(List.of(contrasts));
        }

        public Builder crops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationCrop> crops) {
            $.crops = crops;
            return this;
        }

        public Builder crops(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationCrop... crops) {
            return crops(List.of(crops));
        }

        public Builder faceCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationFaceCrop> faceCrops) {
            $.faceCrops = faceCrops;
            return this;
        }

        public Builder faceCrops(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationFaceCrop... faceCrops) {
            return faceCrops(List.of(faceCrops));
        }

        public Builder featureCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationFeatureCrop> featureCrops) {
            $.featureCrops = featureCrops;
            return this;
        }

        public Builder featureCrops(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationFeatureCrop... featureCrops) {
            return featureCrops(List.of(featureCrops));
        }

        public Builder fitAndFills(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationFitAndFill> fitAndFills) {
            $.fitAndFills = fitAndFills;
            return this;
        }

        public Builder fitAndFills(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationFitAndFill... fitAndFills) {
            return fitAndFills(List.of(fitAndFills));
        }

        public Builder goops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationGoop> goops) {
            $.goops = goops;
            return this;
        }

        public Builder goops(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationGoop... goops) {
            return goops(List.of(goops));
        }

        public Builder grayscales(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationGrayscale> grayscales) {
            $.grayscales = grayscales;
            return this;
        }

        public Builder grayscales(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationGrayscale... grayscales) {
            return grayscales(List.of(grayscales));
        }

        public Builder hsls(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationHsl> hsls) {
            $.hsls = hsls;
            return this;
        }

        public Builder hsls(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationHsl... hsls) {
            return hsls(List.of(hsls));
        }

        public Builder hsvs(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationHsv> hsvs) {
            $.hsvs = hsvs;
            return this;
        }

        public Builder hsvs(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationHsv... hsvs) {
            return hsvs(List.of(hsvs));
        }

        public Builder ifDimensions(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationIfDimension> ifDimensions) {
            $.ifDimensions = ifDimensions;
            return this;
        }

        public Builder ifDimensions(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationIfDimension... ifDimensions) {
            return ifDimensions(List.of(ifDimensions));
        }

        public Builder ifOrientations(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationIfOrientation> ifOrientations) {
            $.ifOrientations = ifOrientations;
            return this;
        }

        public Builder ifOrientations(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationIfOrientation... ifOrientations) {
            return ifOrientations(List.of(ifOrientations));
        }

        public Builder imQueries(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationImQuery> imQueries) {
            $.imQueries = imQueries;
            return this;
        }

        public Builder imQueries(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationImQuery... imQueries) {
            return imQueries(List.of(imQueries));
        }

        public Builder maxColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationMaxColor> maxColors) {
            $.maxColors = maxColors;
            return this;
        }

        public Builder maxColors(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationMaxColor... maxColors) {
            return maxColors(List.of(maxColors));
        }

        public Builder mirrors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationMirror> mirrors) {
            $.mirrors = mirrors;
            return this;
        }

        public Builder mirrors(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationMirror... mirrors) {
            return mirrors(List.of(mirrors));
        }

        public Builder monoHues(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationMonoHue> monoHues) {
            $.monoHues = monoHues;
            return this;
        }

        public Builder monoHues(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationMonoHue... monoHues) {
            return monoHues(List.of(monoHues));
        }

        public Builder opacities(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationOpacity> opacities) {
            $.opacities = opacities;
            return this;
        }

        public Builder opacities(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationOpacity... opacities) {
            return opacities(List.of(opacities));
        }

        public Builder regionOfInterestCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCrop> regionOfInterestCrops) {
            $.regionOfInterestCrops = regionOfInterestCrops;
            return this;
        }

        public Builder regionOfInterestCrops(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCrop... regionOfInterestCrops) {
            return regionOfInterestCrops(List.of(regionOfInterestCrops));
        }

        public Builder relativeCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationRelativeCrop> relativeCrops) {
            $.relativeCrops = relativeCrops;
            return this;
        }

        public Builder relativeCrops(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationRelativeCrop... relativeCrops) {
            return relativeCrops(List.of(relativeCrops));
        }

        public Builder removeColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationRemoveColor> removeColors) {
            $.removeColors = removeColors;
            return this;
        }

        public Builder removeColors(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationRemoveColor... removeColors) {
            return removeColors(List.of(removeColors));
        }

        public Builder resizes(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationResize> resizes) {
            $.resizes = resizes;
            return this;
        }

        public Builder resizes(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationResize... resizes) {
            return resizes(List.of(resizes));
        }

        public Builder rotates(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationRotate> rotates) {
            $.rotates = rotates;
            return this;
        }

        public Builder rotates(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationRotate... rotates) {
            return rotates(List.of(rotates));
        }

        public Builder scales(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationScale> scales) {
            $.scales = scales;
            return this;
        }

        public Builder scales(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationScale... scales) {
            return scales(List.of(scales));
        }

        public Builder shears(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationShears> shears) {
            $.shears = shears;
            return this;
        }

        public Builder shears(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationShears... shears) {
            return shears(List.of(shears));
        }

        public Builder trims(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationTrim> trims) {
            $.trims = trims;
            return this;
        }

        public Builder trims(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationTrim... trims) {
            return trims(List.of(trims));
        }

        public Builder unsharpMasks(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationUnsharpMask> unsharpMasks) {
            $.unsharpMasks = unsharpMasks;
            return this;
        }

        public Builder unsharpMasks(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationUnsharpMask... unsharpMasks) {
            return unsharpMasks(List.of(unsharpMasks));
        }

        public GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformation build() {
            return $;
        }
    }

}
