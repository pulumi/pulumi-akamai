// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.akamai.outputs.GetIamApiClientsApiClientActions;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetIamApiClientsApiClient {
    /**
     * @return The part of the client secret that identifies your API client and lets you access applications and resources.
     * 
     */
    private String accessToken;
    /**
     * @return Specifies activities available for the API client.
     * 
     */
    private GetIamApiClientsApiClientActions actions;
    /**
     * @return The number of credentials active for the API client.
     * 
     */
    private Integer activeCredentialCount;
    /**
     * @return Whether the API client can manage more than one account.
     * 
     */
    private Boolean allowAccountSwitch;
    /**
     * @return The API client&#39;s valid users.
     * 
     */
    private List<String> authorizedUsers;
    /**
     * @return Whether the API client can create a credential for a new API client.
     * 
     */
    private Boolean canAutoCreateCredential;
    /**
     * @return A human-readable description of the API client.
     * 
     */
    private String clientDescription;
    /**
     * @return A unique identifier for the API client.
     * 
     */
    private String clientId;
    /**
     * @return A human-readable name for the API client.
     * 
     */
    private String clientName;
    /**
     * @return Specifies the API client&#39;s ownership and credential management.
     * 
     */
    private String clientType;
    /**
     * @return The user who created the API client.
     * 
     */
    private String createdBy;
    /**
     * @return The ISO 8601 timestamp indicating when the API client was created.
     * 
     */
    private String createdDate;
    /**
     * @return Whether the API client is locked.
     * 
     */
    private Boolean isLocked;
    /**
     * @return Email addresses to notify users when credentials expire.
     * 
     */
    private List<String> notificationEmails;
    /**
     * @return Unique identifier for the service hostname.
     * 
     */
    private String serviceConsumerToken;

    private GetIamApiClientsApiClient() {}
    /**
     * @return The part of the client secret that identifies your API client and lets you access applications and resources.
     * 
     */
    public String accessToken() {
        return this.accessToken;
    }
    /**
     * @return Specifies activities available for the API client.
     * 
     */
    public GetIamApiClientsApiClientActions actions() {
        return this.actions;
    }
    /**
     * @return The number of credentials active for the API client.
     * 
     */
    public Integer activeCredentialCount() {
        return this.activeCredentialCount;
    }
    /**
     * @return Whether the API client can manage more than one account.
     * 
     */
    public Boolean allowAccountSwitch() {
        return this.allowAccountSwitch;
    }
    /**
     * @return The API client&#39;s valid users.
     * 
     */
    public List<String> authorizedUsers() {
        return this.authorizedUsers;
    }
    /**
     * @return Whether the API client can create a credential for a new API client.
     * 
     */
    public Boolean canAutoCreateCredential() {
        return this.canAutoCreateCredential;
    }
    /**
     * @return A human-readable description of the API client.
     * 
     */
    public String clientDescription() {
        return this.clientDescription;
    }
    /**
     * @return A unique identifier for the API client.
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return A human-readable name for the API client.
     * 
     */
    public String clientName() {
        return this.clientName;
    }
    /**
     * @return Specifies the API client&#39;s ownership and credential management.
     * 
     */
    public String clientType() {
        return this.clientType;
    }
    /**
     * @return The user who created the API client.
     * 
     */
    public String createdBy() {
        return this.createdBy;
    }
    /**
     * @return The ISO 8601 timestamp indicating when the API client was created.
     * 
     */
    public String createdDate() {
        return this.createdDate;
    }
    /**
     * @return Whether the API client is locked.
     * 
     */
    public Boolean isLocked() {
        return this.isLocked;
    }
    /**
     * @return Email addresses to notify users when credentials expire.
     * 
     */
    public List<String> notificationEmails() {
        return this.notificationEmails;
    }
    /**
     * @return Unique identifier for the service hostname.
     * 
     */
    public String serviceConsumerToken() {
        return this.serviceConsumerToken;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIamApiClientsApiClient defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessToken;
        private GetIamApiClientsApiClientActions actions;
        private Integer activeCredentialCount;
        private Boolean allowAccountSwitch;
        private List<String> authorizedUsers;
        private Boolean canAutoCreateCredential;
        private String clientDescription;
        private String clientId;
        private String clientName;
        private String clientType;
        private String createdBy;
        private String createdDate;
        private Boolean isLocked;
        private List<String> notificationEmails;
        private String serviceConsumerToken;
        public Builder() {}
        public Builder(GetIamApiClientsApiClient defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessToken = defaults.accessToken;
    	      this.actions = defaults.actions;
    	      this.activeCredentialCount = defaults.activeCredentialCount;
    	      this.allowAccountSwitch = defaults.allowAccountSwitch;
    	      this.authorizedUsers = defaults.authorizedUsers;
    	      this.canAutoCreateCredential = defaults.canAutoCreateCredential;
    	      this.clientDescription = defaults.clientDescription;
    	      this.clientId = defaults.clientId;
    	      this.clientName = defaults.clientName;
    	      this.clientType = defaults.clientType;
    	      this.createdBy = defaults.createdBy;
    	      this.createdDate = defaults.createdDate;
    	      this.isLocked = defaults.isLocked;
    	      this.notificationEmails = defaults.notificationEmails;
    	      this.serviceConsumerToken = defaults.serviceConsumerToken;
        }

        @CustomType.Setter
        public Builder accessToken(String accessToken) {
            if (accessToken == null) {
              throw new MissingRequiredPropertyException("GetIamApiClientsApiClient", "accessToken");
            }
            this.accessToken = accessToken;
            return this;
        }
        @CustomType.Setter
        public Builder actions(GetIamApiClientsApiClientActions actions) {
            if (actions == null) {
              throw new MissingRequiredPropertyException("GetIamApiClientsApiClient", "actions");
            }
            this.actions = actions;
            return this;
        }
        @CustomType.Setter
        public Builder activeCredentialCount(Integer activeCredentialCount) {
            if (activeCredentialCount == null) {
              throw new MissingRequiredPropertyException("GetIamApiClientsApiClient", "activeCredentialCount");
            }
            this.activeCredentialCount = activeCredentialCount;
            return this;
        }
        @CustomType.Setter
        public Builder allowAccountSwitch(Boolean allowAccountSwitch) {
            if (allowAccountSwitch == null) {
              throw new MissingRequiredPropertyException("GetIamApiClientsApiClient", "allowAccountSwitch");
            }
            this.allowAccountSwitch = allowAccountSwitch;
            return this;
        }
        @CustomType.Setter
        public Builder authorizedUsers(List<String> authorizedUsers) {
            if (authorizedUsers == null) {
              throw new MissingRequiredPropertyException("GetIamApiClientsApiClient", "authorizedUsers");
            }
            this.authorizedUsers = authorizedUsers;
            return this;
        }
        public Builder authorizedUsers(String... authorizedUsers) {
            return authorizedUsers(List.of(authorizedUsers));
        }
        @CustomType.Setter
        public Builder canAutoCreateCredential(Boolean canAutoCreateCredential) {
            if (canAutoCreateCredential == null) {
              throw new MissingRequiredPropertyException("GetIamApiClientsApiClient", "canAutoCreateCredential");
            }
            this.canAutoCreateCredential = canAutoCreateCredential;
            return this;
        }
        @CustomType.Setter
        public Builder clientDescription(String clientDescription) {
            if (clientDescription == null) {
              throw new MissingRequiredPropertyException("GetIamApiClientsApiClient", "clientDescription");
            }
            this.clientDescription = clientDescription;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(String clientId) {
            if (clientId == null) {
              throw new MissingRequiredPropertyException("GetIamApiClientsApiClient", "clientId");
            }
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientName(String clientName) {
            if (clientName == null) {
              throw new MissingRequiredPropertyException("GetIamApiClientsApiClient", "clientName");
            }
            this.clientName = clientName;
            return this;
        }
        @CustomType.Setter
        public Builder clientType(String clientType) {
            if (clientType == null) {
              throw new MissingRequiredPropertyException("GetIamApiClientsApiClient", "clientType");
            }
            this.clientType = clientType;
            return this;
        }
        @CustomType.Setter
        public Builder createdBy(String createdBy) {
            if (createdBy == null) {
              throw new MissingRequiredPropertyException("GetIamApiClientsApiClient", "createdBy");
            }
            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder createdDate(String createdDate) {
            if (createdDate == null) {
              throw new MissingRequiredPropertyException("GetIamApiClientsApiClient", "createdDate");
            }
            this.createdDate = createdDate;
            return this;
        }
        @CustomType.Setter
        public Builder isLocked(Boolean isLocked) {
            if (isLocked == null) {
              throw new MissingRequiredPropertyException("GetIamApiClientsApiClient", "isLocked");
            }
            this.isLocked = isLocked;
            return this;
        }
        @CustomType.Setter
        public Builder notificationEmails(List<String> notificationEmails) {
            if (notificationEmails == null) {
              throw new MissingRequiredPropertyException("GetIamApiClientsApiClient", "notificationEmails");
            }
            this.notificationEmails = notificationEmails;
            return this;
        }
        public Builder notificationEmails(String... notificationEmails) {
            return notificationEmails(List.of(notificationEmails));
        }
        @CustomType.Setter
        public Builder serviceConsumerToken(String serviceConsumerToken) {
            if (serviceConsumerToken == null) {
              throw new MissingRequiredPropertyException("GetIamApiClientsApiClient", "serviceConsumerToken");
            }
            this.serviceConsumerToken = serviceConsumerToken;
            return this;
        }
        public GetIamApiClientsApiClient build() {
            final var _resultValue = new GetIamApiClientsApiClient();
            _resultValue.accessToken = accessToken;
            _resultValue.actions = actions;
            _resultValue.activeCredentialCount = activeCredentialCount;
            _resultValue.allowAccountSwitch = allowAccountSwitch;
            _resultValue.authorizedUsers = authorizedUsers;
            _resultValue.canAutoCreateCredential = canAutoCreateCredential;
            _resultValue.clientDescription = clientDescription;
            _resultValue.clientId = clientId;
            _resultValue.clientName = clientName;
            _resultValue.clientType = clientType;
            _resultValue.createdBy = createdBy;
            _resultValue.createdDate = createdDate;
            _resultValue.isLocked = isLocked;
            _resultValue.notificationEmails = notificationEmails;
            _resultValue.serviceConsumerToken = serviceConsumerToken;
            return _resultValue;
        }
    }
}
