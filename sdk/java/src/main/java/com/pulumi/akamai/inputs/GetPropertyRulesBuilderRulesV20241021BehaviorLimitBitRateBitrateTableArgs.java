// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyRulesBuilderRulesV20241021BehaviorLimitBitRateBitrateTableArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetPropertyRulesBuilderRulesV20241021BehaviorLimitBitRateBitrateTableArgs Empty = new GetPropertyRulesBuilderRulesV20241021BehaviorLimitBitRateBitrateTableArgs();

    /**
     * The unit of measurement, either `KBPS`, `MBPS`, or `GBPS`.
     * 
     */
    @Import(name="bitrateUnit")
    private @Nullable Output<String> bitrateUnit;

    /**
     * @return The unit of measurement, either `KBPS`, `MBPS`, or `GBPS`.
     * 
     */
    public Optional<Output<String>> bitrateUnit() {
        return Optional.ofNullable(this.bitrateUnit);
    }

    /**
     * The numeric indicator of the download rate.
     * 
     */
    @Import(name="bitrateValue")
    private @Nullable Output<Double> bitrateValue;

    /**
     * @return The numeric indicator of the download rate.
     * 
     */
    public Optional<Output<Double>> bitrateValue() {
        return Optional.ofNullable(this.bitrateValue);
    }

    private GetPropertyRulesBuilderRulesV20241021BehaviorLimitBitRateBitrateTableArgs() {}

    private GetPropertyRulesBuilderRulesV20241021BehaviorLimitBitRateBitrateTableArgs(GetPropertyRulesBuilderRulesV20241021BehaviorLimitBitRateBitrateTableArgs $) {
        this.bitrateUnit = $.bitrateUnit;
        this.bitrateValue = $.bitrateValue;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesBuilderRulesV20241021BehaviorLimitBitRateBitrateTableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesBuilderRulesV20241021BehaviorLimitBitRateBitrateTableArgs $;

        public Builder() {
            $ = new GetPropertyRulesBuilderRulesV20241021BehaviorLimitBitRateBitrateTableArgs();
        }

        public Builder(GetPropertyRulesBuilderRulesV20241021BehaviorLimitBitRateBitrateTableArgs defaults) {
            $ = new GetPropertyRulesBuilderRulesV20241021BehaviorLimitBitRateBitrateTableArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bitrateUnit The unit of measurement, either `KBPS`, `MBPS`, or `GBPS`.
         * 
         * @return builder
         * 
         */
        public Builder bitrateUnit(@Nullable Output<String> bitrateUnit) {
            $.bitrateUnit = bitrateUnit;
            return this;
        }

        /**
         * @param bitrateUnit The unit of measurement, either `KBPS`, `MBPS`, or `GBPS`.
         * 
         * @return builder
         * 
         */
        public Builder bitrateUnit(String bitrateUnit) {
            return bitrateUnit(Output.of(bitrateUnit));
        }

        /**
         * @param bitrateValue The numeric indicator of the download rate.
         * 
         * @return builder
         * 
         */
        public Builder bitrateValue(@Nullable Output<Double> bitrateValue) {
            $.bitrateValue = bitrateValue;
            return this;
        }

        /**
         * @param bitrateValue The numeric indicator of the download rate.
         * 
         * @return builder
         * 
         */
        public Builder bitrateValue(Double bitrateValue) {
            return bitrateValue(Output.of(bitrateValue));
        }

        public GetPropertyRulesBuilderRulesV20241021BehaviorLimitBitRateBitrateTableArgs build() {
            return $;
        }
    }

}
