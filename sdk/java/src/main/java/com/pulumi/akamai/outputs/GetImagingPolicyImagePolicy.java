// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyBreakpoints;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyOutput;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyPostBreakpointTransformation;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformation;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyVariable;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetImagingPolicyImagePolicy {
    /**
     * @return The breakpoint widths (in pixels) to use to create derivative images/videos.
     * 
     */
    private @Nullable GetImagingPolicyImagePolicyBreakpoints breakpoints;
    /**
     * @return Hosts that are allowed for image/video URLs within transformations or variables.
     * 
     */
    private @Nullable List<String> hosts;
    /**
     * @return Dictates the output quality (either `quality` or `perceptualQuality`) and formats that are created for each resized image. If unspecified, image formats are created to support all browsers at the default quality level (`85`), which includes formats such as WEBP, JPEG2000 and JPEG-XR for specific browsers.
     * 
     */
    private @Nullable GetImagingPolicyImagePolicyOutput output;
    /**
     * @return Post-processing Transformations are applied to the image after image and quality settings have been applied.
     * 
     */
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformation> postBreakpointTransformations;
    /**
     * @return The amount of time in seconds that the policy takes to rollout. During the rollout an increasing proportion of images/videos will begin to use the new policy instead of the cached images/videos from the previous version. This value has no effect on the staging network.
     * 
     */
    private @Nullable String rolloutDuration;
    /**
     * @return The amount of time in seconds that the policy will serve stale images. During the serve stale period realtime images will attempt to use the offline image from the previous policy version first if possible.
     * 
     */
    private @Nullable String serveStaleDuration;
    /**
     * @return Set of image transformations to apply to the source image. If unspecified, no operations are performed.
     * 
     */
    private @Nullable List<GetImagingPolicyImagePolicyTransformation> transformations;
    /**
     * @return Declares variables for use within the policy. Any variable declared here can be invoked throughout transformations as a Variable object, so that you don&#39;t have to specify values separately. You can also pass in these variable names and values dynamically as query parameters in the image&#39;s request URL.
     * 
     */
    private @Nullable List<GetImagingPolicyImagePolicyVariable> variables;

    private GetImagingPolicyImagePolicy() {}
    /**
     * @return The breakpoint widths (in pixels) to use to create derivative images/videos.
     * 
     */
    public Optional<GetImagingPolicyImagePolicyBreakpoints> breakpoints() {
        return Optional.ofNullable(this.breakpoints);
    }
    /**
     * @return Hosts that are allowed for image/video URLs within transformations or variables.
     * 
     */
    public List<String> hosts() {
        return this.hosts == null ? List.of() : this.hosts;
    }
    /**
     * @return Dictates the output quality (either `quality` or `perceptualQuality`) and formats that are created for each resized image. If unspecified, image formats are created to support all browsers at the default quality level (`85`), which includes formats such as WEBP, JPEG2000 and JPEG-XR for specific browsers.
     * 
     */
    public Optional<GetImagingPolicyImagePolicyOutput> output() {
        return Optional.ofNullable(this.output);
    }
    /**
     * @return Post-processing Transformations are applied to the image after image and quality settings have been applied.
     * 
     */
    public List<GetImagingPolicyImagePolicyPostBreakpointTransformation> postBreakpointTransformations() {
        return this.postBreakpointTransformations == null ? List.of() : this.postBreakpointTransformations;
    }
    /**
     * @return The amount of time in seconds that the policy takes to rollout. During the rollout an increasing proportion of images/videos will begin to use the new policy instead of the cached images/videos from the previous version. This value has no effect on the staging network.
     * 
     */
    public Optional<String> rolloutDuration() {
        return Optional.ofNullable(this.rolloutDuration);
    }
    /**
     * @return The amount of time in seconds that the policy will serve stale images. During the serve stale period realtime images will attempt to use the offline image from the previous policy version first if possible.
     * 
     */
    public Optional<String> serveStaleDuration() {
        return Optional.ofNullable(this.serveStaleDuration);
    }
    /**
     * @return Set of image transformations to apply to the source image. If unspecified, no operations are performed.
     * 
     */
    public List<GetImagingPolicyImagePolicyTransformation> transformations() {
        return this.transformations == null ? List.of() : this.transformations;
    }
    /**
     * @return Declares variables for use within the policy. Any variable declared here can be invoked throughout transformations as a Variable object, so that you don&#39;t have to specify values separately. You can also pass in these variable names and values dynamically as query parameters in the image&#39;s request URL.
     * 
     */
    public List<GetImagingPolicyImagePolicyVariable> variables() {
        return this.variables == null ? List.of() : this.variables;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImagingPolicyImagePolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable GetImagingPolicyImagePolicyBreakpoints breakpoints;
        private @Nullable List<String> hosts;
        private @Nullable GetImagingPolicyImagePolicyOutput output;
        private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformation> postBreakpointTransformations;
        private @Nullable String rolloutDuration;
        private @Nullable String serveStaleDuration;
        private @Nullable List<GetImagingPolicyImagePolicyTransformation> transformations;
        private @Nullable List<GetImagingPolicyImagePolicyVariable> variables;
        public Builder() {}
        public Builder(GetImagingPolicyImagePolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.breakpoints = defaults.breakpoints;
    	      this.hosts = defaults.hosts;
    	      this.output = defaults.output;
    	      this.postBreakpointTransformations = defaults.postBreakpointTransformations;
    	      this.rolloutDuration = defaults.rolloutDuration;
    	      this.serveStaleDuration = defaults.serveStaleDuration;
    	      this.transformations = defaults.transformations;
    	      this.variables = defaults.variables;
        }

        @CustomType.Setter
        public Builder breakpoints(@Nullable GetImagingPolicyImagePolicyBreakpoints breakpoints) {

            this.breakpoints = breakpoints;
            return this;
        }
        @CustomType.Setter
        public Builder hosts(@Nullable List<String> hosts) {

            this.hosts = hosts;
            return this;
        }
        public Builder hosts(String... hosts) {
            return hosts(List.of(hosts));
        }
        @CustomType.Setter
        public Builder output(@Nullable GetImagingPolicyImagePolicyOutput output) {

            this.output = output;
            return this;
        }
        @CustomType.Setter
        public Builder postBreakpointTransformations(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformation> postBreakpointTransformations) {

            this.postBreakpointTransformations = postBreakpointTransformations;
            return this;
        }
        public Builder postBreakpointTransformations(GetImagingPolicyImagePolicyPostBreakpointTransformation... postBreakpointTransformations) {
            return postBreakpointTransformations(List.of(postBreakpointTransformations));
        }
        @CustomType.Setter
        public Builder rolloutDuration(@Nullable String rolloutDuration) {

            this.rolloutDuration = rolloutDuration;
            return this;
        }
        @CustomType.Setter
        public Builder serveStaleDuration(@Nullable String serveStaleDuration) {

            this.serveStaleDuration = serveStaleDuration;
            return this;
        }
        @CustomType.Setter
        public Builder transformations(@Nullable List<GetImagingPolicyImagePolicyTransformation> transformations) {

            this.transformations = transformations;
            return this;
        }
        public Builder transformations(GetImagingPolicyImagePolicyTransformation... transformations) {
            return transformations(List.of(transformations));
        }
        @CustomType.Setter
        public Builder variables(@Nullable List<GetImagingPolicyImagePolicyVariable> variables) {

            this.variables = variables;
            return this;
        }
        public Builder variables(GetImagingPolicyImagePolicyVariable... variables) {
            return variables(List.of(variables));
        }
        public GetImagingPolicyImagePolicy build() {
            final var _resultValue = new GetImagingPolicyImagePolicy();
            _resultValue.breakpoints = breakpoints;
            _resultValue.hosts = hosts;
            _resultValue.output = output;
            _resultValue.postBreakpointTransformations = postBreakpointTransformations;
            _resultValue.rolloutDuration = rolloutDuration;
            _resultValue.serveStaleDuration = serveStaleDuration;
            _resultValue.transformations = transformations;
            _resultValue.variables = variables;
            return _resultValue;
        }
    }
}
