// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetCloudwrapperConfigurationsConfigurationLocation;
import com.pulumi.akamai.inputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettings;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCloudwrapperConfigurationsConfiguration extends com.pulumi.resources.InvokeArgs {

    public static final GetCloudwrapperConfigurationsConfiguration Empty = new GetCloudwrapperConfigurationsConfiguration();

    @Import(name="capacityAlertsThreshold", required=true)
    private Integer capacityAlertsThreshold;

    public Integer capacityAlertsThreshold() {
        return this.capacityAlertsThreshold;
    }

    @Import(name="comments", required=true)
    private String comments;

    public String comments() {
        return this.comments;
    }

    @Import(name="configName", required=true)
    private String configName;

    public String configName() {
        return this.configName;
    }

    @Import(name="contractId", required=true)
    private String contractId;

    public String contractId() {
        return this.contractId;
    }

    @Import(name="id", required=true)
    private Integer id;

    public Integer id() {
        return this.id;
    }

    @Import(name="lastActivatedBy", required=true)
    private String lastActivatedBy;

    public String lastActivatedBy() {
        return this.lastActivatedBy;
    }

    @Import(name="lastActivatedDate", required=true)
    private String lastActivatedDate;

    public String lastActivatedDate() {
        return this.lastActivatedDate;
    }

    @Import(name="lastUpdatedBy", required=true)
    private String lastUpdatedBy;

    public String lastUpdatedBy() {
        return this.lastUpdatedBy;
    }

    @Import(name="lastUpdatedDate", required=true)
    private String lastUpdatedDate;

    public String lastUpdatedDate() {
        return this.lastUpdatedDate;
    }

    @Import(name="locations")
    private @Nullable List<GetCloudwrapperConfigurationsConfigurationLocation> locations;

    public Optional<List<GetCloudwrapperConfigurationsConfigurationLocation>> locations() {
        return Optional.ofNullable(this.locations);
    }

    @Import(name="multiCdnSettings")
    private @Nullable GetCloudwrapperConfigurationsConfigurationMultiCdnSettings multiCdnSettings;

    public Optional<GetCloudwrapperConfigurationsConfigurationMultiCdnSettings> multiCdnSettings() {
        return Optional.ofNullable(this.multiCdnSettings);
    }

    @Import(name="notificationEmails", required=true)
    private List<String> notificationEmails;

    public List<String> notificationEmails() {
        return this.notificationEmails;
    }

    @Import(name="propertyIds", required=true)
    private List<String> propertyIds;

    public List<String> propertyIds() {
        return this.propertyIds;
    }

    @Import(name="retainIdleObjects", required=true)
    private Boolean retainIdleObjects;

    public Boolean retainIdleObjects() {
        return this.retainIdleObjects;
    }

    @Import(name="status", required=true)
    private String status;

    public String status() {
        return this.status;
    }

    private GetCloudwrapperConfigurationsConfiguration() {}

    private GetCloudwrapperConfigurationsConfiguration(GetCloudwrapperConfigurationsConfiguration $) {
        this.capacityAlertsThreshold = $.capacityAlertsThreshold;
        this.comments = $.comments;
        this.configName = $.configName;
        this.contractId = $.contractId;
        this.id = $.id;
        this.lastActivatedBy = $.lastActivatedBy;
        this.lastActivatedDate = $.lastActivatedDate;
        this.lastUpdatedBy = $.lastUpdatedBy;
        this.lastUpdatedDate = $.lastUpdatedDate;
        this.locations = $.locations;
        this.multiCdnSettings = $.multiCdnSettings;
        this.notificationEmails = $.notificationEmails;
        this.propertyIds = $.propertyIds;
        this.retainIdleObjects = $.retainIdleObjects;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCloudwrapperConfigurationsConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCloudwrapperConfigurationsConfiguration $;

        public Builder() {
            $ = new GetCloudwrapperConfigurationsConfiguration();
        }

        public Builder(GetCloudwrapperConfigurationsConfiguration defaults) {
            $ = new GetCloudwrapperConfigurationsConfiguration(Objects.requireNonNull(defaults));
        }

        public Builder capacityAlertsThreshold(Integer capacityAlertsThreshold) {
            $.capacityAlertsThreshold = capacityAlertsThreshold;
            return this;
        }

        public Builder comments(String comments) {
            $.comments = comments;
            return this;
        }

        public Builder configName(String configName) {
            $.configName = configName;
            return this;
        }

        public Builder contractId(String contractId) {
            $.contractId = contractId;
            return this;
        }

        public Builder id(Integer id) {
            $.id = id;
            return this;
        }

        public Builder lastActivatedBy(String lastActivatedBy) {
            $.lastActivatedBy = lastActivatedBy;
            return this;
        }

        public Builder lastActivatedDate(String lastActivatedDate) {
            $.lastActivatedDate = lastActivatedDate;
            return this;
        }

        public Builder lastUpdatedBy(String lastUpdatedBy) {
            $.lastUpdatedBy = lastUpdatedBy;
            return this;
        }

        public Builder lastUpdatedDate(String lastUpdatedDate) {
            $.lastUpdatedDate = lastUpdatedDate;
            return this;
        }

        public Builder locations(@Nullable List<GetCloudwrapperConfigurationsConfigurationLocation> locations) {
            $.locations = locations;
            return this;
        }

        public Builder locations(GetCloudwrapperConfigurationsConfigurationLocation... locations) {
            return locations(List.of(locations));
        }

        public Builder multiCdnSettings(@Nullable GetCloudwrapperConfigurationsConfigurationMultiCdnSettings multiCdnSettings) {
            $.multiCdnSettings = multiCdnSettings;
            return this;
        }

        public Builder notificationEmails(List<String> notificationEmails) {
            $.notificationEmails = notificationEmails;
            return this;
        }

        public Builder notificationEmails(String... notificationEmails) {
            return notificationEmails(List.of(notificationEmails));
        }

        public Builder propertyIds(List<String> propertyIds) {
            $.propertyIds = propertyIds;
            return this;
        }

        public Builder propertyIds(String... propertyIds) {
            return propertyIds(List.of(propertyIds));
        }

        public Builder retainIdleObjects(Boolean retainIdleObjects) {
            $.retainIdleObjects = retainIdleObjects;
            return this;
        }

        public Builder status(String status) {
            $.status = status;
            return this;
        }

        public GetCloudwrapperConfigurationsConfiguration build() {
            $.capacityAlertsThreshold = Objects.requireNonNull($.capacityAlertsThreshold, "expected parameter 'capacityAlertsThreshold' to be non-null");
            $.comments = Objects.requireNonNull($.comments, "expected parameter 'comments' to be non-null");
            $.configName = Objects.requireNonNull($.configName, "expected parameter 'configName' to be non-null");
            $.contractId = Objects.requireNonNull($.contractId, "expected parameter 'contractId' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.lastActivatedBy = Objects.requireNonNull($.lastActivatedBy, "expected parameter 'lastActivatedBy' to be non-null");
            $.lastActivatedDate = Objects.requireNonNull($.lastActivatedDate, "expected parameter 'lastActivatedDate' to be non-null");
            $.lastUpdatedBy = Objects.requireNonNull($.lastUpdatedBy, "expected parameter 'lastUpdatedBy' to be non-null");
            $.lastUpdatedDate = Objects.requireNonNull($.lastUpdatedDate, "expected parameter 'lastUpdatedDate' to be non-null");
            $.notificationEmails = Objects.requireNonNull($.notificationEmails, "expected parameter 'notificationEmails' to be non-null");
            $.propertyIds = Objects.requireNonNull($.propertyIds, "expected parameter 'propertyIds' to be non-null");
            $.retainIdleObjects = Objects.requireNonNull($.retainIdleObjects, "expected parameter 'retainIdleObjects' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            return $;
        }
    }

}
