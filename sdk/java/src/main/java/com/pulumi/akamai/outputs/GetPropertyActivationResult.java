// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPropertyActivationResult {
    private String activationId;
    private List<String> contacts;
    private String errors;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable String network;
    private String note;
    private String propertyId;
    private String status;
    private @Nullable Integer version;
    private String warnings;

    private GetPropertyActivationResult() {}
    public String activationId() {
        return this.activationId;
    }
    public List<String> contacts() {
        return this.contacts;
    }
    public String errors() {
        return this.errors;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> network() {
        return Optional.ofNullable(this.network);
    }
    public String note() {
        return this.note;
    }
    public String propertyId() {
        return this.propertyId;
    }
    public String status() {
        return this.status;
    }
    public Optional<Integer> version() {
        return Optional.ofNullable(this.version);
    }
    public String warnings() {
        return this.warnings;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPropertyActivationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String activationId;
        private List<String> contacts;
        private String errors;
        private String id;
        private @Nullable String network;
        private String note;
        private String propertyId;
        private String status;
        private @Nullable Integer version;
        private String warnings;
        public Builder() {}
        public Builder(GetPropertyActivationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activationId = defaults.activationId;
    	      this.contacts = defaults.contacts;
    	      this.errors = defaults.errors;
    	      this.id = defaults.id;
    	      this.network = defaults.network;
    	      this.note = defaults.note;
    	      this.propertyId = defaults.propertyId;
    	      this.status = defaults.status;
    	      this.version = defaults.version;
    	      this.warnings = defaults.warnings;
        }

        @CustomType.Setter
        public Builder activationId(String activationId) {
            if (activationId == null) {
              throw new MissingRequiredPropertyException("GetPropertyActivationResult", "activationId");
            }
            this.activationId = activationId;
            return this;
        }
        @CustomType.Setter
        public Builder contacts(List<String> contacts) {
            if (contacts == null) {
              throw new MissingRequiredPropertyException("GetPropertyActivationResult", "contacts");
            }
            this.contacts = contacts;
            return this;
        }
        public Builder contacts(String... contacts) {
            return contacts(List.of(contacts));
        }
        @CustomType.Setter
        public Builder errors(String errors) {
            if (errors == null) {
              throw new MissingRequiredPropertyException("GetPropertyActivationResult", "errors");
            }
            this.errors = errors;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPropertyActivationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder network(@Nullable String network) {

            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder note(String note) {
            if (note == null) {
              throw new MissingRequiredPropertyException("GetPropertyActivationResult", "note");
            }
            this.note = note;
            return this;
        }
        @CustomType.Setter
        public Builder propertyId(String propertyId) {
            if (propertyId == null) {
              throw new MissingRequiredPropertyException("GetPropertyActivationResult", "propertyId");
            }
            this.propertyId = propertyId;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetPropertyActivationResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder version(@Nullable Integer version) {

            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder warnings(String warnings) {
            if (warnings == null) {
              throw new MissingRequiredPropertyException("GetPropertyActivationResult", "warnings");
            }
            this.warnings = warnings;
            return this;
        }
        public GetPropertyActivationResult build() {
            final var _resultValue = new GetPropertyActivationResult();
            _resultValue.activationId = activationId;
            _resultValue.contacts = contacts;
            _resultValue.errors = errors;
            _resultValue.id = id;
            _resultValue.network = network;
            _resultValue.note = note;
            _resultValue.propertyId = propertyId;
            _resultValue.status = status;
            _resultValue.version = version;
            _resultValue.warnings = warnings;
            return _resultValue;
        }
    }
}
