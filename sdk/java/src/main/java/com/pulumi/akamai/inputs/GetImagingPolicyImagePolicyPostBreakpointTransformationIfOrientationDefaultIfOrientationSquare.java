// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareBackgroundColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareBlur;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareChromaKey;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareComposite;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareCompound;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareContrast;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareGoop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareGrayscale;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareHsl;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareHsv;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareIfDimension;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareIfOrientation;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareMaxColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareMirror;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareMonoHue;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareOpacity;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareRemoveColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareUnsharpMask;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquare extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquare Empty = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquare();

    @Import(name="backgroundColors")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareBackgroundColor> backgroundColors;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareBackgroundColor>> backgroundColors() {
        return Optional.ofNullable(this.backgroundColors);
    }

    @Import(name="blurs")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareBlur> blurs;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareBlur>> blurs() {
        return Optional.ofNullable(this.blurs);
    }

    @Import(name="chromaKeys")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareChromaKey> chromaKeys;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareChromaKey>> chromaKeys() {
        return Optional.ofNullable(this.chromaKeys);
    }

    @Import(name="composites")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareComposite> composites;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareComposite>> composites() {
        return Optional.ofNullable(this.composites);
    }

    @Import(name="compounds")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareCompound> compounds;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareCompound>> compounds() {
        return Optional.ofNullable(this.compounds);
    }

    @Import(name="contrasts")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareContrast> contrasts;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareContrast>> contrasts() {
        return Optional.ofNullable(this.contrasts);
    }

    @Import(name="goops")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareGoop> goops;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareGoop>> goops() {
        return Optional.ofNullable(this.goops);
    }

    @Import(name="grayscales")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareGrayscale> grayscales;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareGrayscale>> grayscales() {
        return Optional.ofNullable(this.grayscales);
    }

    @Import(name="hsls")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareHsl> hsls;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareHsl>> hsls() {
        return Optional.ofNullable(this.hsls);
    }

    @Import(name="hsvs")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareHsv> hsvs;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareHsv>> hsvs() {
        return Optional.ofNullable(this.hsvs);
    }

    @Import(name="ifDimensions")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareIfDimension> ifDimensions;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareIfDimension>> ifDimensions() {
        return Optional.ofNullable(this.ifDimensions);
    }

    @Import(name="ifOrientations")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareIfOrientation> ifOrientations;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareIfOrientation>> ifOrientations() {
        return Optional.ofNullable(this.ifOrientations);
    }

    @Import(name="maxColors")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareMaxColor> maxColors;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareMaxColor>> maxColors() {
        return Optional.ofNullable(this.maxColors);
    }

    @Import(name="mirrors")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareMirror> mirrors;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareMirror>> mirrors() {
        return Optional.ofNullable(this.mirrors);
    }

    @Import(name="monoHues")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareMonoHue> monoHues;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareMonoHue>> monoHues() {
        return Optional.ofNullable(this.monoHues);
    }

    @Import(name="opacities")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareOpacity> opacities;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareOpacity>> opacities() {
        return Optional.ofNullable(this.opacities);
    }

    @Import(name="removeColors")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareRemoveColor> removeColors;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareRemoveColor>> removeColors() {
        return Optional.ofNullable(this.removeColors);
    }

    @Import(name="unsharpMasks")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareUnsharpMask> unsharpMasks;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareUnsharpMask>> unsharpMasks() {
        return Optional.ofNullable(this.unsharpMasks);
    }

    private GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquare() {}

    private GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquare(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquare $) {
        this.backgroundColors = $.backgroundColors;
        this.blurs = $.blurs;
        this.chromaKeys = $.chromaKeys;
        this.composites = $.composites;
        this.compounds = $.compounds;
        this.contrasts = $.contrasts;
        this.goops = $.goops;
        this.grayscales = $.grayscales;
        this.hsls = $.hsls;
        this.hsvs = $.hsvs;
        this.ifDimensions = $.ifDimensions;
        this.ifOrientations = $.ifOrientations;
        this.maxColors = $.maxColors;
        this.mirrors = $.mirrors;
        this.monoHues = $.monoHues;
        this.opacities = $.opacities;
        this.removeColors = $.removeColors;
        this.unsharpMasks = $.unsharpMasks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquare defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquare $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquare();
        }

        public Builder(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquare defaults) {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquare(Objects.requireNonNull(defaults));
        }

        public Builder backgroundColors(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareBackgroundColor> backgroundColors) {
            $.backgroundColors = backgroundColors;
            return this;
        }

        public Builder backgroundColors(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareBackgroundColor... backgroundColors) {
            return backgroundColors(List.of(backgroundColors));
        }

        public Builder blurs(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareBlur> blurs) {
            $.blurs = blurs;
            return this;
        }

        public Builder blurs(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareBlur... blurs) {
            return blurs(List.of(blurs));
        }

        public Builder chromaKeys(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareChromaKey> chromaKeys) {
            $.chromaKeys = chromaKeys;
            return this;
        }

        public Builder chromaKeys(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareChromaKey... chromaKeys) {
            return chromaKeys(List.of(chromaKeys));
        }

        public Builder composites(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareComposite> composites) {
            $.composites = composites;
            return this;
        }

        public Builder composites(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareComposite... composites) {
            return composites(List.of(composites));
        }

        public Builder compounds(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareCompound> compounds) {
            $.compounds = compounds;
            return this;
        }

        public Builder compounds(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareCompound... compounds) {
            return compounds(List.of(compounds));
        }

        public Builder contrasts(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareContrast> contrasts) {
            $.contrasts = contrasts;
            return this;
        }

        public Builder contrasts(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareContrast... contrasts) {
            return contrasts(List.of(contrasts));
        }

        public Builder goops(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareGoop> goops) {
            $.goops = goops;
            return this;
        }

        public Builder goops(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareGoop... goops) {
            return goops(List.of(goops));
        }

        public Builder grayscales(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareGrayscale> grayscales) {
            $.grayscales = grayscales;
            return this;
        }

        public Builder grayscales(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareGrayscale... grayscales) {
            return grayscales(List.of(grayscales));
        }

        public Builder hsls(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareHsl> hsls) {
            $.hsls = hsls;
            return this;
        }

        public Builder hsls(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareHsl... hsls) {
            return hsls(List.of(hsls));
        }

        public Builder hsvs(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareHsv> hsvs) {
            $.hsvs = hsvs;
            return this;
        }

        public Builder hsvs(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareHsv... hsvs) {
            return hsvs(List.of(hsvs));
        }

        public Builder ifDimensions(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareIfDimension> ifDimensions) {
            $.ifDimensions = ifDimensions;
            return this;
        }

        public Builder ifDimensions(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareIfDimension... ifDimensions) {
            return ifDimensions(List.of(ifDimensions));
        }

        public Builder ifOrientations(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareIfOrientation> ifOrientations) {
            $.ifOrientations = ifOrientations;
            return this;
        }

        public Builder ifOrientations(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareIfOrientation... ifOrientations) {
            return ifOrientations(List.of(ifOrientations));
        }

        public Builder maxColors(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareMaxColor> maxColors) {
            $.maxColors = maxColors;
            return this;
        }

        public Builder maxColors(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareMaxColor... maxColors) {
            return maxColors(List.of(maxColors));
        }

        public Builder mirrors(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareMirror> mirrors) {
            $.mirrors = mirrors;
            return this;
        }

        public Builder mirrors(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareMirror... mirrors) {
            return mirrors(List.of(mirrors));
        }

        public Builder monoHues(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareMonoHue> monoHues) {
            $.monoHues = monoHues;
            return this;
        }

        public Builder monoHues(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareMonoHue... monoHues) {
            return monoHues(List.of(monoHues));
        }

        public Builder opacities(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareOpacity> opacities) {
            $.opacities = opacities;
            return this;
        }

        public Builder opacities(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareOpacity... opacities) {
            return opacities(List.of(opacities));
        }

        public Builder removeColors(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareRemoveColor> removeColors) {
            $.removeColors = removeColors;
            return this;
        }

        public Builder removeColors(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareRemoveColor... removeColors) {
            return removeColors(List.of(removeColors));
        }

        public Builder unsharpMasks(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareUnsharpMask> unsharpMasks) {
            $.unsharpMasks = unsharpMasks;
            return this;
        }

        public Builder unsharpMasks(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareUnsharpMask... unsharpMasks) {
            return unsharpMasks(List.of(unsharpMasks));
        }

        public GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquare build() {
            return $;
        }
    }

}
