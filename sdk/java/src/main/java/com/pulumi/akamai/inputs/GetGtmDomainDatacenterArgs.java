// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetGtmDomainDatacenterDefaultLoadObjectArgs;
import com.pulumi.akamai.inputs.GetGtmDomainDatacenterLinkArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetGtmDomainDatacenterArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetGtmDomainDatacenterArgs Empty = new GetGtmDomainDatacenterArgs();

    /**
     * The name of the city where the data center is located.
     * 
     */
    @Import(name="city", required=true)
    private Output<String> city;

    /**
     * @return The name of the city where the data center is located.
     * 
     */
    public Output<String> city() {
        return this.city;
    }

    /**
     * Identifies the data center&#39;s ID of which this data center is a clone.
     * 
     */
    @Import(name="cloneOf", required=true)
    private Output<Integer> cloneOf;

    /**
     * @return Identifies the data center&#39;s ID of which this data center is a clone.
     * 
     */
    public Output<Integer> cloneOf() {
        return this.cloneOf;
    }

    /**
     * Balances load between two or more servers in a cloud environment.
     * 
     */
    @Import(name="cloudServerHostHeaderOverride", required=true)
    private Output<Boolean> cloudServerHostHeaderOverride;

    /**
     * @return Balances load between two or more servers in a cloud environment.
     * 
     */
    public Output<Boolean> cloudServerHostHeaderOverride() {
        return this.cloudServerHostHeaderOverride;
    }

    /**
     * Balances load between two or more servers in a cloud environment.
     * 
     */
    @Import(name="cloudServerTargeting", required=true)
    private Output<Boolean> cloudServerTargeting;

    /**
     * @return Balances load between two or more servers in a cloud environment.
     * 
     */
    public Output<Boolean> cloudServerTargeting() {
        return this.cloudServerTargeting;
    }

    /**
     * A two-letter code that specifies the continent where the data center maps to.
     * 
     */
    @Import(name="continent", required=true)
    private Output<String> continent;

    /**
     * @return A two-letter code that specifies the continent where the data center maps to.
     * 
     */
    public Output<String> continent() {
        return this.continent;
    }

    /**
     * A two-letter ISO 3166 country code that specifies the country where the data center is located.
     * 
     */
    @Import(name="country", required=true)
    private Output<String> country;

    /**
     * @return A two-letter ISO 3166 country code that specifies the country where the data center is located.
     * 
     */
    public Output<String> country() {
        return this.country;
    }

    /**
     * A unique identifier for an existing data center in the domain.
     * 
     */
    @Import(name="datacenterId", required=true)
    private Output<Integer> datacenterId;

    /**
     * @return A unique identifier for an existing data center in the domain.
     * 
     */
    public Output<Integer> datacenterId() {
        return this.datacenterId;
    }

    /**
     * Specifies the load reporting interface between you and the GTM system.
     * 
     */
    @Import(name="defaultLoadObjects")
    private @Nullable Output<List<GetGtmDomainDatacenterDefaultLoadObjectArgs>> defaultLoadObjects;

    /**
     * @return Specifies the load reporting interface between you and the GTM system.
     * 
     */
    public Optional<Output<List<GetGtmDomainDatacenterDefaultLoadObjectArgs>>> defaultLoadObjects() {
        return Optional.ofNullable(this.defaultLoadObjects);
    }

    /**
     * Specifies the geographic latitude of the data center&#39;s position.
     * 
     */
    @Import(name="latitude", required=true)
    private Output<Double> latitude;

    /**
     * @return Specifies the geographic latitude of the data center&#39;s position.
     * 
     */
    public Output<Double> latitude() {
        return this.latitude;
    }

    /**
     * Provides a URL path that allows direct navigation to a data center.
     * 
     */
    @Import(name="links")
    private @Nullable Output<List<GetGtmDomainDatacenterLinkArgs>> links;

    /**
     * @return Provides a URL path that allows direct navigation to a data center.
     * 
     */
    public Optional<Output<List<GetGtmDomainDatacenterLinkArgs>>> links() {
        return Optional.ofNullable(this.links);
    }

    /**
     * Specifies the geographic longitude of the data center&#39;s position.
     * 
     */
    @Import(name="longitude", required=true)
    private Output<Double> longitude;

    /**
     * @return Specifies the geographic longitude of the data center&#39;s position.
     * 
     */
    public Output<Double> longitude() {
        return this.longitude;
    }

    /**
     * A descriptive label for the datacenter.
     * 
     */
    @Import(name="nickname", required=true)
    private Output<String> nickname;

    /**
     * @return A descriptive label for the datacenter.
     * 
     */
    public Output<String> nickname() {
        return this.nickname;
    }

    /**
     * Influences the score for a datacenter.
     * 
     */
    @Import(name="scorePenalty", required=true)
    private Output<Integer> scorePenalty;

    /**
     * @return Influences the score for a datacenter.
     * 
     */
    public Output<Integer> scorePenalty() {
        return this.scorePenalty;
    }

    /**
     * The name of the pool from which servermonitors are drawn for liveness tests in this datacenter. If omitted (null), the domain-wide default is used. (If no domain-wide default is specified, the pool used is all servermonitors in the same continent as the datacenter.).
     * 
     */
    @Import(name="serverMonitorPool", required=true)
    private Output<String> serverMonitorPool;

    /**
     * @return The name of the pool from which servermonitors are drawn for liveness tests in this datacenter. If omitted (null), the domain-wide default is used. (If no domain-wide default is specified, the pool used is all servermonitors in the same continent as the datacenter.).
     * 
     */
    public Output<String> serverMonitorPool() {
        return this.serverMonitorPool;
    }

    /**
     * Specifies a two-letter ISO 3166 country code for the state of province, where the data center is located.
     * 
     */
    @Import(name="stateOrProvince", required=true)
    private Output<String> stateOrProvince;

    /**
     * @return Specifies a two-letter ISO 3166 country code for the state of province, where the data center is located.
     * 
     */
    public Output<String> stateOrProvince() {
        return this.stateOrProvince;
    }

    /**
     * Indicates whether or not the data center is virtual or physical.
     * 
     */
    @Import(name="virtual", required=true)
    private Output<Boolean> virtual;

    /**
     * @return Indicates whether or not the data center is virtual or physical.
     * 
     */
    public Output<Boolean> virtual() {
        return this.virtual;
    }

    private GetGtmDomainDatacenterArgs() {}

    private GetGtmDomainDatacenterArgs(GetGtmDomainDatacenterArgs $) {
        this.city = $.city;
        this.cloneOf = $.cloneOf;
        this.cloudServerHostHeaderOverride = $.cloudServerHostHeaderOverride;
        this.cloudServerTargeting = $.cloudServerTargeting;
        this.continent = $.continent;
        this.country = $.country;
        this.datacenterId = $.datacenterId;
        this.defaultLoadObjects = $.defaultLoadObjects;
        this.latitude = $.latitude;
        this.links = $.links;
        this.longitude = $.longitude;
        this.nickname = $.nickname;
        this.scorePenalty = $.scorePenalty;
        this.serverMonitorPool = $.serverMonitorPool;
        this.stateOrProvince = $.stateOrProvince;
        this.virtual = $.virtual;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGtmDomainDatacenterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGtmDomainDatacenterArgs $;

        public Builder() {
            $ = new GetGtmDomainDatacenterArgs();
        }

        public Builder(GetGtmDomainDatacenterArgs defaults) {
            $ = new GetGtmDomainDatacenterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param city The name of the city where the data center is located.
         * 
         * @return builder
         * 
         */
        public Builder city(Output<String> city) {
            $.city = city;
            return this;
        }

        /**
         * @param city The name of the city where the data center is located.
         * 
         * @return builder
         * 
         */
        public Builder city(String city) {
            return city(Output.of(city));
        }

        /**
         * @param cloneOf Identifies the data center&#39;s ID of which this data center is a clone.
         * 
         * @return builder
         * 
         */
        public Builder cloneOf(Output<Integer> cloneOf) {
            $.cloneOf = cloneOf;
            return this;
        }

        /**
         * @param cloneOf Identifies the data center&#39;s ID of which this data center is a clone.
         * 
         * @return builder
         * 
         */
        public Builder cloneOf(Integer cloneOf) {
            return cloneOf(Output.of(cloneOf));
        }

        /**
         * @param cloudServerHostHeaderOverride Balances load between two or more servers in a cloud environment.
         * 
         * @return builder
         * 
         */
        public Builder cloudServerHostHeaderOverride(Output<Boolean> cloudServerHostHeaderOverride) {
            $.cloudServerHostHeaderOverride = cloudServerHostHeaderOverride;
            return this;
        }

        /**
         * @param cloudServerHostHeaderOverride Balances load between two or more servers in a cloud environment.
         * 
         * @return builder
         * 
         */
        public Builder cloudServerHostHeaderOverride(Boolean cloudServerHostHeaderOverride) {
            return cloudServerHostHeaderOverride(Output.of(cloudServerHostHeaderOverride));
        }

        /**
         * @param cloudServerTargeting Balances load between two or more servers in a cloud environment.
         * 
         * @return builder
         * 
         */
        public Builder cloudServerTargeting(Output<Boolean> cloudServerTargeting) {
            $.cloudServerTargeting = cloudServerTargeting;
            return this;
        }

        /**
         * @param cloudServerTargeting Balances load between two or more servers in a cloud environment.
         * 
         * @return builder
         * 
         */
        public Builder cloudServerTargeting(Boolean cloudServerTargeting) {
            return cloudServerTargeting(Output.of(cloudServerTargeting));
        }

        /**
         * @param continent A two-letter code that specifies the continent where the data center maps to.
         * 
         * @return builder
         * 
         */
        public Builder continent(Output<String> continent) {
            $.continent = continent;
            return this;
        }

        /**
         * @param continent A two-letter code that specifies the continent where the data center maps to.
         * 
         * @return builder
         * 
         */
        public Builder continent(String continent) {
            return continent(Output.of(continent));
        }

        /**
         * @param country A two-letter ISO 3166 country code that specifies the country where the data center is located.
         * 
         * @return builder
         * 
         */
        public Builder country(Output<String> country) {
            $.country = country;
            return this;
        }

        /**
         * @param country A two-letter ISO 3166 country code that specifies the country where the data center is located.
         * 
         * @return builder
         * 
         */
        public Builder country(String country) {
            return country(Output.of(country));
        }

        /**
         * @param datacenterId A unique identifier for an existing data center in the domain.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(Output<Integer> datacenterId) {
            $.datacenterId = datacenterId;
            return this;
        }

        /**
         * @param datacenterId A unique identifier for an existing data center in the domain.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(Integer datacenterId) {
            return datacenterId(Output.of(datacenterId));
        }

        /**
         * @param defaultLoadObjects Specifies the load reporting interface between you and the GTM system.
         * 
         * @return builder
         * 
         */
        public Builder defaultLoadObjects(@Nullable Output<List<GetGtmDomainDatacenterDefaultLoadObjectArgs>> defaultLoadObjects) {
            $.defaultLoadObjects = defaultLoadObjects;
            return this;
        }

        /**
         * @param defaultLoadObjects Specifies the load reporting interface between you and the GTM system.
         * 
         * @return builder
         * 
         */
        public Builder defaultLoadObjects(List<GetGtmDomainDatacenterDefaultLoadObjectArgs> defaultLoadObjects) {
            return defaultLoadObjects(Output.of(defaultLoadObjects));
        }

        /**
         * @param defaultLoadObjects Specifies the load reporting interface between you and the GTM system.
         * 
         * @return builder
         * 
         */
        public Builder defaultLoadObjects(GetGtmDomainDatacenterDefaultLoadObjectArgs... defaultLoadObjects) {
            return defaultLoadObjects(List.of(defaultLoadObjects));
        }

        /**
         * @param latitude Specifies the geographic latitude of the data center&#39;s position.
         * 
         * @return builder
         * 
         */
        public Builder latitude(Output<Double> latitude) {
            $.latitude = latitude;
            return this;
        }

        /**
         * @param latitude Specifies the geographic latitude of the data center&#39;s position.
         * 
         * @return builder
         * 
         */
        public Builder latitude(Double latitude) {
            return latitude(Output.of(latitude));
        }

        /**
         * @param links Provides a URL path that allows direct navigation to a data center.
         * 
         * @return builder
         * 
         */
        public Builder links(@Nullable Output<List<GetGtmDomainDatacenterLinkArgs>> links) {
            $.links = links;
            return this;
        }

        /**
         * @param links Provides a URL path that allows direct navigation to a data center.
         * 
         * @return builder
         * 
         */
        public Builder links(List<GetGtmDomainDatacenterLinkArgs> links) {
            return links(Output.of(links));
        }

        /**
         * @param links Provides a URL path that allows direct navigation to a data center.
         * 
         * @return builder
         * 
         */
        public Builder links(GetGtmDomainDatacenterLinkArgs... links) {
            return links(List.of(links));
        }

        /**
         * @param longitude Specifies the geographic longitude of the data center&#39;s position.
         * 
         * @return builder
         * 
         */
        public Builder longitude(Output<Double> longitude) {
            $.longitude = longitude;
            return this;
        }

        /**
         * @param longitude Specifies the geographic longitude of the data center&#39;s position.
         * 
         * @return builder
         * 
         */
        public Builder longitude(Double longitude) {
            return longitude(Output.of(longitude));
        }

        /**
         * @param nickname A descriptive label for the datacenter.
         * 
         * @return builder
         * 
         */
        public Builder nickname(Output<String> nickname) {
            $.nickname = nickname;
            return this;
        }

        /**
         * @param nickname A descriptive label for the datacenter.
         * 
         * @return builder
         * 
         */
        public Builder nickname(String nickname) {
            return nickname(Output.of(nickname));
        }

        /**
         * @param scorePenalty Influences the score for a datacenter.
         * 
         * @return builder
         * 
         */
        public Builder scorePenalty(Output<Integer> scorePenalty) {
            $.scorePenalty = scorePenalty;
            return this;
        }

        /**
         * @param scorePenalty Influences the score for a datacenter.
         * 
         * @return builder
         * 
         */
        public Builder scorePenalty(Integer scorePenalty) {
            return scorePenalty(Output.of(scorePenalty));
        }

        /**
         * @param serverMonitorPool The name of the pool from which servermonitors are drawn for liveness tests in this datacenter. If omitted (null), the domain-wide default is used. (If no domain-wide default is specified, the pool used is all servermonitors in the same continent as the datacenter.).
         * 
         * @return builder
         * 
         */
        public Builder serverMonitorPool(Output<String> serverMonitorPool) {
            $.serverMonitorPool = serverMonitorPool;
            return this;
        }

        /**
         * @param serverMonitorPool The name of the pool from which servermonitors are drawn for liveness tests in this datacenter. If omitted (null), the domain-wide default is used. (If no domain-wide default is specified, the pool used is all servermonitors in the same continent as the datacenter.).
         * 
         * @return builder
         * 
         */
        public Builder serverMonitorPool(String serverMonitorPool) {
            return serverMonitorPool(Output.of(serverMonitorPool));
        }

        /**
         * @param stateOrProvince Specifies a two-letter ISO 3166 country code for the state of province, where the data center is located.
         * 
         * @return builder
         * 
         */
        public Builder stateOrProvince(Output<String> stateOrProvince) {
            $.stateOrProvince = stateOrProvince;
            return this;
        }

        /**
         * @param stateOrProvince Specifies a two-letter ISO 3166 country code for the state of province, where the data center is located.
         * 
         * @return builder
         * 
         */
        public Builder stateOrProvince(String stateOrProvince) {
            return stateOrProvince(Output.of(stateOrProvince));
        }

        /**
         * @param virtual Indicates whether or not the data center is virtual or physical.
         * 
         * @return builder
         * 
         */
        public Builder virtual(Output<Boolean> virtual) {
            $.virtual = virtual;
            return this;
        }

        /**
         * @param virtual Indicates whether or not the data center is virtual or physical.
         * 
         * @return builder
         * 
         */
        public Builder virtual(Boolean virtual) {
            return virtual(Output.of(virtual));
        }

        public GetGtmDomainDatacenterArgs build() {
            if ($.city == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainDatacenterArgs", "city");
            }
            if ($.cloneOf == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainDatacenterArgs", "cloneOf");
            }
            if ($.cloudServerHostHeaderOverride == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainDatacenterArgs", "cloudServerHostHeaderOverride");
            }
            if ($.cloudServerTargeting == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainDatacenterArgs", "cloudServerTargeting");
            }
            if ($.continent == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainDatacenterArgs", "continent");
            }
            if ($.country == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainDatacenterArgs", "country");
            }
            if ($.datacenterId == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainDatacenterArgs", "datacenterId");
            }
            if ($.latitude == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainDatacenterArgs", "latitude");
            }
            if ($.longitude == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainDatacenterArgs", "longitude");
            }
            if ($.nickname == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainDatacenterArgs", "nickname");
            }
            if ($.scorePenalty == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainDatacenterArgs", "scorePenalty");
            }
            if ($.serverMonitorPool == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainDatacenterArgs", "serverMonitorPool");
            }
            if ($.stateOrProvince == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainDatacenterArgs", "stateOrProvince");
            }
            if ($.virtual == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainDatacenterArgs", "virtual");
            }
            return $;
        }
    }

}
