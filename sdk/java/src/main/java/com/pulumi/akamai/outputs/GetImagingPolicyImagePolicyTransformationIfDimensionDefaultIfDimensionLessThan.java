// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanAppend;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanAspectCrop;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanBackgroundColor;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanBlur;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanChromaKey;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanComposite;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanCompound;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanContrast;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanCrop;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanFaceCrop;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanFeatureCrop;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanFitAndFill;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanGoop;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanGrayscale;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanHsl;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanHsv;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfDimension;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfOrientation;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanImQuery;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanMaxColor;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanMirror;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanMonoHue;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanOpacity;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRegionOfInterestCrop;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRelativeCrop;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRemoveColor;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanResize;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRotate;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanScale;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanShears;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanTrim;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanUnsharpMask;
import com.pulumi.core.annotations.CustomType;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThan {
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanAppend> appends;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanAspectCrop> aspectCrops;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanBackgroundColor> backgroundColors;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanBlur> blurs;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanChromaKey> chromaKeys;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanComposite> composites;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanCompound> compounds;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanContrast> contrasts;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanCrop> crops;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanFaceCrop> faceCrops;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanFeatureCrop> featureCrops;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanFitAndFill> fitAndFills;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanGoop> goops;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanGrayscale> grayscales;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanHsl> hsls;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanHsv> hsvs;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfDimension> ifDimensions;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfOrientation> ifOrientations;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanImQuery> imQueries;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanMaxColor> maxColors;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanMirror> mirrors;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanMonoHue> monoHues;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanOpacity> opacities;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRegionOfInterestCrop> regionOfInterestCrops;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRelativeCrop> relativeCrops;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRemoveColor> removeColors;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanResize> resizes;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRotate> rotates;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanScale> scales;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanShears> shears;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanTrim> trims;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanUnsharpMask> unsharpMasks;

    private GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThan() {}
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanAppend> appends() {
        return this.appends == null ? List.of() : this.appends;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanAspectCrop> aspectCrops() {
        return this.aspectCrops == null ? List.of() : this.aspectCrops;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanBackgroundColor> backgroundColors() {
        return this.backgroundColors == null ? List.of() : this.backgroundColors;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanBlur> blurs() {
        return this.blurs == null ? List.of() : this.blurs;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanChromaKey> chromaKeys() {
        return this.chromaKeys == null ? List.of() : this.chromaKeys;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanComposite> composites() {
        return this.composites == null ? List.of() : this.composites;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanCompound> compounds() {
        return this.compounds == null ? List.of() : this.compounds;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanContrast> contrasts() {
        return this.contrasts == null ? List.of() : this.contrasts;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanCrop> crops() {
        return this.crops == null ? List.of() : this.crops;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanFaceCrop> faceCrops() {
        return this.faceCrops == null ? List.of() : this.faceCrops;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanFeatureCrop> featureCrops() {
        return this.featureCrops == null ? List.of() : this.featureCrops;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanFitAndFill> fitAndFills() {
        return this.fitAndFills == null ? List.of() : this.fitAndFills;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanGoop> goops() {
        return this.goops == null ? List.of() : this.goops;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanGrayscale> grayscales() {
        return this.grayscales == null ? List.of() : this.grayscales;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanHsl> hsls() {
        return this.hsls == null ? List.of() : this.hsls;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanHsv> hsvs() {
        return this.hsvs == null ? List.of() : this.hsvs;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfDimension> ifDimensions() {
        return this.ifDimensions == null ? List.of() : this.ifDimensions;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfOrientation> ifOrientations() {
        return this.ifOrientations == null ? List.of() : this.ifOrientations;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanImQuery> imQueries() {
        return this.imQueries == null ? List.of() : this.imQueries;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanMaxColor> maxColors() {
        return this.maxColors == null ? List.of() : this.maxColors;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanMirror> mirrors() {
        return this.mirrors == null ? List.of() : this.mirrors;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanMonoHue> monoHues() {
        return this.monoHues == null ? List.of() : this.monoHues;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanOpacity> opacities() {
        return this.opacities == null ? List.of() : this.opacities;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRegionOfInterestCrop> regionOfInterestCrops() {
        return this.regionOfInterestCrops == null ? List.of() : this.regionOfInterestCrops;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRelativeCrop> relativeCrops() {
        return this.relativeCrops == null ? List.of() : this.relativeCrops;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRemoveColor> removeColors() {
        return this.removeColors == null ? List.of() : this.removeColors;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanResize> resizes() {
        return this.resizes == null ? List.of() : this.resizes;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRotate> rotates() {
        return this.rotates == null ? List.of() : this.rotates;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanScale> scales() {
        return this.scales == null ? List.of() : this.scales;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanShears> shears() {
        return this.shears == null ? List.of() : this.shears;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanTrim> trims() {
        return this.trims == null ? List.of() : this.trims;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanUnsharpMask> unsharpMasks() {
        return this.unsharpMasks == null ? List.of() : this.unsharpMasks;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThan defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanAppend> appends;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanAspectCrop> aspectCrops;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanBackgroundColor> backgroundColors;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanBlur> blurs;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanChromaKey> chromaKeys;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanComposite> composites;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanCompound> compounds;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanContrast> contrasts;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanCrop> crops;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanFaceCrop> faceCrops;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanFeatureCrop> featureCrops;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanFitAndFill> fitAndFills;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanGoop> goops;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanGrayscale> grayscales;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanHsl> hsls;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanHsv> hsvs;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfDimension> ifDimensions;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfOrientation> ifOrientations;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanImQuery> imQueries;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanMaxColor> maxColors;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanMirror> mirrors;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanMonoHue> monoHues;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanOpacity> opacities;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRegionOfInterestCrop> regionOfInterestCrops;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRelativeCrop> relativeCrops;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRemoveColor> removeColors;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanResize> resizes;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRotate> rotates;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanScale> scales;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanShears> shears;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanTrim> trims;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanUnsharpMask> unsharpMasks;
        public Builder() {}
        public Builder(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThan defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appends = defaults.appends;
    	      this.aspectCrops = defaults.aspectCrops;
    	      this.backgroundColors = defaults.backgroundColors;
    	      this.blurs = defaults.blurs;
    	      this.chromaKeys = defaults.chromaKeys;
    	      this.composites = defaults.composites;
    	      this.compounds = defaults.compounds;
    	      this.contrasts = defaults.contrasts;
    	      this.crops = defaults.crops;
    	      this.faceCrops = defaults.faceCrops;
    	      this.featureCrops = defaults.featureCrops;
    	      this.fitAndFills = defaults.fitAndFills;
    	      this.goops = defaults.goops;
    	      this.grayscales = defaults.grayscales;
    	      this.hsls = defaults.hsls;
    	      this.hsvs = defaults.hsvs;
    	      this.ifDimensions = defaults.ifDimensions;
    	      this.ifOrientations = defaults.ifOrientations;
    	      this.imQueries = defaults.imQueries;
    	      this.maxColors = defaults.maxColors;
    	      this.mirrors = defaults.mirrors;
    	      this.monoHues = defaults.monoHues;
    	      this.opacities = defaults.opacities;
    	      this.regionOfInterestCrops = defaults.regionOfInterestCrops;
    	      this.relativeCrops = defaults.relativeCrops;
    	      this.removeColors = defaults.removeColors;
    	      this.resizes = defaults.resizes;
    	      this.rotates = defaults.rotates;
    	      this.scales = defaults.scales;
    	      this.shears = defaults.shears;
    	      this.trims = defaults.trims;
    	      this.unsharpMasks = defaults.unsharpMasks;
        }

        @CustomType.Setter
        public Builder appends(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanAppend> appends) {
            this.appends = appends;
            return this;
        }
        public Builder appends(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanAppend... appends) {
            return appends(List.of(appends));
        }
        @CustomType.Setter
        public Builder aspectCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanAspectCrop> aspectCrops) {
            this.aspectCrops = aspectCrops;
            return this;
        }
        public Builder aspectCrops(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanAspectCrop... aspectCrops) {
            return aspectCrops(List.of(aspectCrops));
        }
        @CustomType.Setter
        public Builder backgroundColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanBackgroundColor> backgroundColors) {
            this.backgroundColors = backgroundColors;
            return this;
        }
        public Builder backgroundColors(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanBackgroundColor... backgroundColors) {
            return backgroundColors(List.of(backgroundColors));
        }
        @CustomType.Setter
        public Builder blurs(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanBlur> blurs) {
            this.blurs = blurs;
            return this;
        }
        public Builder blurs(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanBlur... blurs) {
            return blurs(List.of(blurs));
        }
        @CustomType.Setter
        public Builder chromaKeys(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanChromaKey> chromaKeys) {
            this.chromaKeys = chromaKeys;
            return this;
        }
        public Builder chromaKeys(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanChromaKey... chromaKeys) {
            return chromaKeys(List.of(chromaKeys));
        }
        @CustomType.Setter
        public Builder composites(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanComposite> composites) {
            this.composites = composites;
            return this;
        }
        public Builder composites(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanComposite... composites) {
            return composites(List.of(composites));
        }
        @CustomType.Setter
        public Builder compounds(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanCompound> compounds) {
            this.compounds = compounds;
            return this;
        }
        public Builder compounds(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanCompound... compounds) {
            return compounds(List.of(compounds));
        }
        @CustomType.Setter
        public Builder contrasts(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanContrast> contrasts) {
            this.contrasts = contrasts;
            return this;
        }
        public Builder contrasts(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanContrast... contrasts) {
            return contrasts(List.of(contrasts));
        }
        @CustomType.Setter
        public Builder crops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanCrop> crops) {
            this.crops = crops;
            return this;
        }
        public Builder crops(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanCrop... crops) {
            return crops(List.of(crops));
        }
        @CustomType.Setter
        public Builder faceCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanFaceCrop> faceCrops) {
            this.faceCrops = faceCrops;
            return this;
        }
        public Builder faceCrops(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanFaceCrop... faceCrops) {
            return faceCrops(List.of(faceCrops));
        }
        @CustomType.Setter
        public Builder featureCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanFeatureCrop> featureCrops) {
            this.featureCrops = featureCrops;
            return this;
        }
        public Builder featureCrops(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanFeatureCrop... featureCrops) {
            return featureCrops(List.of(featureCrops));
        }
        @CustomType.Setter
        public Builder fitAndFills(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanFitAndFill> fitAndFills) {
            this.fitAndFills = fitAndFills;
            return this;
        }
        public Builder fitAndFills(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanFitAndFill... fitAndFills) {
            return fitAndFills(List.of(fitAndFills));
        }
        @CustomType.Setter
        public Builder goops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanGoop> goops) {
            this.goops = goops;
            return this;
        }
        public Builder goops(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanGoop... goops) {
            return goops(List.of(goops));
        }
        @CustomType.Setter
        public Builder grayscales(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanGrayscale> grayscales) {
            this.grayscales = grayscales;
            return this;
        }
        public Builder grayscales(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanGrayscale... grayscales) {
            return grayscales(List.of(grayscales));
        }
        @CustomType.Setter
        public Builder hsls(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanHsl> hsls) {
            this.hsls = hsls;
            return this;
        }
        public Builder hsls(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanHsl... hsls) {
            return hsls(List.of(hsls));
        }
        @CustomType.Setter
        public Builder hsvs(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanHsv> hsvs) {
            this.hsvs = hsvs;
            return this;
        }
        public Builder hsvs(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanHsv... hsvs) {
            return hsvs(List.of(hsvs));
        }
        @CustomType.Setter
        public Builder ifDimensions(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfDimension> ifDimensions) {
            this.ifDimensions = ifDimensions;
            return this;
        }
        public Builder ifDimensions(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfDimension... ifDimensions) {
            return ifDimensions(List.of(ifDimensions));
        }
        @CustomType.Setter
        public Builder ifOrientations(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfOrientation> ifOrientations) {
            this.ifOrientations = ifOrientations;
            return this;
        }
        public Builder ifOrientations(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfOrientation... ifOrientations) {
            return ifOrientations(List.of(ifOrientations));
        }
        @CustomType.Setter
        public Builder imQueries(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanImQuery> imQueries) {
            this.imQueries = imQueries;
            return this;
        }
        public Builder imQueries(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanImQuery... imQueries) {
            return imQueries(List.of(imQueries));
        }
        @CustomType.Setter
        public Builder maxColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanMaxColor> maxColors) {
            this.maxColors = maxColors;
            return this;
        }
        public Builder maxColors(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanMaxColor... maxColors) {
            return maxColors(List.of(maxColors));
        }
        @CustomType.Setter
        public Builder mirrors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanMirror> mirrors) {
            this.mirrors = mirrors;
            return this;
        }
        public Builder mirrors(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanMirror... mirrors) {
            return mirrors(List.of(mirrors));
        }
        @CustomType.Setter
        public Builder monoHues(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanMonoHue> monoHues) {
            this.monoHues = monoHues;
            return this;
        }
        public Builder monoHues(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanMonoHue... monoHues) {
            return monoHues(List.of(monoHues));
        }
        @CustomType.Setter
        public Builder opacities(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanOpacity> opacities) {
            this.opacities = opacities;
            return this;
        }
        public Builder opacities(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanOpacity... opacities) {
            return opacities(List.of(opacities));
        }
        @CustomType.Setter
        public Builder regionOfInterestCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRegionOfInterestCrop> regionOfInterestCrops) {
            this.regionOfInterestCrops = regionOfInterestCrops;
            return this;
        }
        public Builder regionOfInterestCrops(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRegionOfInterestCrop... regionOfInterestCrops) {
            return regionOfInterestCrops(List.of(regionOfInterestCrops));
        }
        @CustomType.Setter
        public Builder relativeCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRelativeCrop> relativeCrops) {
            this.relativeCrops = relativeCrops;
            return this;
        }
        public Builder relativeCrops(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRelativeCrop... relativeCrops) {
            return relativeCrops(List.of(relativeCrops));
        }
        @CustomType.Setter
        public Builder removeColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRemoveColor> removeColors) {
            this.removeColors = removeColors;
            return this;
        }
        public Builder removeColors(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRemoveColor... removeColors) {
            return removeColors(List.of(removeColors));
        }
        @CustomType.Setter
        public Builder resizes(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanResize> resizes) {
            this.resizes = resizes;
            return this;
        }
        public Builder resizes(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanResize... resizes) {
            return resizes(List.of(resizes));
        }
        @CustomType.Setter
        public Builder rotates(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRotate> rotates) {
            this.rotates = rotates;
            return this;
        }
        public Builder rotates(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRotate... rotates) {
            return rotates(List.of(rotates));
        }
        @CustomType.Setter
        public Builder scales(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanScale> scales) {
            this.scales = scales;
            return this;
        }
        public Builder scales(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanScale... scales) {
            return scales(List.of(scales));
        }
        @CustomType.Setter
        public Builder shears(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanShears> shears) {
            this.shears = shears;
            return this;
        }
        public Builder shears(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanShears... shears) {
            return shears(List.of(shears));
        }
        @CustomType.Setter
        public Builder trims(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanTrim> trims) {
            this.trims = trims;
            return this;
        }
        public Builder trims(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanTrim... trims) {
            return trims(List.of(trims));
        }
        @CustomType.Setter
        public Builder unsharpMasks(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanUnsharpMask> unsharpMasks) {
            this.unsharpMasks = unsharpMasks;
            return this;
        }
        public Builder unsharpMasks(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanUnsharpMask... unsharpMasks) {
            return unsharpMasks(List.of(unsharpMasks));
        }
        public GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThan build() {
            final var o = new GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThan();
            o.appends = appends;
            o.aspectCrops = aspectCrops;
            o.backgroundColors = backgroundColors;
            o.blurs = blurs;
            o.chromaKeys = chromaKeys;
            o.composites = composites;
            o.compounds = compounds;
            o.contrasts = contrasts;
            o.crops = crops;
            o.faceCrops = faceCrops;
            o.featureCrops = featureCrops;
            o.fitAndFills = fitAndFills;
            o.goops = goops;
            o.grayscales = grayscales;
            o.hsls = hsls;
            o.hsvs = hsvs;
            o.ifDimensions = ifDimensions;
            o.ifOrientations = ifOrientations;
            o.imQueries = imQueries;
            o.maxColors = maxColors;
            o.mirrors = mirrors;
            o.monoHues = monoHues;
            o.opacities = opacities;
            o.regionOfInterestCrops = regionOfInterestCrops;
            o.relativeCrops = relativeCrops;
            o.removeColors = removeColors;
            o.resizes = resizes;
            o.rotates = rotates;
            o.scales = scales;
            o.shears = shears;
            o.trims = trims;
            o.unsharpMasks = unsharpMasks;
            return o;
        }
    }
}
