// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetPropertyRulesBuilderRulesV20240212BehaviorImageManagerCpCodeOriginal;
import com.pulumi.akamai.inputs.GetPropertyRulesBuilderRulesV20240212BehaviorImageManagerCpCodeTransformed;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyRulesBuilderRulesV20240212BehaviorImageManager extends com.pulumi.resources.InvokeArgs {

    public static final GetPropertyRulesBuilderRulesV20240212BehaviorImageManager Empty = new GetPropertyRulesBuilderRulesV20240212BehaviorImageManager();

    /**
     * Generates a custom `Image and Video Manager API` token to apply a corresponding policy to this set of images. The token consists of a descriptive label (the `policyToken`) concatenated with a property-specific identifier that&#39;s generated when you save the property. The API registers the token when you activate the property.
     * 
     */
    @Import(name="advanced")
    private @Nullable Boolean advanced;

    /**
     * @return Generates a custom `Image and Video Manager API` token to apply a corresponding policy to this set of images. The token consists of a descriptive label (the `policyToken`) concatenated with a property-specific identifier that&#39;s generated when you save the property. The API registers the token when you activate the property.
     * 
     */
    public Optional<Boolean> advanced() {
        return Optional.ofNullable(this.advanced);
    }

    /**
     * This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    @Import(name="apiReferenceTitle")
    private @Nullable String apiReferenceTitle;

    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<String> apiReferenceTitle() {
        return Optional.ofNullable(this.apiReferenceTitle);
    }

    /**
     * Specify whether to convert images to the best file type for the requesting device, based on its user agent and the initial image file. This produces the smallest file size possible that retains image quality.
     * 
     */
    @Import(name="applyBestFileType")
    private @Nullable Boolean applyBestFileType;

    /**
     * @return Specify whether to convert images to the best file type for the requesting device, based on its user agent and the initial image file. This produces the smallest file size possible that retains image quality.
     * 
     */
    public Optional<Boolean> applyBestFileType() {
        return Optional.ofNullable(this.applyBestFileType);
    }

    /**
     * Assigns a CP code to track traffic and billing for original images that the Image and Video Manager has not modified. You only need to provide the initial `id`, stripping any `cpc_` prefix to pass the integer to the rule tree. Additional CP code details may reflect back in subsequent read-only data.
     * 
     */
    @Import(name="cpCodeOriginal")
    private @Nullable GetPropertyRulesBuilderRulesV20240212BehaviorImageManagerCpCodeOriginal cpCodeOriginal;

    /**
     * @return Assigns a CP code to track traffic and billing for original images that the Image and Video Manager has not modified. You only need to provide the initial `id`, stripping any `cpc_` prefix to pass the integer to the rule tree. Additional CP code details may reflect back in subsequent read-only data.
     * 
     */
    public Optional<GetPropertyRulesBuilderRulesV20240212BehaviorImageManagerCpCodeOriginal> cpCodeOriginal() {
        return Optional.ofNullable(this.cpCodeOriginal);
    }

    /**
     * Assigns a separate CP code to track traffic and billing for derived images. You only need to provide the initial `id`, stripping any `cpc_` prefix to pass the integer to the rule tree. Additional CP code details may reflect back in subsequent read-only data.
     * 
     */
    @Import(name="cpCodeTransformed")
    private @Nullable GetPropertyRulesBuilderRulesV20240212BehaviorImageManagerCpCodeTransformed cpCodeTransformed;

    /**
     * @return Assigns a separate CP code to track traffic and billing for derived images. You only need to provide the initial `id`, stripping any `cpc_` prefix to pass the integer to the rule tree. Additional CP code details may reflect back in subsequent read-only data.
     * 
     */
    public Optional<GetPropertyRulesBuilderRulesV20240212BehaviorImageManagerCpCodeTransformed> cpCodeTransformed() {
        return Optional.ofNullable(this.cpCodeTransformed);
    }

    /**
     * Enable image management capabilities and generate a corresponding API token.
     * 
     */
    @Import(name="enabled")
    private @Nullable Boolean enabled;

    /**
     * @return Enable image management capabilities and generate a corresponding API token.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    @Import(name="locked")
    private @Nullable Boolean locked;

    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Boolean> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * Identifies the existing policy set configured with `Image and Video Manager API`.
     * 
     */
    @Import(name="policySet")
    private @Nullable String policySet;

    /**
     * @return Identifies the existing policy set configured with `Image and Video Manager API`.
     * 
     */
    public Optional<String> policySet() {
        return Optional.ofNullable(this.policySet);
    }

    /**
     * Assign a prefix label to help match the policy token to this set of images, limited to 32 alphanumeric or underscore characters. If you don&#39;t specify a label, `default` becomes the prefix.
     * 
     */
    @Import(name="policyToken")
    private @Nullable String policyToken;

    /**
     * @return Assign a prefix label to help match the policy token to this set of images, limited to 32 alphanumeric or underscore characters. If you don&#39;t specify a label, `default` becomes the prefix.
     * 
     */
    public Optional<String> policyToken() {
        return Optional.ofNullable(this.policyToken);
    }

    /**
     * Specify the default policy identifier, which is registered with the `Image and Video Manager API` once you activate this property.  The `advanced` option needs to be inactive.
     * 
     */
    @Import(name="policyTokenDefault")
    private @Nullable String policyTokenDefault;

    /**
     * @return Specify the default policy identifier, which is registered with the `Image and Video Manager API` once you activate this property.  The `advanced` option needs to be inactive.
     * 
     */
    public Optional<String> policyTokenDefault() {
        return Optional.ofNullable(this.policyTokenDefault);
    }

    /**
     * Specify whether to scale down images to the maximum screen resolution, as determined by the rendering device&#39;s user agent.  Note that enabling this may affect screen layout in unexpected ways.
     * 
     */
    @Import(name="resize")
    private @Nullable Boolean resize;

    /**
     * @return Specify whether to scale down images to the maximum screen resolution, as determined by the rendering device&#39;s user agent.  Note that enabling this may affect screen layout in unexpected ways.
     * 
     */
    public Optional<Boolean> resize() {
        return Optional.ofNullable(this.resize);
    }

    /**
     * This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    @Import(name="settingsTitle")
    private @Nullable String settingsTitle;

    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<String> settingsTitle() {
        return Optional.ofNullable(this.settingsTitle);
    }

    /**
     * Specifies a location for your site&#39;s heaviest traffic, for use in caching derivatives on edge servers.
     * 
     */
    @Import(name="superCacheRegion")
    private @Nullable String superCacheRegion;

    /**
     * @return Specifies a location for your site&#39;s heaviest traffic, for use in caching derivatives on edge servers.
     * 
     */
    public Optional<String> superCacheRegion() {
        return Optional.ofNullable(this.superCacheRegion);
    }

    /**
     * This option is for internal usage only.
     * 
     */
    @Import(name="templateUuid")
    private @Nullable String templateUuid;

    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<String> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }

    /**
     * This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    @Import(name="trafficTitle")
    private @Nullable String trafficTitle;

    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<String> trafficTitle() {
        return Optional.ofNullable(this.trafficTitle);
    }

    /**
     * Whether to use a previously created policy set that may be referenced in other properties, or create a new policy set to use with this property. A policy set can be shared across multiple properties belonging to the same contract. The behavior populates any changes to the policy set across all properties that reference that set.
     * 
     */
    @Import(name="useExistingPolicySet")
    private @Nullable Boolean useExistingPolicySet;

    /**
     * @return Whether to use a previously created policy set that may be referenced in other properties, or create a new policy set to use with this property. A policy set can be shared across multiple properties belonging to the same contract. The behavior populates any changes to the policy set across all properties that reference that set.
     * 
     */
    public Optional<Boolean> useExistingPolicySet() {
        return Optional.ofNullable(this.useExistingPolicySet);
    }

    /**
     * A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    @Import(name="uuid")
    private @Nullable String uuid;

    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private GetPropertyRulesBuilderRulesV20240212BehaviorImageManager() {}

    private GetPropertyRulesBuilderRulesV20240212BehaviorImageManager(GetPropertyRulesBuilderRulesV20240212BehaviorImageManager $) {
        this.advanced = $.advanced;
        this.apiReferenceTitle = $.apiReferenceTitle;
        this.applyBestFileType = $.applyBestFileType;
        this.cpCodeOriginal = $.cpCodeOriginal;
        this.cpCodeTransformed = $.cpCodeTransformed;
        this.enabled = $.enabled;
        this.locked = $.locked;
        this.policySet = $.policySet;
        this.policyToken = $.policyToken;
        this.policyTokenDefault = $.policyTokenDefault;
        this.resize = $.resize;
        this.settingsTitle = $.settingsTitle;
        this.superCacheRegion = $.superCacheRegion;
        this.templateUuid = $.templateUuid;
        this.trafficTitle = $.trafficTitle;
        this.useExistingPolicySet = $.useExistingPolicySet;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesBuilderRulesV20240212BehaviorImageManager defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesBuilderRulesV20240212BehaviorImageManager $;

        public Builder() {
            $ = new GetPropertyRulesBuilderRulesV20240212BehaviorImageManager();
        }

        public Builder(GetPropertyRulesBuilderRulesV20240212BehaviorImageManager defaults) {
            $ = new GetPropertyRulesBuilderRulesV20240212BehaviorImageManager(Objects.requireNonNull(defaults));
        }

        /**
         * @param advanced Generates a custom `Image and Video Manager API` token to apply a corresponding policy to this set of images. The token consists of a descriptive label (the `policyToken`) concatenated with a property-specific identifier that&#39;s generated when you save the property. The API registers the token when you activate the property.
         * 
         * @return builder
         * 
         */
        public Builder advanced(@Nullable Boolean advanced) {
            $.advanced = advanced;
            return this;
        }

        /**
         * @param apiReferenceTitle This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder apiReferenceTitle(@Nullable String apiReferenceTitle) {
            $.apiReferenceTitle = apiReferenceTitle;
            return this;
        }

        /**
         * @param applyBestFileType Specify whether to convert images to the best file type for the requesting device, based on its user agent and the initial image file. This produces the smallest file size possible that retains image quality.
         * 
         * @return builder
         * 
         */
        public Builder applyBestFileType(@Nullable Boolean applyBestFileType) {
            $.applyBestFileType = applyBestFileType;
            return this;
        }

        /**
         * @param cpCodeOriginal Assigns a CP code to track traffic and billing for original images that the Image and Video Manager has not modified. You only need to provide the initial `id`, stripping any `cpc_` prefix to pass the integer to the rule tree. Additional CP code details may reflect back in subsequent read-only data.
         * 
         * @return builder
         * 
         */
        public Builder cpCodeOriginal(@Nullable GetPropertyRulesBuilderRulesV20240212BehaviorImageManagerCpCodeOriginal cpCodeOriginal) {
            $.cpCodeOriginal = cpCodeOriginal;
            return this;
        }

        /**
         * @param cpCodeTransformed Assigns a separate CP code to track traffic and billing for derived images. You only need to provide the initial `id`, stripping any `cpc_` prefix to pass the integer to the rule tree. Additional CP code details may reflect back in subsequent read-only data.
         * 
         * @return builder
         * 
         */
        public Builder cpCodeTransformed(@Nullable GetPropertyRulesBuilderRulesV20240212BehaviorImageManagerCpCodeTransformed cpCodeTransformed) {
            $.cpCodeTransformed = cpCodeTransformed;
            return this;
        }

        /**
         * @param enabled Enable image management capabilities and generate a corresponding API token.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(@Nullable Boolean locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param policySet Identifies the existing policy set configured with `Image and Video Manager API`.
         * 
         * @return builder
         * 
         */
        public Builder policySet(@Nullable String policySet) {
            $.policySet = policySet;
            return this;
        }

        /**
         * @param policyToken Assign a prefix label to help match the policy token to this set of images, limited to 32 alphanumeric or underscore characters. If you don&#39;t specify a label, `default` becomes the prefix.
         * 
         * @return builder
         * 
         */
        public Builder policyToken(@Nullable String policyToken) {
            $.policyToken = policyToken;
            return this;
        }

        /**
         * @param policyTokenDefault Specify the default policy identifier, which is registered with the `Image and Video Manager API` once you activate this property.  The `advanced` option needs to be inactive.
         * 
         * @return builder
         * 
         */
        public Builder policyTokenDefault(@Nullable String policyTokenDefault) {
            $.policyTokenDefault = policyTokenDefault;
            return this;
        }

        /**
         * @param resize Specify whether to scale down images to the maximum screen resolution, as determined by the rendering device&#39;s user agent.  Note that enabling this may affect screen layout in unexpected ways.
         * 
         * @return builder
         * 
         */
        public Builder resize(@Nullable Boolean resize) {
            $.resize = resize;
            return this;
        }

        /**
         * @param settingsTitle This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder settingsTitle(@Nullable String settingsTitle) {
            $.settingsTitle = settingsTitle;
            return this;
        }

        /**
         * @param superCacheRegion Specifies a location for your site&#39;s heaviest traffic, for use in caching derivatives on edge servers.
         * 
         * @return builder
         * 
         */
        public Builder superCacheRegion(@Nullable String superCacheRegion) {
            $.superCacheRegion = superCacheRegion;
            return this;
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(@Nullable String templateUuid) {
            $.templateUuid = templateUuid;
            return this;
        }

        /**
         * @param trafficTitle This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder trafficTitle(@Nullable String trafficTitle) {
            $.trafficTitle = trafficTitle;
            return this;
        }

        /**
         * @param useExistingPolicySet Whether to use a previously created policy set that may be referenced in other properties, or create a new policy set to use with this property. A policy set can be shared across multiple properties belonging to the same contract. The behavior populates any changes to the policy set across all properties that reference that set.
         * 
         * @return builder
         * 
         */
        public Builder useExistingPolicySet(@Nullable Boolean useExistingPolicySet) {
            $.useExistingPolicySet = useExistingPolicySet;
            return this;
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable String uuid) {
            $.uuid = uuid;
            return this;
        }

        public GetPropertyRulesBuilderRulesV20240212BehaviorImageManager build() {
            return $;
        }
    }

}
