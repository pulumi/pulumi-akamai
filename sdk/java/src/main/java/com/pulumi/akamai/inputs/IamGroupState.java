// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IamGroupState extends com.pulumi.resources.ResourceArgs {

    public static final IamGroupState Empty = new IamGroupState();

    /**
     * Human readable name for a group.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Human readable name for a group.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Unique identifier for the parent group.
     * 
     */
    @Import(name="parentGroupId")
    private @Nullable Output<Integer> parentGroupId;

    /**
     * @return Unique identifier for the parent group.
     * 
     */
    public Optional<Output<Integer>> parentGroupId() {
        return Optional.ofNullable(this.parentGroupId);
    }

    /**
     * Subgroups IDs.
     * 
     */
    @Import(name="subGroups")
    private @Nullable Output<List<Integer>> subGroups;

    /**
     * @return Subgroups IDs.
     * 
     */
    public Optional<Output<List<Integer>>> subGroups() {
        return Optional.ofNullable(this.subGroups);
    }

    private IamGroupState() {}

    private IamGroupState(IamGroupState $) {
        this.name = $.name;
        this.parentGroupId = $.parentGroupId;
        this.subGroups = $.subGroups;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IamGroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IamGroupState $;

        public Builder() {
            $ = new IamGroupState();
        }

        public Builder(IamGroupState defaults) {
            $ = new IamGroupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Human readable name for a group.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Human readable name for a group.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parentGroupId Unique identifier for the parent group.
         * 
         * @return builder
         * 
         */
        public Builder parentGroupId(@Nullable Output<Integer> parentGroupId) {
            $.parentGroupId = parentGroupId;
            return this;
        }

        /**
         * @param parentGroupId Unique identifier for the parent group.
         * 
         * @return builder
         * 
         */
        public Builder parentGroupId(Integer parentGroupId) {
            return parentGroupId(Output.of(parentGroupId));
        }

        /**
         * @param subGroups Subgroups IDs.
         * 
         * @return builder
         * 
         */
        public Builder subGroups(@Nullable Output<List<Integer>> subGroups) {
            $.subGroups = subGroups;
            return this;
        }

        /**
         * @param subGroups Subgroups IDs.
         * 
         * @return builder
         * 
         */
        public Builder subGroups(List<Integer> subGroups) {
            return subGroups(Output.of(subGroups));
        }

        /**
         * @param subGroups Subgroups IDs.
         * 
         * @return builder
         * 
         */
        public Builder subGroups(Integer... subGroups) {
            return subGroups(List.of(subGroups));
        }

        public IamGroupState build() {
            return $;
        }
    }

}
