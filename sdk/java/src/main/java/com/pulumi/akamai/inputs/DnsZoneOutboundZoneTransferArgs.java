// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.DnsZoneOutboundZoneTransferTsigKeyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DnsZoneOutboundZoneTransferArgs extends com.pulumi.resources.ResourceArgs {

    public static final DnsZoneOutboundZoneTransferArgs Empty = new DnsZoneOutboundZoneTransferArgs();

    /**
     * The access control list, defined as IPv4 and IPv6 CIDR blocks.
     * 
     */
    @Import(name="acls")
    private @Nullable Output<List<String>> acls;

    /**
     * @return The access control list, defined as IPv4 and IPv6 CIDR blocks.
     * 
     */
    public Optional<Output<List<String>>> acls() {
        return Optional.ofNullable(this.acls);
    }

    /**
     * Enables outbound zone transfer.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Enables outbound zone transfer.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Customer secondary nameservers to notify, if NOTIFY requests are desired. Up to 64 IPv4 or IPv6 addresses. If no targets are specified, you can manually request zone transfer updates as needed.
     * 
     */
    @Import(name="notifyTargets")
    private @Nullable Output<List<String>> notifyTargets;

    /**
     * @return Customer secondary nameservers to notify, if NOTIFY requests are desired. Up to 64 IPv4 or IPv6 addresses. If no targets are specified, you can manually request zone transfer updates as needed.
     * 
     */
    public Optional<Output<List<String>>> notifyTargets() {
        return Optional.ofNullable(this.notifyTargets);
    }

    /**
     * The TSIG key used for outbound zone transfers.
     * 
     */
    @Import(name="tsigKey")
    private @Nullable Output<DnsZoneOutboundZoneTransferTsigKeyArgs> tsigKey;

    /**
     * @return The TSIG key used for outbound zone transfers.
     * 
     */
    public Optional<Output<DnsZoneOutboundZoneTransferTsigKeyArgs>> tsigKey() {
        return Optional.ofNullable(this.tsigKey);
    }

    private DnsZoneOutboundZoneTransferArgs() {}

    private DnsZoneOutboundZoneTransferArgs(DnsZoneOutboundZoneTransferArgs $) {
        this.acls = $.acls;
        this.enabled = $.enabled;
        this.notifyTargets = $.notifyTargets;
        this.tsigKey = $.tsigKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DnsZoneOutboundZoneTransferArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DnsZoneOutboundZoneTransferArgs $;

        public Builder() {
            $ = new DnsZoneOutboundZoneTransferArgs();
        }

        public Builder(DnsZoneOutboundZoneTransferArgs defaults) {
            $ = new DnsZoneOutboundZoneTransferArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acls The access control list, defined as IPv4 and IPv6 CIDR blocks.
         * 
         * @return builder
         * 
         */
        public Builder acls(@Nullable Output<List<String>> acls) {
            $.acls = acls;
            return this;
        }

        /**
         * @param acls The access control list, defined as IPv4 and IPv6 CIDR blocks.
         * 
         * @return builder
         * 
         */
        public Builder acls(List<String> acls) {
            return acls(Output.of(acls));
        }

        /**
         * @param acls The access control list, defined as IPv4 and IPv6 CIDR blocks.
         * 
         * @return builder
         * 
         */
        public Builder acls(String... acls) {
            return acls(List.of(acls));
        }

        /**
         * @param enabled Enables outbound zone transfer.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Enables outbound zone transfer.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param notifyTargets Customer secondary nameservers to notify, if NOTIFY requests are desired. Up to 64 IPv4 or IPv6 addresses. If no targets are specified, you can manually request zone transfer updates as needed.
         * 
         * @return builder
         * 
         */
        public Builder notifyTargets(@Nullable Output<List<String>> notifyTargets) {
            $.notifyTargets = notifyTargets;
            return this;
        }

        /**
         * @param notifyTargets Customer secondary nameservers to notify, if NOTIFY requests are desired. Up to 64 IPv4 or IPv6 addresses. If no targets are specified, you can manually request zone transfer updates as needed.
         * 
         * @return builder
         * 
         */
        public Builder notifyTargets(List<String> notifyTargets) {
            return notifyTargets(Output.of(notifyTargets));
        }

        /**
         * @param notifyTargets Customer secondary nameservers to notify, if NOTIFY requests are desired. Up to 64 IPv4 or IPv6 addresses. If no targets are specified, you can manually request zone transfer updates as needed.
         * 
         * @return builder
         * 
         */
        public Builder notifyTargets(String... notifyTargets) {
            return notifyTargets(List.of(notifyTargets));
        }

        /**
         * @param tsigKey The TSIG key used for outbound zone transfers.
         * 
         * @return builder
         * 
         */
        public Builder tsigKey(@Nullable Output<DnsZoneOutboundZoneTransferTsigKeyArgs> tsigKey) {
            $.tsigKey = tsigKey;
            return this;
        }

        /**
         * @param tsigKey The TSIG key used for outbound zone transfers.
         * 
         * @return builder
         * 
         */
        public Builder tsigKey(DnsZoneOutboundZoneTransferTsigKeyArgs tsigKey) {
            return tsigKey(Output.of(tsigKey));
        }

        public DnsZoneOutboundZoneTransferArgs build() {
            return $;
        }
    }

}
