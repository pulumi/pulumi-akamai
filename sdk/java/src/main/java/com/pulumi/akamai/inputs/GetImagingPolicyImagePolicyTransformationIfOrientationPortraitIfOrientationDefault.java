// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultAppend;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultAspectCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultBackgroundColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultBlur;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultChromaKey;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultComposite;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCompound;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultContrast;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFaceCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFeatureCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFitAndFill;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultGoop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultGrayscale;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultHsl;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultHsv;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfDimension;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfOrientation;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultImQuery;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMaxColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMirror;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMonoHue;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultOpacity;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRegionOfInterestCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRelativeCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRemoveColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultResize;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRotate;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultScale;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultShears;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultTrim;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultUnsharpMask;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefault extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefault Empty = new GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefault();

    @Import(name="appends")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultAppend> appends;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultAppend>> appends() {
        return Optional.ofNullable(this.appends);
    }

    @Import(name="aspectCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultAspectCrop> aspectCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultAspectCrop>> aspectCrops() {
        return Optional.ofNullable(this.aspectCrops);
    }

    @Import(name="backgroundColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultBackgroundColor> backgroundColors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultBackgroundColor>> backgroundColors() {
        return Optional.ofNullable(this.backgroundColors);
    }

    @Import(name="blurs")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultBlur> blurs;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultBlur>> blurs() {
        return Optional.ofNullable(this.blurs);
    }

    @Import(name="chromaKeys")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultChromaKey> chromaKeys;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultChromaKey>> chromaKeys() {
        return Optional.ofNullable(this.chromaKeys);
    }

    @Import(name="composites")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultComposite> composites;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultComposite>> composites() {
        return Optional.ofNullable(this.composites);
    }

    @Import(name="compounds")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCompound> compounds;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCompound>> compounds() {
        return Optional.ofNullable(this.compounds);
    }

    @Import(name="contrasts")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultContrast> contrasts;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultContrast>> contrasts() {
        return Optional.ofNullable(this.contrasts);
    }

    @Import(name="crops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCrop> crops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCrop>> crops() {
        return Optional.ofNullable(this.crops);
    }

    @Import(name="faceCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFaceCrop> faceCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFaceCrop>> faceCrops() {
        return Optional.ofNullable(this.faceCrops);
    }

    @Import(name="featureCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFeatureCrop> featureCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFeatureCrop>> featureCrops() {
        return Optional.ofNullable(this.featureCrops);
    }

    @Import(name="fitAndFills")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFitAndFill> fitAndFills;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFitAndFill>> fitAndFills() {
        return Optional.ofNullable(this.fitAndFills);
    }

    @Import(name="goops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultGoop> goops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultGoop>> goops() {
        return Optional.ofNullable(this.goops);
    }

    @Import(name="grayscales")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultGrayscale> grayscales;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultGrayscale>> grayscales() {
        return Optional.ofNullable(this.grayscales);
    }

    @Import(name="hsls")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultHsl> hsls;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultHsl>> hsls() {
        return Optional.ofNullable(this.hsls);
    }

    @Import(name="hsvs")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultHsv> hsvs;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultHsv>> hsvs() {
        return Optional.ofNullable(this.hsvs);
    }

    @Import(name="ifDimensions")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfDimension> ifDimensions;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfDimension>> ifDimensions() {
        return Optional.ofNullable(this.ifDimensions);
    }

    @Import(name="ifOrientations")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfOrientation> ifOrientations;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfOrientation>> ifOrientations() {
        return Optional.ofNullable(this.ifOrientations);
    }

    @Import(name="imQueries")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultImQuery> imQueries;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultImQuery>> imQueries() {
        return Optional.ofNullable(this.imQueries);
    }

    @Import(name="maxColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMaxColor> maxColors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMaxColor>> maxColors() {
        return Optional.ofNullable(this.maxColors);
    }

    @Import(name="mirrors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMirror> mirrors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMirror>> mirrors() {
        return Optional.ofNullable(this.mirrors);
    }

    @Import(name="monoHues")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMonoHue> monoHues;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMonoHue>> monoHues() {
        return Optional.ofNullable(this.monoHues);
    }

    @Import(name="opacities")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultOpacity> opacities;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultOpacity>> opacities() {
        return Optional.ofNullable(this.opacities);
    }

    @Import(name="regionOfInterestCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRegionOfInterestCrop> regionOfInterestCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRegionOfInterestCrop>> regionOfInterestCrops() {
        return Optional.ofNullable(this.regionOfInterestCrops);
    }

    @Import(name="relativeCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRelativeCrop> relativeCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRelativeCrop>> relativeCrops() {
        return Optional.ofNullable(this.relativeCrops);
    }

    @Import(name="removeColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRemoveColor> removeColors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRemoveColor>> removeColors() {
        return Optional.ofNullable(this.removeColors);
    }

    @Import(name="resizes")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultResize> resizes;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultResize>> resizes() {
        return Optional.ofNullable(this.resizes);
    }

    @Import(name="rotates")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRotate> rotates;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRotate>> rotates() {
        return Optional.ofNullable(this.rotates);
    }

    @Import(name="scales")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultScale> scales;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultScale>> scales() {
        return Optional.ofNullable(this.scales);
    }

    @Import(name="shears")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultShears> shears;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultShears>> shears() {
        return Optional.ofNullable(this.shears);
    }

    @Import(name="trims")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultTrim> trims;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultTrim>> trims() {
        return Optional.ofNullable(this.trims);
    }

    @Import(name="unsharpMasks")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultUnsharpMask> unsharpMasks;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultUnsharpMask>> unsharpMasks() {
        return Optional.ofNullable(this.unsharpMasks);
    }

    private GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefault() {}

    private GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefault(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefault $) {
        this.appends = $.appends;
        this.aspectCrops = $.aspectCrops;
        this.backgroundColors = $.backgroundColors;
        this.blurs = $.blurs;
        this.chromaKeys = $.chromaKeys;
        this.composites = $.composites;
        this.compounds = $.compounds;
        this.contrasts = $.contrasts;
        this.crops = $.crops;
        this.faceCrops = $.faceCrops;
        this.featureCrops = $.featureCrops;
        this.fitAndFills = $.fitAndFills;
        this.goops = $.goops;
        this.grayscales = $.grayscales;
        this.hsls = $.hsls;
        this.hsvs = $.hsvs;
        this.ifDimensions = $.ifDimensions;
        this.ifOrientations = $.ifOrientations;
        this.imQueries = $.imQueries;
        this.maxColors = $.maxColors;
        this.mirrors = $.mirrors;
        this.monoHues = $.monoHues;
        this.opacities = $.opacities;
        this.regionOfInterestCrops = $.regionOfInterestCrops;
        this.relativeCrops = $.relativeCrops;
        this.removeColors = $.removeColors;
        this.resizes = $.resizes;
        this.rotates = $.rotates;
        this.scales = $.scales;
        this.shears = $.shears;
        this.trims = $.trims;
        this.unsharpMasks = $.unsharpMasks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefault defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefault $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefault();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefault defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefault(Objects.requireNonNull(defaults));
        }

        public Builder appends(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultAppend> appends) {
            $.appends = appends;
            return this;
        }

        public Builder appends(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultAppend... appends) {
            return appends(List.of(appends));
        }

        public Builder aspectCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultAspectCrop> aspectCrops) {
            $.aspectCrops = aspectCrops;
            return this;
        }

        public Builder aspectCrops(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultAspectCrop... aspectCrops) {
            return aspectCrops(List.of(aspectCrops));
        }

        public Builder backgroundColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultBackgroundColor> backgroundColors) {
            $.backgroundColors = backgroundColors;
            return this;
        }

        public Builder backgroundColors(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultBackgroundColor... backgroundColors) {
            return backgroundColors(List.of(backgroundColors));
        }

        public Builder blurs(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultBlur> blurs) {
            $.blurs = blurs;
            return this;
        }

        public Builder blurs(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultBlur... blurs) {
            return blurs(List.of(blurs));
        }

        public Builder chromaKeys(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultChromaKey> chromaKeys) {
            $.chromaKeys = chromaKeys;
            return this;
        }

        public Builder chromaKeys(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultChromaKey... chromaKeys) {
            return chromaKeys(List.of(chromaKeys));
        }

        public Builder composites(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultComposite> composites) {
            $.composites = composites;
            return this;
        }

        public Builder composites(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultComposite... composites) {
            return composites(List.of(composites));
        }

        public Builder compounds(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCompound> compounds) {
            $.compounds = compounds;
            return this;
        }

        public Builder compounds(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCompound... compounds) {
            return compounds(List.of(compounds));
        }

        public Builder contrasts(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultContrast> contrasts) {
            $.contrasts = contrasts;
            return this;
        }

        public Builder contrasts(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultContrast... contrasts) {
            return contrasts(List.of(contrasts));
        }

        public Builder crops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCrop> crops) {
            $.crops = crops;
            return this;
        }

        public Builder crops(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCrop... crops) {
            return crops(List.of(crops));
        }

        public Builder faceCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFaceCrop> faceCrops) {
            $.faceCrops = faceCrops;
            return this;
        }

        public Builder faceCrops(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFaceCrop... faceCrops) {
            return faceCrops(List.of(faceCrops));
        }

        public Builder featureCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFeatureCrop> featureCrops) {
            $.featureCrops = featureCrops;
            return this;
        }

        public Builder featureCrops(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFeatureCrop... featureCrops) {
            return featureCrops(List.of(featureCrops));
        }

        public Builder fitAndFills(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFitAndFill> fitAndFills) {
            $.fitAndFills = fitAndFills;
            return this;
        }

        public Builder fitAndFills(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFitAndFill... fitAndFills) {
            return fitAndFills(List.of(fitAndFills));
        }

        public Builder goops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultGoop> goops) {
            $.goops = goops;
            return this;
        }

        public Builder goops(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultGoop... goops) {
            return goops(List.of(goops));
        }

        public Builder grayscales(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultGrayscale> grayscales) {
            $.grayscales = grayscales;
            return this;
        }

        public Builder grayscales(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultGrayscale... grayscales) {
            return grayscales(List.of(grayscales));
        }

        public Builder hsls(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultHsl> hsls) {
            $.hsls = hsls;
            return this;
        }

        public Builder hsls(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultHsl... hsls) {
            return hsls(List.of(hsls));
        }

        public Builder hsvs(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultHsv> hsvs) {
            $.hsvs = hsvs;
            return this;
        }

        public Builder hsvs(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultHsv... hsvs) {
            return hsvs(List.of(hsvs));
        }

        public Builder ifDimensions(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfDimension> ifDimensions) {
            $.ifDimensions = ifDimensions;
            return this;
        }

        public Builder ifDimensions(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfDimension... ifDimensions) {
            return ifDimensions(List.of(ifDimensions));
        }

        public Builder ifOrientations(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfOrientation> ifOrientations) {
            $.ifOrientations = ifOrientations;
            return this;
        }

        public Builder ifOrientations(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfOrientation... ifOrientations) {
            return ifOrientations(List.of(ifOrientations));
        }

        public Builder imQueries(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultImQuery> imQueries) {
            $.imQueries = imQueries;
            return this;
        }

        public Builder imQueries(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultImQuery... imQueries) {
            return imQueries(List.of(imQueries));
        }

        public Builder maxColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMaxColor> maxColors) {
            $.maxColors = maxColors;
            return this;
        }

        public Builder maxColors(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMaxColor... maxColors) {
            return maxColors(List.of(maxColors));
        }

        public Builder mirrors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMirror> mirrors) {
            $.mirrors = mirrors;
            return this;
        }

        public Builder mirrors(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMirror... mirrors) {
            return mirrors(List.of(mirrors));
        }

        public Builder monoHues(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMonoHue> monoHues) {
            $.monoHues = monoHues;
            return this;
        }

        public Builder monoHues(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMonoHue... monoHues) {
            return monoHues(List.of(monoHues));
        }

        public Builder opacities(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultOpacity> opacities) {
            $.opacities = opacities;
            return this;
        }

        public Builder opacities(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultOpacity... opacities) {
            return opacities(List.of(opacities));
        }

        public Builder regionOfInterestCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRegionOfInterestCrop> regionOfInterestCrops) {
            $.regionOfInterestCrops = regionOfInterestCrops;
            return this;
        }

        public Builder regionOfInterestCrops(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRegionOfInterestCrop... regionOfInterestCrops) {
            return regionOfInterestCrops(List.of(regionOfInterestCrops));
        }

        public Builder relativeCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRelativeCrop> relativeCrops) {
            $.relativeCrops = relativeCrops;
            return this;
        }

        public Builder relativeCrops(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRelativeCrop... relativeCrops) {
            return relativeCrops(List.of(relativeCrops));
        }

        public Builder removeColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRemoveColor> removeColors) {
            $.removeColors = removeColors;
            return this;
        }

        public Builder removeColors(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRemoveColor... removeColors) {
            return removeColors(List.of(removeColors));
        }

        public Builder resizes(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultResize> resizes) {
            $.resizes = resizes;
            return this;
        }

        public Builder resizes(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultResize... resizes) {
            return resizes(List.of(resizes));
        }

        public Builder rotates(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRotate> rotates) {
            $.rotates = rotates;
            return this;
        }

        public Builder rotates(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRotate... rotates) {
            return rotates(List.of(rotates));
        }

        public Builder scales(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultScale> scales) {
            $.scales = scales;
            return this;
        }

        public Builder scales(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultScale... scales) {
            return scales(List.of(scales));
        }

        public Builder shears(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultShears> shears) {
            $.shears = shears;
            return this;
        }

        public Builder shears(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultShears... shears) {
            return shears(List.of(shears));
        }

        public Builder trims(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultTrim> trims) {
            $.trims = trims;
            return this;
        }

        public Builder trims(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultTrim... trims) {
            return trims(List.of(trims));
        }

        public Builder unsharpMasks(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultUnsharpMask> unsharpMasks) {
            $.unsharpMasks = unsharpMasks;
            return this;
        }

        public Builder unsharpMasks(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultUnsharpMask... unsharpMasks) {
            return unsharpMasks(List.of(unsharpMasks));
        }

        public GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefault build() {
            return $;
        }
    }

}
