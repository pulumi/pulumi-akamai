// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.akamai.outputs.GetCPSEnrollmentNetworkConfigurationClientMutualAuthentication;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCPSEnrollmentNetworkConfiguration {
    /**
     * @return The trust chain configuration used for client mutual authentication
     * 
     */
    private List<GetCPSEnrollmentNetworkConfigurationClientMutualAuthentication> clientMutualAuthentications;
    /**
     * @return Enable CPS to direct traffic using all the SANs listed in the SANs parameter when enrollment is created
     * 
     */
    private Boolean cloneDnsNames;
    /**
     * @return TLS versions which are disallowed
     * 
     */
    private List<String> disallowedTlsVersions;
    /**
     * @return Geography type used for enrollment
     * 
     */
    private String geography;
    /**
     * @return Mandatory Ciphers which are included for enrollment
     * 
     */
    private String mustHaveCiphers;
    /**
     * @return Enable OCSP stapling
     * 
     */
    private String ocspStapling;
    /**
     * @return Preferred Ciphers which are included for enrollment
     * 
     */
    private String preferredCiphers;
    /**
     * @return Enable QUIC protocol
     * 
     */
    private Boolean quicEnabled;

    private GetCPSEnrollmentNetworkConfiguration() {}
    /**
     * @return The trust chain configuration used for client mutual authentication
     * 
     */
    public List<GetCPSEnrollmentNetworkConfigurationClientMutualAuthentication> clientMutualAuthentications() {
        return this.clientMutualAuthentications;
    }
    /**
     * @return Enable CPS to direct traffic using all the SANs listed in the SANs parameter when enrollment is created
     * 
     */
    public Boolean cloneDnsNames() {
        return this.cloneDnsNames;
    }
    /**
     * @return TLS versions which are disallowed
     * 
     */
    public List<String> disallowedTlsVersions() {
        return this.disallowedTlsVersions;
    }
    /**
     * @return Geography type used for enrollment
     * 
     */
    public String geography() {
        return this.geography;
    }
    /**
     * @return Mandatory Ciphers which are included for enrollment
     * 
     */
    public String mustHaveCiphers() {
        return this.mustHaveCiphers;
    }
    /**
     * @return Enable OCSP stapling
     * 
     */
    public String ocspStapling() {
        return this.ocspStapling;
    }
    /**
     * @return Preferred Ciphers which are included for enrollment
     * 
     */
    public String preferredCiphers() {
        return this.preferredCiphers;
    }
    /**
     * @return Enable QUIC protocol
     * 
     */
    public Boolean quicEnabled() {
        return this.quicEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCPSEnrollmentNetworkConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetCPSEnrollmentNetworkConfigurationClientMutualAuthentication> clientMutualAuthentications;
        private Boolean cloneDnsNames;
        private List<String> disallowedTlsVersions;
        private String geography;
        private String mustHaveCiphers;
        private String ocspStapling;
        private String preferredCiphers;
        private Boolean quicEnabled;
        public Builder() {}
        public Builder(GetCPSEnrollmentNetworkConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientMutualAuthentications = defaults.clientMutualAuthentications;
    	      this.cloneDnsNames = defaults.cloneDnsNames;
    	      this.disallowedTlsVersions = defaults.disallowedTlsVersions;
    	      this.geography = defaults.geography;
    	      this.mustHaveCiphers = defaults.mustHaveCiphers;
    	      this.ocspStapling = defaults.ocspStapling;
    	      this.preferredCiphers = defaults.preferredCiphers;
    	      this.quicEnabled = defaults.quicEnabled;
        }

        @CustomType.Setter
        public Builder clientMutualAuthentications(List<GetCPSEnrollmentNetworkConfigurationClientMutualAuthentication> clientMutualAuthentications) {
            if (clientMutualAuthentications == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentNetworkConfiguration", "clientMutualAuthentications");
            }
            this.clientMutualAuthentications = clientMutualAuthentications;
            return this;
        }
        public Builder clientMutualAuthentications(GetCPSEnrollmentNetworkConfigurationClientMutualAuthentication... clientMutualAuthentications) {
            return clientMutualAuthentications(List.of(clientMutualAuthentications));
        }
        @CustomType.Setter
        public Builder cloneDnsNames(Boolean cloneDnsNames) {
            if (cloneDnsNames == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentNetworkConfiguration", "cloneDnsNames");
            }
            this.cloneDnsNames = cloneDnsNames;
            return this;
        }
        @CustomType.Setter
        public Builder disallowedTlsVersions(List<String> disallowedTlsVersions) {
            if (disallowedTlsVersions == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentNetworkConfiguration", "disallowedTlsVersions");
            }
            this.disallowedTlsVersions = disallowedTlsVersions;
            return this;
        }
        public Builder disallowedTlsVersions(String... disallowedTlsVersions) {
            return disallowedTlsVersions(List.of(disallowedTlsVersions));
        }
        @CustomType.Setter
        public Builder geography(String geography) {
            if (geography == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentNetworkConfiguration", "geography");
            }
            this.geography = geography;
            return this;
        }
        @CustomType.Setter
        public Builder mustHaveCiphers(String mustHaveCiphers) {
            if (mustHaveCiphers == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentNetworkConfiguration", "mustHaveCiphers");
            }
            this.mustHaveCiphers = mustHaveCiphers;
            return this;
        }
        @CustomType.Setter
        public Builder ocspStapling(String ocspStapling) {
            if (ocspStapling == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentNetworkConfiguration", "ocspStapling");
            }
            this.ocspStapling = ocspStapling;
            return this;
        }
        @CustomType.Setter
        public Builder preferredCiphers(String preferredCiphers) {
            if (preferredCiphers == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentNetworkConfiguration", "preferredCiphers");
            }
            this.preferredCiphers = preferredCiphers;
            return this;
        }
        @CustomType.Setter
        public Builder quicEnabled(Boolean quicEnabled) {
            if (quicEnabled == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentNetworkConfiguration", "quicEnabled");
            }
            this.quicEnabled = quicEnabled;
            return this;
        }
        public GetCPSEnrollmentNetworkConfiguration build() {
            final var _resultValue = new GetCPSEnrollmentNetworkConfiguration();
            _resultValue.clientMutualAuthentications = clientMutualAuthentications;
            _resultValue.cloneDnsNames = cloneDnsNames;
            _resultValue.disallowedTlsVersions = disallowedTlsVersions;
            _resultValue.geography = geography;
            _resultValue.mustHaveCiphers = mustHaveCiphers;
            _resultValue.ocspStapling = ocspStapling;
            _resultValue.preferredCiphers = preferredCiphers;
            _resultValue.quicEnabled = quicEnabled;
            return _resultValue;
        }
    }
}
