// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationFaceCrop extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyTransformationFaceCrop Empty = new GetImagingPolicyImagePolicyTransformationFaceCrop();

    /**
     * Specifies the type of algorithm used to detect faces in the image, either `cascade` for the cascade classifier algorithm or `dnn` for the deep neural network algorithm, `cascade` by default.
     * 
     */
    @Import(name="algorithm")
    private @Nullable String algorithm;

    /**
     * @return Specifies the type of algorithm used to detect faces in the image, either `cascade` for the cascade classifier algorithm or `dnn` for the deep neural network algorithm, `cascade` by default.
     * 
     */
    public Optional<String> algorithm() {
        return Optional.ofNullable(this.algorithm);
    }

    /**
     * Specifies the type of algorithm used to detect faces in the image, either `cascade` for the cascade classifier algorithm or `dnn` for the deep neural network algorithm, `cascade` by default.
     * 
     */
    @Import(name="algorithmVar")
    private @Nullable String algorithmVar;

    /**
     * @return Specifies the type of algorithm used to detect faces in the image, either `cascade` for the cascade classifier algorithm or `dnn` for the deep neural network algorithm, `cascade` by default.
     * 
     */
    public Optional<String> algorithmVar() {
        return Optional.ofNullable(this.algorithmVar);
    }

    /**
     * With `algorithm` set to `dnn`, specifies the minimum confidence needed to detect faces in the image. Values range from `0` to `1` for increased confidence, and possibly fewer faces detected.
     * 
     */
    @Import(name="confidence")
    private @Nullable String confidence;

    /**
     * @return With `algorithm` set to `dnn`, specifies the minimum confidence needed to detect faces in the image. Values range from `0` to `1` for increased confidence, and possibly fewer faces detected.
     * 
     */
    public Optional<String> confidence() {
        return Optional.ofNullable(this.confidence);
    }

    /**
     * With `algorithm` set to `dnn`, specifies the minimum confidence needed to detect faces in the image. Values range from `0` to `1` for increased confidence, and possibly fewer faces detected.
     * 
     */
    @Import(name="confidenceVar")
    private @Nullable String confidenceVar;

    /**
     * @return With `algorithm` set to `dnn`, specifies the minimum confidence needed to detect faces in the image. Values range from `0` to `1` for increased confidence, and possibly fewer faces detected.
     * 
     */
    public Optional<String> confidenceVar() {
        return Optional.ofNullable(this.confidenceVar);
    }

    /**
     * Controls placement of the crop if Image and Video Manager does not detect any faces in the image. Directions are relative to the edges of the image being transformed.
     * 
     */
    @Import(name="failGravity")
    private @Nullable String failGravity;

    /**
     * @return Controls placement of the crop if Image and Video Manager does not detect any faces in the image. Directions are relative to the edges of the image being transformed.
     * 
     */
    public Optional<String> failGravity() {
        return Optional.ofNullable(this.failGravity);
    }

    /**
     * Controls placement of the crop if Image and Video Manager does not detect any faces in the image. Directions are relative to the edges of the image being transformed.
     * 
     */
    @Import(name="failGravityVar")
    private @Nullable String failGravityVar;

    /**
     * @return Controls placement of the crop if Image and Video Manager does not detect any faces in the image. Directions are relative to the edges of the image being transformed.
     * 
     */
    public Optional<String> failGravityVar() {
        return Optional.ofNullable(this.failGravityVar);
    }

    /**
     * Distinguishes the faces detected, either `biggestFace` or `allFaces` to place the crop rectangle around the full set of faces, `all` by default.
     * 
     */
    @Import(name="focus")
    private @Nullable String focus;

    /**
     * @return Distinguishes the faces detected, either `biggestFace` or `allFaces` to place the crop rectangle around the full set of faces, `all` by default.
     * 
     */
    public Optional<String> focus() {
        return Optional.ofNullable(this.focus);
    }

    /**
     * Distinguishes the faces detected, either `biggestFace` or `allFaces` to place the crop rectangle around the full set of faces, `all` by default.
     * 
     */
    @Import(name="focusVar")
    private @Nullable String focusVar;

    /**
     * @return Distinguishes the faces detected, either `biggestFace` or `allFaces` to place the crop rectangle around the full set of faces, `all` by default.
     * 
     */
    public Optional<String> focusVar() {
        return Optional.ofNullable(this.focusVar);
    }

    /**
     * Controls placement of the crop. Directions are relative to the face(s) plus padding.
     * 
     */
    @Import(name="gravity")
    private @Nullable String gravity;

    /**
     * @return Controls placement of the crop. Directions are relative to the face(s) plus padding.
     * 
     */
    public Optional<String> gravity() {
        return Optional.ofNullable(this.gravity);
    }

    /**
     * Controls placement of the crop. Directions are relative to the face(s) plus padding.
     * 
     */
    @Import(name="gravityVar")
    private @Nullable String gravityVar;

    /**
     * @return Controls placement of the crop. Directions are relative to the face(s) plus padding.
     * 
     */
    public Optional<String> gravityVar() {
        return Optional.ofNullable(this.gravityVar);
    }

    /**
     * The height of the output image in pixels relative to the specified `style` value.
     * 
     */
    @Import(name="height")
    private @Nullable String height;

    /**
     * @return The height of the output image in pixels relative to the specified `style` value.
     * 
     */
    public Optional<String> height() {
        return Optional.ofNullable(this.height);
    }

    /**
     * The height of the output image in pixels relative to the specified `style` value.
     * 
     */
    @Import(name="heightVar")
    private @Nullable String heightVar;

    /**
     * @return The height of the output image in pixels relative to the specified `style` value.
     * 
     */
    public Optional<String> heightVar() {
        return Optional.ofNullable(this.heightVar);
    }

    /**
     * The padding ratio based on the dimensions of the biggest face detected, `0.5` by default. Larger values increase padding.
     * 
     */
    @Import(name="padding")
    private @Nullable String padding;

    /**
     * @return The padding ratio based on the dimensions of the biggest face detected, `0.5` by default. Larger values increase padding.
     * 
     */
    public Optional<String> padding() {
        return Optional.ofNullable(this.padding);
    }

    /**
     * The padding ratio based on the dimensions of the biggest face detected, `0.5` by default. Larger values increase padding.
     * 
     */
    @Import(name="paddingVar")
    private @Nullable String paddingVar;

    /**
     * @return The padding ratio based on the dimensions of the biggest face detected, `0.5` by default. Larger values increase padding.
     * 
     */
    public Optional<String> paddingVar() {
        return Optional.ofNullable(this.paddingVar);
    }

    /**
     * Specifies how to crop or scale a crop area for the faces detected in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places a raw crop around the faces, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and faces as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the faces, relative to the specified `width` and `height` values. Allows Variable substitution.
     * 
     */
    @Import(name="style")
    private @Nullable String style;

    /**
     * @return Specifies how to crop or scale a crop area for the faces detected in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places a raw crop around the faces, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and faces as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the faces, relative to the specified `width` and `height` values. Allows Variable substitution.
     * 
     */
    public Optional<String> style() {
        return Optional.ofNullable(this.style);
    }

    /**
     * Specifies how to crop or scale a crop area for the faces detected in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places a raw crop around the faces, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and faces as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the faces, relative to the specified `width` and `height` values. Allows Variable substitution.
     * 
     */
    @Import(name="styleVar")
    private @Nullable String styleVar;

    /**
     * @return Specifies how to crop or scale a crop area for the faces detected in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places a raw crop around the faces, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and faces as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the faces, relative to the specified `width` and `height` values. Allows Variable substitution.
     * 
     */
    public Optional<String> styleVar() {
        return Optional.ofNullable(this.styleVar);
    }

    /**
     * The width of the output image in pixels relative to the specified `style` value.
     * 
     */
    @Import(name="width")
    private @Nullable String width;

    /**
     * @return The width of the output image in pixels relative to the specified `style` value.
     * 
     */
    public Optional<String> width() {
        return Optional.ofNullable(this.width);
    }

    /**
     * The width of the output image in pixels relative to the specified `style` value.
     * 
     */
    @Import(name="widthVar")
    private @Nullable String widthVar;

    /**
     * @return The width of the output image in pixels relative to the specified `style` value.
     * 
     */
    public Optional<String> widthVar() {
        return Optional.ofNullable(this.widthVar);
    }

    private GetImagingPolicyImagePolicyTransformationFaceCrop() {}

    private GetImagingPolicyImagePolicyTransformationFaceCrop(GetImagingPolicyImagePolicyTransformationFaceCrop $) {
        this.algorithm = $.algorithm;
        this.algorithmVar = $.algorithmVar;
        this.confidence = $.confidence;
        this.confidenceVar = $.confidenceVar;
        this.failGravity = $.failGravity;
        this.failGravityVar = $.failGravityVar;
        this.focus = $.focus;
        this.focusVar = $.focusVar;
        this.gravity = $.gravity;
        this.gravityVar = $.gravityVar;
        this.height = $.height;
        this.heightVar = $.heightVar;
        this.padding = $.padding;
        this.paddingVar = $.paddingVar;
        this.style = $.style;
        this.styleVar = $.styleVar;
        this.width = $.width;
        this.widthVar = $.widthVar;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationFaceCrop defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationFaceCrop $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationFaceCrop();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationFaceCrop defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationFaceCrop(Objects.requireNonNull(defaults));
        }

        /**
         * @param algorithm Specifies the type of algorithm used to detect faces in the image, either `cascade` for the cascade classifier algorithm or `dnn` for the deep neural network algorithm, `cascade` by default.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(@Nullable String algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        /**
         * @param algorithmVar Specifies the type of algorithm used to detect faces in the image, either `cascade` for the cascade classifier algorithm or `dnn` for the deep neural network algorithm, `cascade` by default.
         * 
         * @return builder
         * 
         */
        public Builder algorithmVar(@Nullable String algorithmVar) {
            $.algorithmVar = algorithmVar;
            return this;
        }

        /**
         * @param confidence With `algorithm` set to `dnn`, specifies the minimum confidence needed to detect faces in the image. Values range from `0` to `1` for increased confidence, and possibly fewer faces detected.
         * 
         * @return builder
         * 
         */
        public Builder confidence(@Nullable String confidence) {
            $.confidence = confidence;
            return this;
        }

        /**
         * @param confidenceVar With `algorithm` set to `dnn`, specifies the minimum confidence needed to detect faces in the image. Values range from `0` to `1` for increased confidence, and possibly fewer faces detected.
         * 
         * @return builder
         * 
         */
        public Builder confidenceVar(@Nullable String confidenceVar) {
            $.confidenceVar = confidenceVar;
            return this;
        }

        /**
         * @param failGravity Controls placement of the crop if Image and Video Manager does not detect any faces in the image. Directions are relative to the edges of the image being transformed.
         * 
         * @return builder
         * 
         */
        public Builder failGravity(@Nullable String failGravity) {
            $.failGravity = failGravity;
            return this;
        }

        /**
         * @param failGravityVar Controls placement of the crop if Image and Video Manager does not detect any faces in the image. Directions are relative to the edges of the image being transformed.
         * 
         * @return builder
         * 
         */
        public Builder failGravityVar(@Nullable String failGravityVar) {
            $.failGravityVar = failGravityVar;
            return this;
        }

        /**
         * @param focus Distinguishes the faces detected, either `biggestFace` or `allFaces` to place the crop rectangle around the full set of faces, `all` by default.
         * 
         * @return builder
         * 
         */
        public Builder focus(@Nullable String focus) {
            $.focus = focus;
            return this;
        }

        /**
         * @param focusVar Distinguishes the faces detected, either `biggestFace` or `allFaces` to place the crop rectangle around the full set of faces, `all` by default.
         * 
         * @return builder
         * 
         */
        public Builder focusVar(@Nullable String focusVar) {
            $.focusVar = focusVar;
            return this;
        }

        /**
         * @param gravity Controls placement of the crop. Directions are relative to the face(s) plus padding.
         * 
         * @return builder
         * 
         */
        public Builder gravity(@Nullable String gravity) {
            $.gravity = gravity;
            return this;
        }

        /**
         * @param gravityVar Controls placement of the crop. Directions are relative to the face(s) plus padding.
         * 
         * @return builder
         * 
         */
        public Builder gravityVar(@Nullable String gravityVar) {
            $.gravityVar = gravityVar;
            return this;
        }

        /**
         * @param height The height of the output image in pixels relative to the specified `style` value.
         * 
         * @return builder
         * 
         */
        public Builder height(@Nullable String height) {
            $.height = height;
            return this;
        }

        /**
         * @param heightVar The height of the output image in pixels relative to the specified `style` value.
         * 
         * @return builder
         * 
         */
        public Builder heightVar(@Nullable String heightVar) {
            $.heightVar = heightVar;
            return this;
        }

        /**
         * @param padding The padding ratio based on the dimensions of the biggest face detected, `0.5` by default. Larger values increase padding.
         * 
         * @return builder
         * 
         */
        public Builder padding(@Nullable String padding) {
            $.padding = padding;
            return this;
        }

        /**
         * @param paddingVar The padding ratio based on the dimensions of the biggest face detected, `0.5` by default. Larger values increase padding.
         * 
         * @return builder
         * 
         */
        public Builder paddingVar(@Nullable String paddingVar) {
            $.paddingVar = paddingVar;
            return this;
        }

        /**
         * @param style Specifies how to crop or scale a crop area for the faces detected in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places a raw crop around the faces, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and faces as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the faces, relative to the specified `width` and `height` values. Allows Variable substitution.
         * 
         * @return builder
         * 
         */
        public Builder style(@Nullable String style) {
            $.style = style;
            return this;
        }

        /**
         * @param styleVar Specifies how to crop or scale a crop area for the faces detected in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places a raw crop around the faces, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and faces as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the faces, relative to the specified `width` and `height` values. Allows Variable substitution.
         * 
         * @return builder
         * 
         */
        public Builder styleVar(@Nullable String styleVar) {
            $.styleVar = styleVar;
            return this;
        }

        /**
         * @param width The width of the output image in pixels relative to the specified `style` value.
         * 
         * @return builder
         * 
         */
        public Builder width(@Nullable String width) {
            $.width = width;
            return this;
        }

        /**
         * @param widthVar The width of the output image in pixels relative to the specified `style` value.
         * 
         * @return builder
         * 
         */
        public Builder widthVar(@Nullable String widthVar) {
            $.widthVar = widthVar;
            return this;
        }

        public GetImagingPolicyImagePolicyTransformationFaceCrop build() {
            return $;
        }
    }

}
