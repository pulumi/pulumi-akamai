// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppsecAdvancedSettingsAttackPayloadLoggingArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppsecAdvancedSettingsAttackPayloadLoggingArgs Empty = new AppsecAdvancedSettingsAttackPayloadLoggingArgs();

    /**
     * Whether to enable, disable, or update attack payload logging settings
     * 
     */
    @Import(name="attackPayloadLogging", required=true)
    private Output<String> attackPayloadLogging;

    /**
     * @return Whether to enable, disable, or update attack payload logging settings
     * 
     */
    public Output<String> attackPayloadLogging() {
        return this.attackPayloadLogging;
    }

    /**
     * Unique identifier of the security configuration
     * 
     */
    @Import(name="configId", required=true)
    private Output<Integer> configId;

    /**
     * @return Unique identifier of the security configuration
     * 
     */
    public Output<Integer> configId() {
        return this.configId;
    }

    /**
     * Unique identifier of the security policy
     * 
     */
    @Import(name="securityPolicyId")
    private @Nullable Output<String> securityPolicyId;

    /**
     * @return Unique identifier of the security policy
     * 
     */
    public Optional<Output<String>> securityPolicyId() {
        return Optional.ofNullable(this.securityPolicyId);
    }

    private AppsecAdvancedSettingsAttackPayloadLoggingArgs() {}

    private AppsecAdvancedSettingsAttackPayloadLoggingArgs(AppsecAdvancedSettingsAttackPayloadLoggingArgs $) {
        this.attackPayloadLogging = $.attackPayloadLogging;
        this.configId = $.configId;
        this.securityPolicyId = $.securityPolicyId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppsecAdvancedSettingsAttackPayloadLoggingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppsecAdvancedSettingsAttackPayloadLoggingArgs $;

        public Builder() {
            $ = new AppsecAdvancedSettingsAttackPayloadLoggingArgs();
        }

        public Builder(AppsecAdvancedSettingsAttackPayloadLoggingArgs defaults) {
            $ = new AppsecAdvancedSettingsAttackPayloadLoggingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attackPayloadLogging Whether to enable, disable, or update attack payload logging settings
         * 
         * @return builder
         * 
         */
        public Builder attackPayloadLogging(Output<String> attackPayloadLogging) {
            $.attackPayloadLogging = attackPayloadLogging;
            return this;
        }

        /**
         * @param attackPayloadLogging Whether to enable, disable, or update attack payload logging settings
         * 
         * @return builder
         * 
         */
        public Builder attackPayloadLogging(String attackPayloadLogging) {
            return attackPayloadLogging(Output.of(attackPayloadLogging));
        }

        /**
         * @param configId Unique identifier of the security configuration
         * 
         * @return builder
         * 
         */
        public Builder configId(Output<Integer> configId) {
            $.configId = configId;
            return this;
        }

        /**
         * @param configId Unique identifier of the security configuration
         * 
         * @return builder
         * 
         */
        public Builder configId(Integer configId) {
            return configId(Output.of(configId));
        }

        /**
         * @param securityPolicyId Unique identifier of the security policy
         * 
         * @return builder
         * 
         */
        public Builder securityPolicyId(@Nullable Output<String> securityPolicyId) {
            $.securityPolicyId = securityPolicyId;
            return this;
        }

        /**
         * @param securityPolicyId Unique identifier of the security policy
         * 
         * @return builder
         * 
         */
        public Builder securityPolicyId(String securityPolicyId) {
            return securityPolicyId(Output.of(securityPolicyId));
        }

        public AppsecAdvancedSettingsAttackPayloadLoggingArgs build() {
            if ($.attackPayloadLogging == null) {
                throw new MissingRequiredPropertyException("AppsecAdvancedSettingsAttackPayloadLoggingArgs", "attackPayloadLogging");
            }
            if ($.configId == null) {
                throw new MissingRequiredPropertyException("AppsecAdvancedSettingsAttackPayloadLoggingArgs", "configId");
            }
            return $;
        }
    }

}
