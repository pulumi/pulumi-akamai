// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai;

import com.pulumi.akamai.inputs.MtlskeystoreClientCertificateUploadTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MtlskeystoreClientCertificateUploadArgs extends com.pulumi.resources.ResourceArgs {

    public static final MtlskeystoreClientCertificateUploadArgs Empty = new MtlskeystoreClientCertificateUploadArgs();

    /**
     * If set to true, all warnings will be acknowledged automatically. Defaults to `false`.
     * 
     */
    @Import(name="autoAcknowledgeWarnings")
    private @Nullable Output<Boolean> autoAcknowledgeWarnings;

    /**
     * @return If set to true, all warnings will be acknowledged automatically. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> autoAcknowledgeWarnings() {
        return Optional.ofNullable(this.autoAcknowledgeWarnings);
    }

    /**
     * The ID of the client certificate to which the signed certificate will be uploaded.
     * 
     */
    @Import(name="clientCertificateId", required=true)
    private Output<Integer> clientCertificateId;

    /**
     * @return The ID of the client certificate to which the signed certificate will be uploaded.
     * 
     */
    public Output<Integer> clientCertificateId() {
        return this.clientCertificateId;
    }

    /**
     * The signed certificate to upload.
     * 
     */
    @Import(name="signedCertificate", required=true)
    private Output<String> signedCertificate;

    /**
     * @return The signed certificate to upload.
     * 
     */
    public Output<String> signedCertificate() {
        return this.signedCertificate;
    }

    @Import(name="timeouts")
    private @Nullable Output<MtlskeystoreClientCertificateUploadTimeoutsArgs> timeouts;

    public Optional<Output<MtlskeystoreClientCertificateUploadTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * The optional trust chain associated with the signed certificate.
     * 
     */
    @Import(name="trustChain")
    private @Nullable Output<String> trustChain;

    /**
     * @return The optional trust chain associated with the signed certificate.
     * 
     */
    public Optional<Output<String>> trustChain() {
        return Optional.ofNullable(this.trustChain);
    }

    /**
     * The version number of the client certificate to upload the signed certificate to.
     * 
     */
    @Import(name="versionNumber", required=true)
    private Output<Integer> versionNumber;

    /**
     * @return The version number of the client certificate to upload the signed certificate to.
     * 
     */
    public Output<Integer> versionNumber() {
        return this.versionNumber;
    }

    /**
     * Indicates whether to wait for the deployment of the uploaded certificate. Defaults to `true`.
     * 
     */
    @Import(name="waitForDeployment")
    private @Nullable Output<Boolean> waitForDeployment;

    /**
     * @return Indicates whether to wait for the deployment of the uploaded certificate. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> waitForDeployment() {
        return Optional.ofNullable(this.waitForDeployment);
    }

    private MtlskeystoreClientCertificateUploadArgs() {}

    private MtlskeystoreClientCertificateUploadArgs(MtlskeystoreClientCertificateUploadArgs $) {
        this.autoAcknowledgeWarnings = $.autoAcknowledgeWarnings;
        this.clientCertificateId = $.clientCertificateId;
        this.signedCertificate = $.signedCertificate;
        this.timeouts = $.timeouts;
        this.trustChain = $.trustChain;
        this.versionNumber = $.versionNumber;
        this.waitForDeployment = $.waitForDeployment;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MtlskeystoreClientCertificateUploadArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MtlskeystoreClientCertificateUploadArgs $;

        public Builder() {
            $ = new MtlskeystoreClientCertificateUploadArgs();
        }

        public Builder(MtlskeystoreClientCertificateUploadArgs defaults) {
            $ = new MtlskeystoreClientCertificateUploadArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoAcknowledgeWarnings If set to true, all warnings will be acknowledged automatically. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder autoAcknowledgeWarnings(@Nullable Output<Boolean> autoAcknowledgeWarnings) {
            $.autoAcknowledgeWarnings = autoAcknowledgeWarnings;
            return this;
        }

        /**
         * @param autoAcknowledgeWarnings If set to true, all warnings will be acknowledged automatically. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder autoAcknowledgeWarnings(Boolean autoAcknowledgeWarnings) {
            return autoAcknowledgeWarnings(Output.of(autoAcknowledgeWarnings));
        }

        /**
         * @param clientCertificateId The ID of the client certificate to which the signed certificate will be uploaded.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificateId(Output<Integer> clientCertificateId) {
            $.clientCertificateId = clientCertificateId;
            return this;
        }

        /**
         * @param clientCertificateId The ID of the client certificate to which the signed certificate will be uploaded.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificateId(Integer clientCertificateId) {
            return clientCertificateId(Output.of(clientCertificateId));
        }

        /**
         * @param signedCertificate The signed certificate to upload.
         * 
         * @return builder
         * 
         */
        public Builder signedCertificate(Output<String> signedCertificate) {
            $.signedCertificate = signedCertificate;
            return this;
        }

        /**
         * @param signedCertificate The signed certificate to upload.
         * 
         * @return builder
         * 
         */
        public Builder signedCertificate(String signedCertificate) {
            return signedCertificate(Output.of(signedCertificate));
        }

        public Builder timeouts(@Nullable Output<MtlskeystoreClientCertificateUploadTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(MtlskeystoreClientCertificateUploadTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param trustChain The optional trust chain associated with the signed certificate.
         * 
         * @return builder
         * 
         */
        public Builder trustChain(@Nullable Output<String> trustChain) {
            $.trustChain = trustChain;
            return this;
        }

        /**
         * @param trustChain The optional trust chain associated with the signed certificate.
         * 
         * @return builder
         * 
         */
        public Builder trustChain(String trustChain) {
            return trustChain(Output.of(trustChain));
        }

        /**
         * @param versionNumber The version number of the client certificate to upload the signed certificate to.
         * 
         * @return builder
         * 
         */
        public Builder versionNumber(Output<Integer> versionNumber) {
            $.versionNumber = versionNumber;
            return this;
        }

        /**
         * @param versionNumber The version number of the client certificate to upload the signed certificate to.
         * 
         * @return builder
         * 
         */
        public Builder versionNumber(Integer versionNumber) {
            return versionNumber(Output.of(versionNumber));
        }

        /**
         * @param waitForDeployment Indicates whether to wait for the deployment of the uploaded certificate. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder waitForDeployment(@Nullable Output<Boolean> waitForDeployment) {
            $.waitForDeployment = waitForDeployment;
            return this;
        }

        /**
         * @param waitForDeployment Indicates whether to wait for the deployment of the uploaded certificate. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder waitForDeployment(Boolean waitForDeployment) {
            return waitForDeployment(Output.of(waitForDeployment));
        }

        public MtlskeystoreClientCertificateUploadArgs build() {
            if ($.clientCertificateId == null) {
                throw new MissingRequiredPropertyException("MtlskeystoreClientCertificateUploadArgs", "clientCertificateId");
            }
            if ($.signedCertificate == null) {
                throw new MissingRequiredPropertyException("MtlskeystoreClientCertificateUploadArgs", "signedCertificate");
            }
            if ($.versionNumber == null) {
                throw new MissingRequiredPropertyException("MtlskeystoreClientCertificateUploadArgs", "versionNumber");
            }
            return $;
        }
    }

}
