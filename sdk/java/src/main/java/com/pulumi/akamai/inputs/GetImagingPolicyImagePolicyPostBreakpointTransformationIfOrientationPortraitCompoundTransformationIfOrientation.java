// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientationDefault;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientationLandscape;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientationPortrait;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientationSquare;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientation extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientation Empty = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientation();

    @Import(name="default")
    private @Nullable GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientationDefault default_;

    public Optional<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientationDefault> default_() {
        return Optional.ofNullable(this.default_);
    }

    @Import(name="landscape")
    private @Nullable GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientationLandscape landscape;

    public Optional<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientationLandscape> landscape() {
        return Optional.ofNullable(this.landscape);
    }

    @Import(name="portrait")
    private @Nullable GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientationPortrait portrait;

    public Optional<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientationPortrait> portrait() {
        return Optional.ofNullable(this.portrait);
    }

    @Import(name="square")
    private @Nullable GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientationSquare square;

    public Optional<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientationSquare> square() {
        return Optional.ofNullable(this.square);
    }

    private GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientation() {}

    private GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientation(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientation $) {
        this.default_ = $.default_;
        this.landscape = $.landscape;
        this.portrait = $.portrait;
        this.square = $.square;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientation defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientation $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientation();
        }

        public Builder(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientation defaults) {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientation(Objects.requireNonNull(defaults));
        }

        public Builder default_(@Nullable GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientationDefault default_) {
            $.default_ = default_;
            return this;
        }

        public Builder landscape(@Nullable GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientationLandscape landscape) {
            $.landscape = landscape;
            return this;
        }

        public Builder portrait(@Nullable GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientationPortrait portrait) {
            $.portrait = portrait;
            return this;
        }

        public Builder square(@Nullable GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientationSquare square) {
            $.square = square;
            return this;
        }

        public GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientation build() {
            return $;
        }
    }

}
