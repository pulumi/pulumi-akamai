// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyBreakpointsArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyOutputArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyVariableArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyArgs Empty = new GetImagingPolicyImagePolicyArgs();

    /**
     * The breakpoint widths (in pixels) to use to create derivative images/videos.
     * 
     */
    @Import(name="breakpoints")
    private @Nullable Output<GetImagingPolicyImagePolicyBreakpointsArgs> breakpoints;

    /**
     * @return The breakpoint widths (in pixels) to use to create derivative images/videos.
     * 
     */
    public Optional<Output<GetImagingPolicyImagePolicyBreakpointsArgs>> breakpoints() {
        return Optional.ofNullable(this.breakpoints);
    }

    /**
     * Hosts that are allowed for image/video URLs within transformations or variables.
     * 
     */
    @Import(name="hosts")
    private @Nullable Output<List<String>> hosts;

    /**
     * @return Hosts that are allowed for image/video URLs within transformations or variables.
     * 
     */
    public Optional<Output<List<String>>> hosts() {
        return Optional.ofNullable(this.hosts);
    }

    /**
     * Dictates the output quality (either `quality` or `perceptualQuality`) and formats that are created for each resized image. If unspecified, image formats are created to support all browsers at the default quality level (`85`), which includes formats such as WEBP, JPEG2000 and JPEG-XR for specific browsers.
     * 
     */
    @Import(name="output")
    private @Nullable Output<GetImagingPolicyImagePolicyOutputArgs> output;

    /**
     * @return Dictates the output quality (either `quality` or `perceptualQuality`) and formats that are created for each resized image. If unspecified, image formats are created to support all browsers at the default quality level (`85`), which includes formats such as WEBP, JPEG2000 and JPEG-XR for specific browsers.
     * 
     */
    public Optional<Output<GetImagingPolicyImagePolicyOutputArgs>> output() {
        return Optional.ofNullable(this.output);
    }

    /**
     * Post-processing Transformations are applied to the image after image and quality settings have been applied.
     * 
     */
    @Import(name="postBreakpointTransformations")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationArgs>> postBreakpointTransformations;

    /**
     * @return Post-processing Transformations are applied to the image after image and quality settings have been applied.
     * 
     */
    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationArgs>>> postBreakpointTransformations() {
        return Optional.ofNullable(this.postBreakpointTransformations);
    }

    /**
     * The amount of time in seconds that the policy takes to rollout. During the rollout an increasing proportion of images/videos will begin to use the new policy instead of the cached images/videos from the previous version. This value has no effect on the staging network.
     * 
     */
    @Import(name="rolloutDuration")
    private @Nullable Output<String> rolloutDuration;

    /**
     * @return The amount of time in seconds that the policy takes to rollout. During the rollout an increasing proportion of images/videos will begin to use the new policy instead of the cached images/videos from the previous version. This value has no effect on the staging network.
     * 
     */
    public Optional<Output<String>> rolloutDuration() {
        return Optional.ofNullable(this.rolloutDuration);
    }

    /**
     * The amount of time in seconds that the policy will serve stale images. During the serve stale period realtime images will attempt to use the offline image from the previous policy version first if possible.
     * 
     */
    @Import(name="serveStaleDuration")
    private @Nullable Output<String> serveStaleDuration;

    /**
     * @return The amount of time in seconds that the policy will serve stale images. During the serve stale period realtime images will attempt to use the offline image from the previous policy version first if possible.
     * 
     */
    public Optional<Output<String>> serveStaleDuration() {
        return Optional.ofNullable(this.serveStaleDuration);
    }

    /**
     * Set of image transformations to apply to the source image. If unspecified, no operations are performed.
     * 
     */
    @Import(name="transformations")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationArgs>> transformations;

    /**
     * @return Set of image transformations to apply to the source image. If unspecified, no operations are performed.
     * 
     */
    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationArgs>>> transformations() {
        return Optional.ofNullable(this.transformations);
    }

    /**
     * Declares variables for use within the policy. Any variable declared here can be invoked throughout transformations as a Variable object, so that you don&#39;t have to specify values separately. You can also pass in these variable names and values dynamically as query parameters in the image&#39;s request URL.
     * 
     */
    @Import(name="variables")
    private @Nullable Output<List<GetImagingPolicyImagePolicyVariableArgs>> variables;

    /**
     * @return Declares variables for use within the policy. Any variable declared here can be invoked throughout transformations as a Variable object, so that you don&#39;t have to specify values separately. You can also pass in these variable names and values dynamically as query parameters in the image&#39;s request URL.
     * 
     */
    public Optional<Output<List<GetImagingPolicyImagePolicyVariableArgs>>> variables() {
        return Optional.ofNullable(this.variables);
    }

    private GetImagingPolicyImagePolicyArgs() {}

    private GetImagingPolicyImagePolicyArgs(GetImagingPolicyImagePolicyArgs $) {
        this.breakpoints = $.breakpoints;
        this.hosts = $.hosts;
        this.output = $.output;
        this.postBreakpointTransformations = $.postBreakpointTransformations;
        this.rolloutDuration = $.rolloutDuration;
        this.serveStaleDuration = $.serveStaleDuration;
        this.transformations = $.transformations;
        this.variables = $.variables;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyArgs();
        }

        public Builder(GetImagingPolicyImagePolicyArgs defaults) {
            $ = new GetImagingPolicyImagePolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param breakpoints The breakpoint widths (in pixels) to use to create derivative images/videos.
         * 
         * @return builder
         * 
         */
        public Builder breakpoints(@Nullable Output<GetImagingPolicyImagePolicyBreakpointsArgs> breakpoints) {
            $.breakpoints = breakpoints;
            return this;
        }

        /**
         * @param breakpoints The breakpoint widths (in pixels) to use to create derivative images/videos.
         * 
         * @return builder
         * 
         */
        public Builder breakpoints(GetImagingPolicyImagePolicyBreakpointsArgs breakpoints) {
            return breakpoints(Output.of(breakpoints));
        }

        /**
         * @param hosts Hosts that are allowed for image/video URLs within transformations or variables.
         * 
         * @return builder
         * 
         */
        public Builder hosts(@Nullable Output<List<String>> hosts) {
            $.hosts = hosts;
            return this;
        }

        /**
         * @param hosts Hosts that are allowed for image/video URLs within transformations or variables.
         * 
         * @return builder
         * 
         */
        public Builder hosts(List<String> hosts) {
            return hosts(Output.of(hosts));
        }

        /**
         * @param hosts Hosts that are allowed for image/video URLs within transformations or variables.
         * 
         * @return builder
         * 
         */
        public Builder hosts(String... hosts) {
            return hosts(List.of(hosts));
        }

        /**
         * @param output Dictates the output quality (either `quality` or `perceptualQuality`) and formats that are created for each resized image. If unspecified, image formats are created to support all browsers at the default quality level (`85`), which includes formats such as WEBP, JPEG2000 and JPEG-XR for specific browsers.
         * 
         * @return builder
         * 
         */
        public Builder output(@Nullable Output<GetImagingPolicyImagePolicyOutputArgs> output) {
            $.output = output;
            return this;
        }

        /**
         * @param output Dictates the output quality (either `quality` or `perceptualQuality`) and formats that are created for each resized image. If unspecified, image formats are created to support all browsers at the default quality level (`85`), which includes formats such as WEBP, JPEG2000 and JPEG-XR for specific browsers.
         * 
         * @return builder
         * 
         */
        public Builder output(GetImagingPolicyImagePolicyOutputArgs output) {
            return output(Output.of(output));
        }

        /**
         * @param postBreakpointTransformations Post-processing Transformations are applied to the image after image and quality settings have been applied.
         * 
         * @return builder
         * 
         */
        public Builder postBreakpointTransformations(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationArgs>> postBreakpointTransformations) {
            $.postBreakpointTransformations = postBreakpointTransformations;
            return this;
        }

        /**
         * @param postBreakpointTransformations Post-processing Transformations are applied to the image after image and quality settings have been applied.
         * 
         * @return builder
         * 
         */
        public Builder postBreakpointTransformations(List<GetImagingPolicyImagePolicyPostBreakpointTransformationArgs> postBreakpointTransformations) {
            return postBreakpointTransformations(Output.of(postBreakpointTransformations));
        }

        /**
         * @param postBreakpointTransformations Post-processing Transformations are applied to the image after image and quality settings have been applied.
         * 
         * @return builder
         * 
         */
        public Builder postBreakpointTransformations(GetImagingPolicyImagePolicyPostBreakpointTransformationArgs... postBreakpointTransformations) {
            return postBreakpointTransformations(List.of(postBreakpointTransformations));
        }

        /**
         * @param rolloutDuration The amount of time in seconds that the policy takes to rollout. During the rollout an increasing proportion of images/videos will begin to use the new policy instead of the cached images/videos from the previous version. This value has no effect on the staging network.
         * 
         * @return builder
         * 
         */
        public Builder rolloutDuration(@Nullable Output<String> rolloutDuration) {
            $.rolloutDuration = rolloutDuration;
            return this;
        }

        /**
         * @param rolloutDuration The amount of time in seconds that the policy takes to rollout. During the rollout an increasing proportion of images/videos will begin to use the new policy instead of the cached images/videos from the previous version. This value has no effect on the staging network.
         * 
         * @return builder
         * 
         */
        public Builder rolloutDuration(String rolloutDuration) {
            return rolloutDuration(Output.of(rolloutDuration));
        }

        /**
         * @param serveStaleDuration The amount of time in seconds that the policy will serve stale images. During the serve stale period realtime images will attempt to use the offline image from the previous policy version first if possible.
         * 
         * @return builder
         * 
         */
        public Builder serveStaleDuration(@Nullable Output<String> serveStaleDuration) {
            $.serveStaleDuration = serveStaleDuration;
            return this;
        }

        /**
         * @param serveStaleDuration The amount of time in seconds that the policy will serve stale images. During the serve stale period realtime images will attempt to use the offline image from the previous policy version first if possible.
         * 
         * @return builder
         * 
         */
        public Builder serveStaleDuration(String serveStaleDuration) {
            return serveStaleDuration(Output.of(serveStaleDuration));
        }

        /**
         * @param transformations Set of image transformations to apply to the source image. If unspecified, no operations are performed.
         * 
         * @return builder
         * 
         */
        public Builder transformations(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationArgs>> transformations) {
            $.transformations = transformations;
            return this;
        }

        /**
         * @param transformations Set of image transformations to apply to the source image. If unspecified, no operations are performed.
         * 
         * @return builder
         * 
         */
        public Builder transformations(List<GetImagingPolicyImagePolicyTransformationArgs> transformations) {
            return transformations(Output.of(transformations));
        }

        /**
         * @param transformations Set of image transformations to apply to the source image. If unspecified, no operations are performed.
         * 
         * @return builder
         * 
         */
        public Builder transformations(GetImagingPolicyImagePolicyTransformationArgs... transformations) {
            return transformations(List.of(transformations));
        }

        /**
         * @param variables Declares variables for use within the policy. Any variable declared here can be invoked throughout transformations as a Variable object, so that you don&#39;t have to specify values separately. You can also pass in these variable names and values dynamically as query parameters in the image&#39;s request URL.
         * 
         * @return builder
         * 
         */
        public Builder variables(@Nullable Output<List<GetImagingPolicyImagePolicyVariableArgs>> variables) {
            $.variables = variables;
            return this;
        }

        /**
         * @param variables Declares variables for use within the policy. Any variable declared here can be invoked throughout transformations as a Variable object, so that you don&#39;t have to specify values separately. You can also pass in these variable names and values dynamically as query parameters in the image&#39;s request URL.
         * 
         * @return builder
         * 
         */
        public Builder variables(List<GetImagingPolicyImagePolicyVariableArgs> variables) {
            return variables(Output.of(variables));
        }

        /**
         * @param variables Declares variables for use within the policy. Any variable declared here can be invoked throughout transformations as a Variable object, so that you don&#39;t have to specify values separately. You can also pass in these variable names and values dynamically as query parameters in the image&#39;s request URL.
         * 
         * @return builder
         * 
         */
        public Builder variables(GetImagingPolicyImagePolicyVariableArgs... variables) {
            return variables(List.of(variables));
        }

        public GetImagingPolicyImagePolicyArgs build() {
            return $;
        }
    }

}
