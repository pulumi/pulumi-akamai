// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanBackgroundColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanBlur;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanChromaKey;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanComposite;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanCompound;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanContrast;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanGoop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanGrayscale;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanHsl;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanHsv;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfDimension;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfOrientation;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanMaxColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanMirror;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanMonoHue;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanOpacity;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanRemoveColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanUnsharpMask;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThan extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThan Empty = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThan();

    @Import(name="backgroundColors")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanBackgroundColor> backgroundColors;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanBackgroundColor>> backgroundColors() {
        return Optional.ofNullable(this.backgroundColors);
    }

    @Import(name="blurs")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanBlur> blurs;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanBlur>> blurs() {
        return Optional.ofNullable(this.blurs);
    }

    @Import(name="chromaKeys")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanChromaKey> chromaKeys;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanChromaKey>> chromaKeys() {
        return Optional.ofNullable(this.chromaKeys);
    }

    @Import(name="composites")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanComposite> composites;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanComposite>> composites() {
        return Optional.ofNullable(this.composites);
    }

    @Import(name="compounds")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanCompound> compounds;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanCompound>> compounds() {
        return Optional.ofNullable(this.compounds);
    }

    @Import(name="contrasts")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanContrast> contrasts;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanContrast>> contrasts() {
        return Optional.ofNullable(this.contrasts);
    }

    @Import(name="goops")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanGoop> goops;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanGoop>> goops() {
        return Optional.ofNullable(this.goops);
    }

    @Import(name="grayscales")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanGrayscale> grayscales;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanGrayscale>> grayscales() {
        return Optional.ofNullable(this.grayscales);
    }

    @Import(name="hsls")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanHsl> hsls;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanHsl>> hsls() {
        return Optional.ofNullable(this.hsls);
    }

    @Import(name="hsvs")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanHsv> hsvs;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanHsv>> hsvs() {
        return Optional.ofNullable(this.hsvs);
    }

    @Import(name="ifDimensions")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfDimension> ifDimensions;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfDimension>> ifDimensions() {
        return Optional.ofNullable(this.ifDimensions);
    }

    @Import(name="ifOrientations")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfOrientation> ifOrientations;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfOrientation>> ifOrientations() {
        return Optional.ofNullable(this.ifOrientations);
    }

    @Import(name="maxColors")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanMaxColor> maxColors;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanMaxColor>> maxColors() {
        return Optional.ofNullable(this.maxColors);
    }

    @Import(name="mirrors")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanMirror> mirrors;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanMirror>> mirrors() {
        return Optional.ofNullable(this.mirrors);
    }

    @Import(name="monoHues")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanMonoHue> monoHues;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanMonoHue>> monoHues() {
        return Optional.ofNullable(this.monoHues);
    }

    @Import(name="opacities")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanOpacity> opacities;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanOpacity>> opacities() {
        return Optional.ofNullable(this.opacities);
    }

    @Import(name="removeColors")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanRemoveColor> removeColors;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanRemoveColor>> removeColors() {
        return Optional.ofNullable(this.removeColors);
    }

    @Import(name="unsharpMasks")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanUnsharpMask> unsharpMasks;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanUnsharpMask>> unsharpMasks() {
        return Optional.ofNullable(this.unsharpMasks);
    }

    private GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThan() {}

    private GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThan(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThan $) {
        this.backgroundColors = $.backgroundColors;
        this.blurs = $.blurs;
        this.chromaKeys = $.chromaKeys;
        this.composites = $.composites;
        this.compounds = $.compounds;
        this.contrasts = $.contrasts;
        this.goops = $.goops;
        this.grayscales = $.grayscales;
        this.hsls = $.hsls;
        this.hsvs = $.hsvs;
        this.ifDimensions = $.ifDimensions;
        this.ifOrientations = $.ifOrientations;
        this.maxColors = $.maxColors;
        this.mirrors = $.mirrors;
        this.monoHues = $.monoHues;
        this.opacities = $.opacities;
        this.removeColors = $.removeColors;
        this.unsharpMasks = $.unsharpMasks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThan defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThan $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThan();
        }

        public Builder(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThan defaults) {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThan(Objects.requireNonNull(defaults));
        }

        public Builder backgroundColors(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanBackgroundColor> backgroundColors) {
            $.backgroundColors = backgroundColors;
            return this;
        }

        public Builder backgroundColors(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanBackgroundColor... backgroundColors) {
            return backgroundColors(List.of(backgroundColors));
        }

        public Builder blurs(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanBlur> blurs) {
            $.blurs = blurs;
            return this;
        }

        public Builder blurs(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanBlur... blurs) {
            return blurs(List.of(blurs));
        }

        public Builder chromaKeys(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanChromaKey> chromaKeys) {
            $.chromaKeys = chromaKeys;
            return this;
        }

        public Builder chromaKeys(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanChromaKey... chromaKeys) {
            return chromaKeys(List.of(chromaKeys));
        }

        public Builder composites(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanComposite> composites) {
            $.composites = composites;
            return this;
        }

        public Builder composites(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanComposite... composites) {
            return composites(List.of(composites));
        }

        public Builder compounds(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanCompound> compounds) {
            $.compounds = compounds;
            return this;
        }

        public Builder compounds(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanCompound... compounds) {
            return compounds(List.of(compounds));
        }

        public Builder contrasts(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanContrast> contrasts) {
            $.contrasts = contrasts;
            return this;
        }

        public Builder contrasts(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanContrast... contrasts) {
            return contrasts(List.of(contrasts));
        }

        public Builder goops(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanGoop> goops) {
            $.goops = goops;
            return this;
        }

        public Builder goops(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanGoop... goops) {
            return goops(List.of(goops));
        }

        public Builder grayscales(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanGrayscale> grayscales) {
            $.grayscales = grayscales;
            return this;
        }

        public Builder grayscales(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanGrayscale... grayscales) {
            return grayscales(List.of(grayscales));
        }

        public Builder hsls(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanHsl> hsls) {
            $.hsls = hsls;
            return this;
        }

        public Builder hsls(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanHsl... hsls) {
            return hsls(List.of(hsls));
        }

        public Builder hsvs(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanHsv> hsvs) {
            $.hsvs = hsvs;
            return this;
        }

        public Builder hsvs(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanHsv... hsvs) {
            return hsvs(List.of(hsvs));
        }

        public Builder ifDimensions(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfDimension> ifDimensions) {
            $.ifDimensions = ifDimensions;
            return this;
        }

        public Builder ifDimensions(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfDimension... ifDimensions) {
            return ifDimensions(List.of(ifDimensions));
        }

        public Builder ifOrientations(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfOrientation> ifOrientations) {
            $.ifOrientations = ifOrientations;
            return this;
        }

        public Builder ifOrientations(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfOrientation... ifOrientations) {
            return ifOrientations(List.of(ifOrientations));
        }

        public Builder maxColors(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanMaxColor> maxColors) {
            $.maxColors = maxColors;
            return this;
        }

        public Builder maxColors(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanMaxColor... maxColors) {
            return maxColors(List.of(maxColors));
        }

        public Builder mirrors(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanMirror> mirrors) {
            $.mirrors = mirrors;
            return this;
        }

        public Builder mirrors(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanMirror... mirrors) {
            return mirrors(List.of(mirrors));
        }

        public Builder monoHues(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanMonoHue> monoHues) {
            $.monoHues = monoHues;
            return this;
        }

        public Builder monoHues(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanMonoHue... monoHues) {
            return monoHues(List.of(monoHues));
        }

        public Builder opacities(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanOpacity> opacities) {
            $.opacities = opacities;
            return this;
        }

        public Builder opacities(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanOpacity... opacities) {
            return opacities(List.of(opacities));
        }

        public Builder removeColors(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanRemoveColor> removeColors) {
            $.removeColors = removeColors;
            return this;
        }

        public Builder removeColors(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanRemoveColor... removeColors) {
            return removeColors(List.of(removeColors));
        }

        public Builder unsharpMasks(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanUnsharpMask> unsharpMasks) {
            $.unsharpMasks = unsharpMasks;
            return this;
        }

        public Builder unsharpMasks(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanUnsharpMask... unsharpMasks) {
            return unsharpMasks(List.of(unsharpMasks));
        }

        public GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThan build() {
            return $;
        }
    }

}
