// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppSecRatePolicyState extends com.pulumi.resources.ResourceArgs {

    public static final AppSecRatePolicyState Empty = new AppSecRatePolicyState();

    /**
     * Unique identifier of the security configuration
     * 
     */
    @Import(name="configId")
    private @Nullable Output<Integer> configId;

    /**
     * @return Unique identifier of the security configuration
     * 
     */
    public Optional<Output<Integer>> configId() {
        return Optional.ofNullable(this.configId);
    }

    /**
     * JSON-formatted definition of the rate policy
     * 
     */
    @Import(name="ratePolicy")
    private @Nullable Output<String> ratePolicy;

    /**
     * @return JSON-formatted definition of the rate policy
     * 
     */
    public Optional<Output<String>> ratePolicy() {
        return Optional.ofNullable(this.ratePolicy);
    }

    /**
     * Unique identifier of the rate policy
     * 
     */
    @Import(name="ratePolicyId")
    private @Nullable Output<Integer> ratePolicyId;

    /**
     * @return Unique identifier of the rate policy
     * 
     */
    public Optional<Output<Integer>> ratePolicyId() {
        return Optional.ofNullable(this.ratePolicyId);
    }

    private AppSecRatePolicyState() {}

    private AppSecRatePolicyState(AppSecRatePolicyState $) {
        this.configId = $.configId;
        this.ratePolicy = $.ratePolicy;
        this.ratePolicyId = $.ratePolicyId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppSecRatePolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppSecRatePolicyState $;

        public Builder() {
            $ = new AppSecRatePolicyState();
        }

        public Builder(AppSecRatePolicyState defaults) {
            $ = new AppSecRatePolicyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param configId Unique identifier of the security configuration
         * 
         * @return builder
         * 
         */
        public Builder configId(@Nullable Output<Integer> configId) {
            $.configId = configId;
            return this;
        }

        /**
         * @param configId Unique identifier of the security configuration
         * 
         * @return builder
         * 
         */
        public Builder configId(Integer configId) {
            return configId(Output.of(configId));
        }

        /**
         * @param ratePolicy JSON-formatted definition of the rate policy
         * 
         * @return builder
         * 
         */
        public Builder ratePolicy(@Nullable Output<String> ratePolicy) {
            $.ratePolicy = ratePolicy;
            return this;
        }

        /**
         * @param ratePolicy JSON-formatted definition of the rate policy
         * 
         * @return builder
         * 
         */
        public Builder ratePolicy(String ratePolicy) {
            return ratePolicy(Output.of(ratePolicy));
        }

        /**
         * @param ratePolicyId Unique identifier of the rate policy
         * 
         * @return builder
         * 
         */
        public Builder ratePolicyId(@Nullable Output<Integer> ratePolicyId) {
            $.ratePolicyId = ratePolicyId;
            return this;
        }

        /**
         * @param ratePolicyId Unique identifier of the rate policy
         * 
         * @return builder
         * 
         */
        public Builder ratePolicyId(Integer ratePolicyId) {
            return ratePolicyId(Output.of(ratePolicyId));
        }

        public AppSecRatePolicyState build() {
            return $;
        }
    }

}
