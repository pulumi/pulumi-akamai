// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai;

import com.pulumi.akamai.inputs.CloudletsPolicyActivationTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CloudletsPolicyActivationArgs extends com.pulumi.resources.ResourceArgs {

    public static final CloudletsPolicyActivationArgs Empty = new CloudletsPolicyActivationArgs();

    /**
     * Set of property IDs to link to this Cloudlets policy. It is required for non-shared policies
     * 
     */
    @Import(name="associatedProperties")
    private @Nullable Output<List<String>> associatedProperties;

    /**
     * @return Set of property IDs to link to this Cloudlets policy. It is required for non-shared policies
     * 
     */
    public Optional<Output<List<String>>> associatedProperties() {
        return Optional.ofNullable(this.associatedProperties);
    }

    /**
     * The network you want to activate the policy version on (options are Staging and Production)
     * 
     */
    @Import(name="network", required=true)
    private Output<String> network;

    /**
     * @return The network you want to activate the policy version on (options are Staging and Production)
     * 
     */
    public Output<String> network() {
        return this.network;
    }

    /**
     * ID of the Cloudlets policy you want to activate
     * 
     */
    @Import(name="policyId", required=true)
    private Output<Integer> policyId;

    /**
     * @return ID of the Cloudlets policy you want to activate
     * 
     */
    public Output<Integer> policyId() {
        return this.policyId;
    }

    /**
     * Enables to set timeout for processing
     * 
     */
    @Import(name="timeouts")
    private @Nullable Output<CloudletsPolicyActivationTimeoutsArgs> timeouts;

    /**
     * @return Enables to set timeout for processing
     * 
     */
    public Optional<Output<CloudletsPolicyActivationTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * Cloudlets policy version you want to activate
     * 
     */
    @Import(name="version", required=true)
    private Output<Integer> version;

    /**
     * @return Cloudlets policy version you want to activate
     * 
     */
    public Output<Integer> version() {
        return this.version;
    }

    private CloudletsPolicyActivationArgs() {}

    private CloudletsPolicyActivationArgs(CloudletsPolicyActivationArgs $) {
        this.associatedProperties = $.associatedProperties;
        this.network = $.network;
        this.policyId = $.policyId;
        this.timeouts = $.timeouts;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CloudletsPolicyActivationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CloudletsPolicyActivationArgs $;

        public Builder() {
            $ = new CloudletsPolicyActivationArgs();
        }

        public Builder(CloudletsPolicyActivationArgs defaults) {
            $ = new CloudletsPolicyActivationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param associatedProperties Set of property IDs to link to this Cloudlets policy. It is required for non-shared policies
         * 
         * @return builder
         * 
         */
        public Builder associatedProperties(@Nullable Output<List<String>> associatedProperties) {
            $.associatedProperties = associatedProperties;
            return this;
        }

        /**
         * @param associatedProperties Set of property IDs to link to this Cloudlets policy. It is required for non-shared policies
         * 
         * @return builder
         * 
         */
        public Builder associatedProperties(List<String> associatedProperties) {
            return associatedProperties(Output.of(associatedProperties));
        }

        /**
         * @param associatedProperties Set of property IDs to link to this Cloudlets policy. It is required for non-shared policies
         * 
         * @return builder
         * 
         */
        public Builder associatedProperties(String... associatedProperties) {
            return associatedProperties(List.of(associatedProperties));
        }

        /**
         * @param network The network you want to activate the policy version on (options are Staging and Production)
         * 
         * @return builder
         * 
         */
        public Builder network(Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network The network you want to activate the policy version on (options are Staging and Production)
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param policyId ID of the Cloudlets policy you want to activate
         * 
         * @return builder
         * 
         */
        public Builder policyId(Output<Integer> policyId) {
            $.policyId = policyId;
            return this;
        }

        /**
         * @param policyId ID of the Cloudlets policy you want to activate
         * 
         * @return builder
         * 
         */
        public Builder policyId(Integer policyId) {
            return policyId(Output.of(policyId));
        }

        /**
         * @param timeouts Enables to set timeout for processing
         * 
         * @return builder
         * 
         */
        public Builder timeouts(@Nullable Output<CloudletsPolicyActivationTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        /**
         * @param timeouts Enables to set timeout for processing
         * 
         * @return builder
         * 
         */
        public Builder timeouts(CloudletsPolicyActivationTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param version Cloudlets policy version you want to activate
         * 
         * @return builder
         * 
         */
        public Builder version(Output<Integer> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Cloudlets policy version you want to activate
         * 
         * @return builder
         * 
         */
        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        public CloudletsPolicyActivationArgs build() {
            if ($.network == null) {
                throw new MissingRequiredPropertyException("CloudletsPolicyActivationArgs", "network");
            }
            if ($.policyId == null) {
                throw new MissingRequiredPropertyException("CloudletsPolicyActivationArgs", "policyId");
            }
            if ($.version == null) {
                throw new MissingRequiredPropertyException("CloudletsPolicyActivationArgs", "version");
            }
            return $;
        }
    }

}
