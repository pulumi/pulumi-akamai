// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultAppend;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultAspectCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultBackgroundColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultBlur;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultChromaKey;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultComposite;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultCompound;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultContrast;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultFaceCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultFeatureCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultFitAndFill;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultGoop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultGrayscale;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultHsl;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultHsv;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultIfDimension;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultIfOrientation;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultImQuery;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultMaxColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultMirror;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultMonoHue;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultOpacity;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultRegionOfInterestCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultRelativeCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultRemoveColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultResize;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultRotate;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultScale;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultShears;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultTrim;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultUnsharpMask;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefault extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefault Empty = new GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefault();

    @Import(name="appends")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultAppend> appends;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultAppend>> appends() {
        return Optional.ofNullable(this.appends);
    }

    @Import(name="aspectCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultAspectCrop> aspectCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultAspectCrop>> aspectCrops() {
        return Optional.ofNullable(this.aspectCrops);
    }

    @Import(name="backgroundColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultBackgroundColor> backgroundColors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultBackgroundColor>> backgroundColors() {
        return Optional.ofNullable(this.backgroundColors);
    }

    @Import(name="blurs")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultBlur> blurs;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultBlur>> blurs() {
        return Optional.ofNullable(this.blurs);
    }

    @Import(name="chromaKeys")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultChromaKey> chromaKeys;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultChromaKey>> chromaKeys() {
        return Optional.ofNullable(this.chromaKeys);
    }

    @Import(name="composites")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultComposite> composites;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultComposite>> composites() {
        return Optional.ofNullable(this.composites);
    }

    @Import(name="compounds")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultCompound> compounds;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultCompound>> compounds() {
        return Optional.ofNullable(this.compounds);
    }

    @Import(name="contrasts")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultContrast> contrasts;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultContrast>> contrasts() {
        return Optional.ofNullable(this.contrasts);
    }

    @Import(name="crops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultCrop> crops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultCrop>> crops() {
        return Optional.ofNullable(this.crops);
    }

    @Import(name="faceCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultFaceCrop> faceCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultFaceCrop>> faceCrops() {
        return Optional.ofNullable(this.faceCrops);
    }

    @Import(name="featureCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultFeatureCrop> featureCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultFeatureCrop>> featureCrops() {
        return Optional.ofNullable(this.featureCrops);
    }

    @Import(name="fitAndFills")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultFitAndFill> fitAndFills;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultFitAndFill>> fitAndFills() {
        return Optional.ofNullable(this.fitAndFills);
    }

    @Import(name="goops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultGoop> goops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultGoop>> goops() {
        return Optional.ofNullable(this.goops);
    }

    @Import(name="grayscales")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultGrayscale> grayscales;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultGrayscale>> grayscales() {
        return Optional.ofNullable(this.grayscales);
    }

    @Import(name="hsls")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultHsl> hsls;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultHsl>> hsls() {
        return Optional.ofNullable(this.hsls);
    }

    @Import(name="hsvs")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultHsv> hsvs;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultHsv>> hsvs() {
        return Optional.ofNullable(this.hsvs);
    }

    @Import(name="ifDimensions")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultIfDimension> ifDimensions;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultIfDimension>> ifDimensions() {
        return Optional.ofNullable(this.ifDimensions);
    }

    @Import(name="ifOrientations")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultIfOrientation> ifOrientations;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultIfOrientation>> ifOrientations() {
        return Optional.ofNullable(this.ifOrientations);
    }

    @Import(name="imQueries")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultImQuery> imQueries;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultImQuery>> imQueries() {
        return Optional.ofNullable(this.imQueries);
    }

    @Import(name="maxColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultMaxColor> maxColors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultMaxColor>> maxColors() {
        return Optional.ofNullable(this.maxColors);
    }

    @Import(name="mirrors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultMirror> mirrors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultMirror>> mirrors() {
        return Optional.ofNullable(this.mirrors);
    }

    @Import(name="monoHues")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultMonoHue> monoHues;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultMonoHue>> monoHues() {
        return Optional.ofNullable(this.monoHues);
    }

    @Import(name="opacities")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultOpacity> opacities;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultOpacity>> opacities() {
        return Optional.ofNullable(this.opacities);
    }

    @Import(name="regionOfInterestCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultRegionOfInterestCrop> regionOfInterestCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultRegionOfInterestCrop>> regionOfInterestCrops() {
        return Optional.ofNullable(this.regionOfInterestCrops);
    }

    @Import(name="relativeCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultRelativeCrop> relativeCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultRelativeCrop>> relativeCrops() {
        return Optional.ofNullable(this.relativeCrops);
    }

    @Import(name="removeColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultRemoveColor> removeColors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultRemoveColor>> removeColors() {
        return Optional.ofNullable(this.removeColors);
    }

    @Import(name="resizes")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultResize> resizes;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultResize>> resizes() {
        return Optional.ofNullable(this.resizes);
    }

    @Import(name="rotates")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultRotate> rotates;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultRotate>> rotates() {
        return Optional.ofNullable(this.rotates);
    }

    @Import(name="scales")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultScale> scales;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultScale>> scales() {
        return Optional.ofNullable(this.scales);
    }

    @Import(name="shears")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultShears> shears;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultShears>> shears() {
        return Optional.ofNullable(this.shears);
    }

    @Import(name="trims")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultTrim> trims;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultTrim>> trims() {
        return Optional.ofNullable(this.trims);
    }

    @Import(name="unsharpMasks")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultUnsharpMask> unsharpMasks;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultUnsharpMask>> unsharpMasks() {
        return Optional.ofNullable(this.unsharpMasks);
    }

    private GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefault() {}

    private GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefault(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefault $) {
        this.appends = $.appends;
        this.aspectCrops = $.aspectCrops;
        this.backgroundColors = $.backgroundColors;
        this.blurs = $.blurs;
        this.chromaKeys = $.chromaKeys;
        this.composites = $.composites;
        this.compounds = $.compounds;
        this.contrasts = $.contrasts;
        this.crops = $.crops;
        this.faceCrops = $.faceCrops;
        this.featureCrops = $.featureCrops;
        this.fitAndFills = $.fitAndFills;
        this.goops = $.goops;
        this.grayscales = $.grayscales;
        this.hsls = $.hsls;
        this.hsvs = $.hsvs;
        this.ifDimensions = $.ifDimensions;
        this.ifOrientations = $.ifOrientations;
        this.imQueries = $.imQueries;
        this.maxColors = $.maxColors;
        this.mirrors = $.mirrors;
        this.monoHues = $.monoHues;
        this.opacities = $.opacities;
        this.regionOfInterestCrops = $.regionOfInterestCrops;
        this.relativeCrops = $.relativeCrops;
        this.removeColors = $.removeColors;
        this.resizes = $.resizes;
        this.rotates = $.rotates;
        this.scales = $.scales;
        this.shears = $.shears;
        this.trims = $.trims;
        this.unsharpMasks = $.unsharpMasks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefault defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefault $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefault();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefault defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefault(Objects.requireNonNull(defaults));
        }

        public Builder appends(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultAppend> appends) {
            $.appends = appends;
            return this;
        }

        public Builder appends(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultAppend... appends) {
            return appends(List.of(appends));
        }

        public Builder aspectCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultAspectCrop> aspectCrops) {
            $.aspectCrops = aspectCrops;
            return this;
        }

        public Builder aspectCrops(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultAspectCrop... aspectCrops) {
            return aspectCrops(List.of(aspectCrops));
        }

        public Builder backgroundColors(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultBackgroundColor> backgroundColors) {
            $.backgroundColors = backgroundColors;
            return this;
        }

        public Builder backgroundColors(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultBackgroundColor... backgroundColors) {
            return backgroundColors(List.of(backgroundColors));
        }

        public Builder blurs(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultBlur> blurs) {
            $.blurs = blurs;
            return this;
        }

        public Builder blurs(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultBlur... blurs) {
            return blurs(List.of(blurs));
        }

        public Builder chromaKeys(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultChromaKey> chromaKeys) {
            $.chromaKeys = chromaKeys;
            return this;
        }

        public Builder chromaKeys(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultChromaKey... chromaKeys) {
            return chromaKeys(List.of(chromaKeys));
        }

        public Builder composites(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultComposite> composites) {
            $.composites = composites;
            return this;
        }

        public Builder composites(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultComposite... composites) {
            return composites(List.of(composites));
        }

        public Builder compounds(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultCompound> compounds) {
            $.compounds = compounds;
            return this;
        }

        public Builder compounds(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultCompound... compounds) {
            return compounds(List.of(compounds));
        }

        public Builder contrasts(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultContrast> contrasts) {
            $.contrasts = contrasts;
            return this;
        }

        public Builder contrasts(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultContrast... contrasts) {
            return contrasts(List.of(contrasts));
        }

        public Builder crops(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultCrop> crops) {
            $.crops = crops;
            return this;
        }

        public Builder crops(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultCrop... crops) {
            return crops(List.of(crops));
        }

        public Builder faceCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultFaceCrop> faceCrops) {
            $.faceCrops = faceCrops;
            return this;
        }

        public Builder faceCrops(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultFaceCrop... faceCrops) {
            return faceCrops(List.of(faceCrops));
        }

        public Builder featureCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultFeatureCrop> featureCrops) {
            $.featureCrops = featureCrops;
            return this;
        }

        public Builder featureCrops(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultFeatureCrop... featureCrops) {
            return featureCrops(List.of(featureCrops));
        }

        public Builder fitAndFills(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultFitAndFill> fitAndFills) {
            $.fitAndFills = fitAndFills;
            return this;
        }

        public Builder fitAndFills(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultFitAndFill... fitAndFills) {
            return fitAndFills(List.of(fitAndFills));
        }

        public Builder goops(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultGoop> goops) {
            $.goops = goops;
            return this;
        }

        public Builder goops(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultGoop... goops) {
            return goops(List.of(goops));
        }

        public Builder grayscales(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultGrayscale> grayscales) {
            $.grayscales = grayscales;
            return this;
        }

        public Builder grayscales(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultGrayscale... grayscales) {
            return grayscales(List.of(grayscales));
        }

        public Builder hsls(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultHsl> hsls) {
            $.hsls = hsls;
            return this;
        }

        public Builder hsls(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultHsl... hsls) {
            return hsls(List.of(hsls));
        }

        public Builder hsvs(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultHsv> hsvs) {
            $.hsvs = hsvs;
            return this;
        }

        public Builder hsvs(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultHsv... hsvs) {
            return hsvs(List.of(hsvs));
        }

        public Builder ifDimensions(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultIfDimension> ifDimensions) {
            $.ifDimensions = ifDimensions;
            return this;
        }

        public Builder ifDimensions(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultIfDimension... ifDimensions) {
            return ifDimensions(List.of(ifDimensions));
        }

        public Builder ifOrientations(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultIfOrientation> ifOrientations) {
            $.ifOrientations = ifOrientations;
            return this;
        }

        public Builder ifOrientations(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultIfOrientation... ifOrientations) {
            return ifOrientations(List.of(ifOrientations));
        }

        public Builder imQueries(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultImQuery> imQueries) {
            $.imQueries = imQueries;
            return this;
        }

        public Builder imQueries(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultImQuery... imQueries) {
            return imQueries(List.of(imQueries));
        }

        public Builder maxColors(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultMaxColor> maxColors) {
            $.maxColors = maxColors;
            return this;
        }

        public Builder maxColors(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultMaxColor... maxColors) {
            return maxColors(List.of(maxColors));
        }

        public Builder mirrors(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultMirror> mirrors) {
            $.mirrors = mirrors;
            return this;
        }

        public Builder mirrors(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultMirror... mirrors) {
            return mirrors(List.of(mirrors));
        }

        public Builder monoHues(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultMonoHue> monoHues) {
            $.monoHues = monoHues;
            return this;
        }

        public Builder monoHues(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultMonoHue... monoHues) {
            return monoHues(List.of(monoHues));
        }

        public Builder opacities(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultOpacity> opacities) {
            $.opacities = opacities;
            return this;
        }

        public Builder opacities(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultOpacity... opacities) {
            return opacities(List.of(opacities));
        }

        public Builder regionOfInterestCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultRegionOfInterestCrop> regionOfInterestCrops) {
            $.regionOfInterestCrops = regionOfInterestCrops;
            return this;
        }

        public Builder regionOfInterestCrops(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultRegionOfInterestCrop... regionOfInterestCrops) {
            return regionOfInterestCrops(List.of(regionOfInterestCrops));
        }

        public Builder relativeCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultRelativeCrop> relativeCrops) {
            $.relativeCrops = relativeCrops;
            return this;
        }

        public Builder relativeCrops(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultRelativeCrop... relativeCrops) {
            return relativeCrops(List.of(relativeCrops));
        }

        public Builder removeColors(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultRemoveColor> removeColors) {
            $.removeColors = removeColors;
            return this;
        }

        public Builder removeColors(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultRemoveColor... removeColors) {
            return removeColors(List.of(removeColors));
        }

        public Builder resizes(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultResize> resizes) {
            $.resizes = resizes;
            return this;
        }

        public Builder resizes(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultResize... resizes) {
            return resizes(List.of(resizes));
        }

        public Builder rotates(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultRotate> rotates) {
            $.rotates = rotates;
            return this;
        }

        public Builder rotates(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultRotate... rotates) {
            return rotates(List.of(rotates));
        }

        public Builder scales(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultScale> scales) {
            $.scales = scales;
            return this;
        }

        public Builder scales(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultScale... scales) {
            return scales(List.of(scales));
        }

        public Builder shears(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultShears> shears) {
            $.shears = shears;
            return this;
        }

        public Builder shears(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultShears... shears) {
            return shears(List.of(shears));
        }

        public Builder trims(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultTrim> trims) {
            $.trims = trims;
            return this;
        }

        public Builder trims(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultTrim... trims) {
            return trims(List.of(trims));
        }

        public Builder unsharpMasks(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultUnsharpMask> unsharpMasks) {
            $.unsharpMasks = unsharpMasks;
            return this;
        }

        public Builder unsharpMasks(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultUnsharpMask... unsharpMasks) {
            return unsharpMasks(List.of(unsharpMasks));
        }

        public GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefault build() {
            return $;
        }
    }

}
