// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.trafficmanagement.inputs;

import com.pulumi.akamai.trafficmanagement.inputs.GtmDatacenterDefaultLoadObjectArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GtmDatacenterState extends com.pulumi.resources.ResourceArgs {

    public static final GtmDatacenterState Empty = new GtmDatacenterState();

    @Import(name="city")
    private @Nullable Output<String> city;

    public Optional<Output<String>> city() {
        return Optional.ofNullable(this.city);
    }

    @Import(name="cloneOf")
    private @Nullable Output<Integer> cloneOf;

    public Optional<Output<Integer>> cloneOf() {
        return Optional.ofNullable(this.cloneOf);
    }

    @Import(name="cloudServerHostHeaderOverride")
    private @Nullable Output<Boolean> cloudServerHostHeaderOverride;

    public Optional<Output<Boolean>> cloudServerHostHeaderOverride() {
        return Optional.ofNullable(this.cloudServerHostHeaderOverride);
    }

    @Import(name="cloudServerTargeting")
    private @Nullable Output<Boolean> cloudServerTargeting;

    public Optional<Output<Boolean>> cloudServerTargeting() {
        return Optional.ofNullable(this.cloudServerTargeting);
    }

    @Import(name="continent")
    private @Nullable Output<String> continent;

    public Optional<Output<String>> continent() {
        return Optional.ofNullable(this.continent);
    }

    @Import(name="country")
    private @Nullable Output<String> country;

    public Optional<Output<String>> country() {
        return Optional.ofNullable(this.country);
    }

    @Import(name="datacenterId")
    private @Nullable Output<Integer> datacenterId;

    public Optional<Output<Integer>> datacenterId() {
        return Optional.ofNullable(this.datacenterId);
    }

    @Import(name="defaultLoadObject")
    private @Nullable Output<GtmDatacenterDefaultLoadObjectArgs> defaultLoadObject;

    public Optional<Output<GtmDatacenterDefaultLoadObjectArgs>> defaultLoadObject() {
        return Optional.ofNullable(this.defaultLoadObject);
    }

    @Import(name="domain")
    private @Nullable Output<String> domain;

    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    @Import(name="latitude")
    private @Nullable Output<Double> latitude;

    public Optional<Output<Double>> latitude() {
        return Optional.ofNullable(this.latitude);
    }

    @Import(name="longitude")
    private @Nullable Output<Double> longitude;

    public Optional<Output<Double>> longitude() {
        return Optional.ofNullable(this.longitude);
    }

    @Import(name="nickname")
    private @Nullable Output<String> nickname;

    public Optional<Output<String>> nickname() {
        return Optional.ofNullable(this.nickname);
    }

    @Import(name="pingInterval")
    private @Nullable Output<Integer> pingInterval;

    public Optional<Output<Integer>> pingInterval() {
        return Optional.ofNullable(this.pingInterval);
    }

    @Import(name="pingPacketSize")
    private @Nullable Output<Integer> pingPacketSize;

    public Optional<Output<Integer>> pingPacketSize() {
        return Optional.ofNullable(this.pingPacketSize);
    }

    @Import(name="scorePenalty")
    private @Nullable Output<Integer> scorePenalty;

    public Optional<Output<Integer>> scorePenalty() {
        return Optional.ofNullable(this.scorePenalty);
    }

    @Import(name="servermonitorLivenessCount")
    private @Nullable Output<Integer> servermonitorLivenessCount;

    public Optional<Output<Integer>> servermonitorLivenessCount() {
        return Optional.ofNullable(this.servermonitorLivenessCount);
    }

    @Import(name="servermonitorLoadCount")
    private @Nullable Output<Integer> servermonitorLoadCount;

    public Optional<Output<Integer>> servermonitorLoadCount() {
        return Optional.ofNullable(this.servermonitorLoadCount);
    }

    @Import(name="servermonitorPool")
    private @Nullable Output<String> servermonitorPool;

    public Optional<Output<String>> servermonitorPool() {
        return Optional.ofNullable(this.servermonitorPool);
    }

    @Import(name="stateOrProvince")
    private @Nullable Output<String> stateOrProvince;

    public Optional<Output<String>> stateOrProvince() {
        return Optional.ofNullable(this.stateOrProvince);
    }

    @Import(name="virtual")
    private @Nullable Output<Boolean> virtual;

    public Optional<Output<Boolean>> virtual() {
        return Optional.ofNullable(this.virtual);
    }

    @Import(name="waitOnComplete")
    private @Nullable Output<Boolean> waitOnComplete;

    public Optional<Output<Boolean>> waitOnComplete() {
        return Optional.ofNullable(this.waitOnComplete);
    }

    private GtmDatacenterState() {}

    private GtmDatacenterState(GtmDatacenterState $) {
        this.city = $.city;
        this.cloneOf = $.cloneOf;
        this.cloudServerHostHeaderOverride = $.cloudServerHostHeaderOverride;
        this.cloudServerTargeting = $.cloudServerTargeting;
        this.continent = $.continent;
        this.country = $.country;
        this.datacenterId = $.datacenterId;
        this.defaultLoadObject = $.defaultLoadObject;
        this.domain = $.domain;
        this.latitude = $.latitude;
        this.longitude = $.longitude;
        this.nickname = $.nickname;
        this.pingInterval = $.pingInterval;
        this.pingPacketSize = $.pingPacketSize;
        this.scorePenalty = $.scorePenalty;
        this.servermonitorLivenessCount = $.servermonitorLivenessCount;
        this.servermonitorLoadCount = $.servermonitorLoadCount;
        this.servermonitorPool = $.servermonitorPool;
        this.stateOrProvince = $.stateOrProvince;
        this.virtual = $.virtual;
        this.waitOnComplete = $.waitOnComplete;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GtmDatacenterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GtmDatacenterState $;

        public Builder() {
            $ = new GtmDatacenterState();
        }

        public Builder(GtmDatacenterState defaults) {
            $ = new GtmDatacenterState(Objects.requireNonNull(defaults));
        }

        public Builder city(@Nullable Output<String> city) {
            $.city = city;
            return this;
        }

        public Builder city(String city) {
            return city(Output.of(city));
        }

        public Builder cloneOf(@Nullable Output<Integer> cloneOf) {
            $.cloneOf = cloneOf;
            return this;
        }

        public Builder cloneOf(Integer cloneOf) {
            return cloneOf(Output.of(cloneOf));
        }

        public Builder cloudServerHostHeaderOverride(@Nullable Output<Boolean> cloudServerHostHeaderOverride) {
            $.cloudServerHostHeaderOverride = cloudServerHostHeaderOverride;
            return this;
        }

        public Builder cloudServerHostHeaderOverride(Boolean cloudServerHostHeaderOverride) {
            return cloudServerHostHeaderOverride(Output.of(cloudServerHostHeaderOverride));
        }

        public Builder cloudServerTargeting(@Nullable Output<Boolean> cloudServerTargeting) {
            $.cloudServerTargeting = cloudServerTargeting;
            return this;
        }

        public Builder cloudServerTargeting(Boolean cloudServerTargeting) {
            return cloudServerTargeting(Output.of(cloudServerTargeting));
        }

        public Builder continent(@Nullable Output<String> continent) {
            $.continent = continent;
            return this;
        }

        public Builder continent(String continent) {
            return continent(Output.of(continent));
        }

        public Builder country(@Nullable Output<String> country) {
            $.country = country;
            return this;
        }

        public Builder country(String country) {
            return country(Output.of(country));
        }

        public Builder datacenterId(@Nullable Output<Integer> datacenterId) {
            $.datacenterId = datacenterId;
            return this;
        }

        public Builder datacenterId(Integer datacenterId) {
            return datacenterId(Output.of(datacenterId));
        }

        public Builder defaultLoadObject(@Nullable Output<GtmDatacenterDefaultLoadObjectArgs> defaultLoadObject) {
            $.defaultLoadObject = defaultLoadObject;
            return this;
        }

        public Builder defaultLoadObject(GtmDatacenterDefaultLoadObjectArgs defaultLoadObject) {
            return defaultLoadObject(Output.of(defaultLoadObject));
        }

        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        public Builder latitude(@Nullable Output<Double> latitude) {
            $.latitude = latitude;
            return this;
        }

        public Builder latitude(Double latitude) {
            return latitude(Output.of(latitude));
        }

        public Builder longitude(@Nullable Output<Double> longitude) {
            $.longitude = longitude;
            return this;
        }

        public Builder longitude(Double longitude) {
            return longitude(Output.of(longitude));
        }

        public Builder nickname(@Nullable Output<String> nickname) {
            $.nickname = nickname;
            return this;
        }

        public Builder nickname(String nickname) {
            return nickname(Output.of(nickname));
        }

        public Builder pingInterval(@Nullable Output<Integer> pingInterval) {
            $.pingInterval = pingInterval;
            return this;
        }

        public Builder pingInterval(Integer pingInterval) {
            return pingInterval(Output.of(pingInterval));
        }

        public Builder pingPacketSize(@Nullable Output<Integer> pingPacketSize) {
            $.pingPacketSize = pingPacketSize;
            return this;
        }

        public Builder pingPacketSize(Integer pingPacketSize) {
            return pingPacketSize(Output.of(pingPacketSize));
        }

        public Builder scorePenalty(@Nullable Output<Integer> scorePenalty) {
            $.scorePenalty = scorePenalty;
            return this;
        }

        public Builder scorePenalty(Integer scorePenalty) {
            return scorePenalty(Output.of(scorePenalty));
        }

        public Builder servermonitorLivenessCount(@Nullable Output<Integer> servermonitorLivenessCount) {
            $.servermonitorLivenessCount = servermonitorLivenessCount;
            return this;
        }

        public Builder servermonitorLivenessCount(Integer servermonitorLivenessCount) {
            return servermonitorLivenessCount(Output.of(servermonitorLivenessCount));
        }

        public Builder servermonitorLoadCount(@Nullable Output<Integer> servermonitorLoadCount) {
            $.servermonitorLoadCount = servermonitorLoadCount;
            return this;
        }

        public Builder servermonitorLoadCount(Integer servermonitorLoadCount) {
            return servermonitorLoadCount(Output.of(servermonitorLoadCount));
        }

        public Builder servermonitorPool(@Nullable Output<String> servermonitorPool) {
            $.servermonitorPool = servermonitorPool;
            return this;
        }

        public Builder servermonitorPool(String servermonitorPool) {
            return servermonitorPool(Output.of(servermonitorPool));
        }

        public Builder stateOrProvince(@Nullable Output<String> stateOrProvince) {
            $.stateOrProvince = stateOrProvince;
            return this;
        }

        public Builder stateOrProvince(String stateOrProvince) {
            return stateOrProvince(Output.of(stateOrProvince));
        }

        public Builder virtual(@Nullable Output<Boolean> virtual) {
            $.virtual = virtual;
            return this;
        }

        public Builder virtual(Boolean virtual) {
            return virtual(Output.of(virtual));
        }

        public Builder waitOnComplete(@Nullable Output<Boolean> waitOnComplete) {
            $.waitOnComplete = waitOnComplete;
            return this;
        }

        public Builder waitOnComplete(Boolean waitOnComplete) {
            return waitOnComplete(Output.of(waitOnComplete));
        }

        public GtmDatacenterState build() {
            return $;
        }
    }

}
