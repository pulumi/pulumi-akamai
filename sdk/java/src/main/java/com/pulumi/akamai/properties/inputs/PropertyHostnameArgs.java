// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.properties.inputs;

import com.pulumi.akamai.properties.inputs.PropertyHostnameCertStatusArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PropertyHostnameArgs extends com.pulumi.resources.ResourceArgs {

    public static final PropertyHostnameArgs Empty = new PropertyHostnameArgs();

    @Import(name="certProvisioningType", required=true)
    private Output<String> certProvisioningType;

    public Output<String> certProvisioningType() {
        return this.certProvisioningType;
    }

    @Import(name="certStatuses")
    private @Nullable Output<List<PropertyHostnameCertStatusArgs>> certStatuses;

    public Optional<Output<List<PropertyHostnameCertStatusArgs>>> certStatuses() {
        return Optional.ofNullable(this.certStatuses);
    }

    @Import(name="cnameFrom", required=true)
    private Output<String> cnameFrom;

    public Output<String> cnameFrom() {
        return this.cnameFrom;
    }

    @Import(name="cnameTo", required=true)
    private Output<String> cnameTo;

    public Output<String> cnameTo() {
        return this.cnameTo;
    }

    @Import(name="cnameType")
    private @Nullable Output<String> cnameType;

    public Optional<Output<String>> cnameType() {
        return Optional.ofNullable(this.cnameType);
    }

    @Import(name="edgeHostnameId")
    private @Nullable Output<String> edgeHostnameId;

    public Optional<Output<String>> edgeHostnameId() {
        return Optional.ofNullable(this.edgeHostnameId);
    }

    private PropertyHostnameArgs() {}

    private PropertyHostnameArgs(PropertyHostnameArgs $) {
        this.certProvisioningType = $.certProvisioningType;
        this.certStatuses = $.certStatuses;
        this.cnameFrom = $.cnameFrom;
        this.cnameTo = $.cnameTo;
        this.cnameType = $.cnameType;
        this.edgeHostnameId = $.edgeHostnameId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PropertyHostnameArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PropertyHostnameArgs $;

        public Builder() {
            $ = new PropertyHostnameArgs();
        }

        public Builder(PropertyHostnameArgs defaults) {
            $ = new PropertyHostnameArgs(Objects.requireNonNull(defaults));
        }

        public Builder certProvisioningType(Output<String> certProvisioningType) {
            $.certProvisioningType = certProvisioningType;
            return this;
        }

        public Builder certProvisioningType(String certProvisioningType) {
            return certProvisioningType(Output.of(certProvisioningType));
        }

        public Builder certStatuses(@Nullable Output<List<PropertyHostnameCertStatusArgs>> certStatuses) {
            $.certStatuses = certStatuses;
            return this;
        }

        public Builder certStatuses(List<PropertyHostnameCertStatusArgs> certStatuses) {
            return certStatuses(Output.of(certStatuses));
        }

        public Builder certStatuses(PropertyHostnameCertStatusArgs... certStatuses) {
            return certStatuses(List.of(certStatuses));
        }

        public Builder cnameFrom(Output<String> cnameFrom) {
            $.cnameFrom = cnameFrom;
            return this;
        }

        public Builder cnameFrom(String cnameFrom) {
            return cnameFrom(Output.of(cnameFrom));
        }

        public Builder cnameTo(Output<String> cnameTo) {
            $.cnameTo = cnameTo;
            return this;
        }

        public Builder cnameTo(String cnameTo) {
            return cnameTo(Output.of(cnameTo));
        }

        public Builder cnameType(@Nullable Output<String> cnameType) {
            $.cnameType = cnameType;
            return this;
        }

        public Builder cnameType(String cnameType) {
            return cnameType(Output.of(cnameType));
        }

        public Builder edgeHostnameId(@Nullable Output<String> edgeHostnameId) {
            $.edgeHostnameId = edgeHostnameId;
            return this;
        }

        public Builder edgeHostnameId(String edgeHostnameId) {
            return edgeHostnameId(Output.of(edgeHostnameId));
        }

        public PropertyHostnameArgs build() {
            $.certProvisioningType = Objects.requireNonNull($.certProvisioningType, "expected parameter 'certProvisioningType' to be non-null");
            $.cnameFrom = Objects.requireNonNull($.cnameFrom, "expected parameter 'cnameFrom' to be non-null");
            $.cnameTo = Objects.requireNonNull($.cnameTo, "expected parameter 'cnameTo' to be non-null");
            return $;
        }
    }

}
