// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyRulesBuilderRulesV20250218BehaviorClientCertificateAuthArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetPropertyRulesBuilderRulesV20250218BehaviorClientCertificateAuthArgs Empty = new GetPropertyRulesBuilderRulesV20250218BehaviorClientCertificateAuthArgs();

    /**
     * Specify client certificate attributes to include in the `Client-To-Edge` authentication header that&#39;s sent to your origin server.
     * 
     */
    @Import(name="clientCertificateAttributes")
    private @Nullable Output<List<String>> clientCertificateAttributes;

    /**
     * @return Specify client certificate attributes to include in the `Client-To-Edge` authentication header that&#39;s sent to your origin server.
     * 
     */
    public Optional<Output<List<String>>> clientCertificateAttributes() {
        return Optional.ofNullable(this.clientCertificateAttributes);
    }

    /**
     * Constructs the `Client-To-Edge` authentication header using information from the client to edge mTLS handshake and forwards it to your origin. You can configure your origin to acknowledge the header to enable transitive trust. Some form of the client x.509 certificate needs to be included in the header. You can include the full certificate or specific attributes.
     * 
     */
    @Import(name="enable")
    private @Nullable Output<Boolean> enable;

    /**
     * @return Constructs the `Client-To-Edge` authentication header using information from the client to edge mTLS handshake and forwards it to your origin. You can configure your origin to acknowledge the header to enable transitive trust. Some form of the client x.509 certificate needs to be included in the header. You can include the full certificate or specific attributes.
     * 
     */
    public Optional<Output<Boolean>> enable() {
        return Optional.ofNullable(this.enable);
    }

    /**
     * Whether to include the current validation status of the client certificate in the `Client-To-Edge` authentication header. This verifies the validation status of the certificate, regardless of the certificate attributes you&#39;re including in the header.
     * 
     */
    @Import(name="enableClientCertificateValidationStatus")
    private @Nullable Output<Boolean> enableClientCertificateValidationStatus;

    /**
     * @return Whether to include the current validation status of the client certificate in the `Client-To-Edge` authentication header. This verifies the validation status of the certificate, regardless of the certificate attributes you&#39;re including in the header.
     * 
     */
    public Optional<Output<Boolean>> enableClientCertificateValidationStatus() {
        return Optional.ofNullable(this.enableClientCertificateValidationStatus);
    }

    /**
     * Whether to include the complete client certificate in the header, in its binary (DER) format. DER-formatted certificates leave out the `BEGIN CERTIFICATE/END CERTIFICATE` statements and most often use the `.der` extension. Alternatively, you can specify individual `clientCertificateAttributes` you want included in the request.
     * 
     */
    @Import(name="enableCompleteClientCertificate")
    private @Nullable Output<Boolean> enableCompleteClientCertificate;

    /**
     * @return Whether to include the complete client certificate in the header, in its binary (DER) format. DER-formatted certificates leave out the `BEGIN CERTIFICATE/END CERTIFICATE` statements and most often use the `.der` extension. Alternatively, you can specify individual `clientCertificateAttributes` you want included in the request.
     * 
     */
    public Optional<Output<Boolean>> enableCompleteClientCertificate() {
        return Optional.ofNullable(this.enableCompleteClientCertificate);
    }

    /**
     * Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    @Import(name="locked")
    private @Nullable Output<Boolean> locked;

    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Output<Boolean>> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * This option is for internal usage only.
     * 
     */
    @Import(name="templateUuid")
    private @Nullable Output<String> templateUuid;

    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<Output<String>> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }

    /**
     * A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private GetPropertyRulesBuilderRulesV20250218BehaviorClientCertificateAuthArgs() {}

    private GetPropertyRulesBuilderRulesV20250218BehaviorClientCertificateAuthArgs(GetPropertyRulesBuilderRulesV20250218BehaviorClientCertificateAuthArgs $) {
        this.clientCertificateAttributes = $.clientCertificateAttributes;
        this.enable = $.enable;
        this.enableClientCertificateValidationStatus = $.enableClientCertificateValidationStatus;
        this.enableCompleteClientCertificate = $.enableCompleteClientCertificate;
        this.locked = $.locked;
        this.templateUuid = $.templateUuid;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesBuilderRulesV20250218BehaviorClientCertificateAuthArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesBuilderRulesV20250218BehaviorClientCertificateAuthArgs $;

        public Builder() {
            $ = new GetPropertyRulesBuilderRulesV20250218BehaviorClientCertificateAuthArgs();
        }

        public Builder(GetPropertyRulesBuilderRulesV20250218BehaviorClientCertificateAuthArgs defaults) {
            $ = new GetPropertyRulesBuilderRulesV20250218BehaviorClientCertificateAuthArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientCertificateAttributes Specify client certificate attributes to include in the `Client-To-Edge` authentication header that&#39;s sent to your origin server.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificateAttributes(@Nullable Output<List<String>> clientCertificateAttributes) {
            $.clientCertificateAttributes = clientCertificateAttributes;
            return this;
        }

        /**
         * @param clientCertificateAttributes Specify client certificate attributes to include in the `Client-To-Edge` authentication header that&#39;s sent to your origin server.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificateAttributes(List<String> clientCertificateAttributes) {
            return clientCertificateAttributes(Output.of(clientCertificateAttributes));
        }

        /**
         * @param clientCertificateAttributes Specify client certificate attributes to include in the `Client-To-Edge` authentication header that&#39;s sent to your origin server.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificateAttributes(String... clientCertificateAttributes) {
            return clientCertificateAttributes(List.of(clientCertificateAttributes));
        }

        /**
         * @param enable Constructs the `Client-To-Edge` authentication header using information from the client to edge mTLS handshake and forwards it to your origin. You can configure your origin to acknowledge the header to enable transitive trust. Some form of the client x.509 certificate needs to be included in the header. You can include the full certificate or specific attributes.
         * 
         * @return builder
         * 
         */
        public Builder enable(@Nullable Output<Boolean> enable) {
            $.enable = enable;
            return this;
        }

        /**
         * @param enable Constructs the `Client-To-Edge` authentication header using information from the client to edge mTLS handshake and forwards it to your origin. You can configure your origin to acknowledge the header to enable transitive trust. Some form of the client x.509 certificate needs to be included in the header. You can include the full certificate or specific attributes.
         * 
         * @return builder
         * 
         */
        public Builder enable(Boolean enable) {
            return enable(Output.of(enable));
        }

        /**
         * @param enableClientCertificateValidationStatus Whether to include the current validation status of the client certificate in the `Client-To-Edge` authentication header. This verifies the validation status of the certificate, regardless of the certificate attributes you&#39;re including in the header.
         * 
         * @return builder
         * 
         */
        public Builder enableClientCertificateValidationStatus(@Nullable Output<Boolean> enableClientCertificateValidationStatus) {
            $.enableClientCertificateValidationStatus = enableClientCertificateValidationStatus;
            return this;
        }

        /**
         * @param enableClientCertificateValidationStatus Whether to include the current validation status of the client certificate in the `Client-To-Edge` authentication header. This verifies the validation status of the certificate, regardless of the certificate attributes you&#39;re including in the header.
         * 
         * @return builder
         * 
         */
        public Builder enableClientCertificateValidationStatus(Boolean enableClientCertificateValidationStatus) {
            return enableClientCertificateValidationStatus(Output.of(enableClientCertificateValidationStatus));
        }

        /**
         * @param enableCompleteClientCertificate Whether to include the complete client certificate in the header, in its binary (DER) format. DER-formatted certificates leave out the `BEGIN CERTIFICATE/END CERTIFICATE` statements and most often use the `.der` extension. Alternatively, you can specify individual `clientCertificateAttributes` you want included in the request.
         * 
         * @return builder
         * 
         */
        public Builder enableCompleteClientCertificate(@Nullable Output<Boolean> enableCompleteClientCertificate) {
            $.enableCompleteClientCertificate = enableCompleteClientCertificate;
            return this;
        }

        /**
         * @param enableCompleteClientCertificate Whether to include the complete client certificate in the header, in its binary (DER) format. DER-formatted certificates leave out the `BEGIN CERTIFICATE/END CERTIFICATE` statements and most often use the `.der` extension. Alternatively, you can specify individual `clientCertificateAttributes` you want included in the request.
         * 
         * @return builder
         * 
         */
        public Builder enableCompleteClientCertificate(Boolean enableCompleteClientCertificate) {
            return enableCompleteClientCertificate(Output.of(enableCompleteClientCertificate));
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(@Nullable Output<Boolean> locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(Boolean locked) {
            return locked(Output.of(locked));
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(@Nullable Output<String> templateUuid) {
            $.templateUuid = templateUuid;
            return this;
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(String templateUuid) {
            return templateUuid(Output.of(templateUuid));
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public GetPropertyRulesBuilderRulesV20250218BehaviorClientCertificateAuthArgs build() {
            return $;
        }
    }

}
