// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetImagingPolicyImagePolicyPostBreakpointTransformationHsv {
    /**
     * @return The number of degrees to rotate colors around the color wheel, `0.0` by default.
     * 
     */
    private @Nullable String hue;
    /**
     * @return The number of degrees to rotate colors around the color wheel, `0.0` by default.
     * 
     */
    private @Nullable String hueVar;
    /**
     * @return A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
     * 
     */
    private @Nullable String saturation;
    /**
     * @return A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
     * 
     */
    private @Nullable String saturationVar;
    /**
     * @return A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
     * 
     */
    private @Nullable String value;
    /**
     * @return A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
     * 
     */
    private @Nullable String valueVar;

    private GetImagingPolicyImagePolicyPostBreakpointTransformationHsv() {}
    /**
     * @return The number of degrees to rotate colors around the color wheel, `0.0` by default.
     * 
     */
    public Optional<String> hue() {
        return Optional.ofNullable(this.hue);
    }
    /**
     * @return The number of degrees to rotate colors around the color wheel, `0.0` by default.
     * 
     */
    public Optional<String> hueVar() {
        return Optional.ofNullable(this.hueVar);
    }
    /**
     * @return A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
     * 
     */
    public Optional<String> saturation() {
        return Optional.ofNullable(this.saturation);
    }
    /**
     * @return A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
     * 
     */
    public Optional<String> saturationVar() {
        return Optional.ofNullable(this.saturationVar);
    }
    /**
     * @return A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
     * 
     */
    public Optional<String> value() {
        return Optional.ofNullable(this.value);
    }
    /**
     * @return A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
     * 
     */
    public Optional<String> valueVar() {
        return Optional.ofNullable(this.valueVar);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImagingPolicyImagePolicyPostBreakpointTransformationHsv defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String hue;
        private @Nullable String hueVar;
        private @Nullable String saturation;
        private @Nullable String saturationVar;
        private @Nullable String value;
        private @Nullable String valueVar;
        public Builder() {}
        public Builder(GetImagingPolicyImagePolicyPostBreakpointTransformationHsv defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hue = defaults.hue;
    	      this.hueVar = defaults.hueVar;
    	      this.saturation = defaults.saturation;
    	      this.saturationVar = defaults.saturationVar;
    	      this.value = defaults.value;
    	      this.valueVar = defaults.valueVar;
        }

        @CustomType.Setter
        public Builder hue(@Nullable String hue) {

            this.hue = hue;
            return this;
        }
        @CustomType.Setter
        public Builder hueVar(@Nullable String hueVar) {

            this.hueVar = hueVar;
            return this;
        }
        @CustomType.Setter
        public Builder saturation(@Nullable String saturation) {

            this.saturation = saturation;
            return this;
        }
        @CustomType.Setter
        public Builder saturationVar(@Nullable String saturationVar) {

            this.saturationVar = saturationVar;
            return this;
        }
        @CustomType.Setter
        public Builder value(@Nullable String value) {

            this.value = value;
            return this;
        }
        @CustomType.Setter
        public Builder valueVar(@Nullable String valueVar) {

            this.valueVar = valueVar;
            return this;
        }
        public GetImagingPolicyImagePolicyPostBreakpointTransformationHsv build() {
            final var _resultValue = new GetImagingPolicyImagePolicyPostBreakpointTransformationHsv();
            _resultValue.hue = hue;
            _resultValue.hueVar = hueVar;
            _resultValue.saturation = saturation;
            _resultValue.saturationVar = saturationVar;
            _resultValue.value = value;
            _resultValue.valueVar = valueVar;
            return _resultValue;
        }
    }
}
