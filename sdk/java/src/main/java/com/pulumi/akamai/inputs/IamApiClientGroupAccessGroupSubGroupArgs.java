// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IamApiClientGroupAccessGroupSubGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final IamApiClientGroupAccessGroupSubGroupArgs Empty = new IamApiClientGroupAccessGroupSubGroupArgs();

    /**
     * A unique identifier for the group.
     * 
     */
    @Import(name="groupId", required=true)
    private Output<Integer> groupId;

    /**
     * @return A unique identifier for the group.
     * 
     */
    public Output<Integer> groupId() {
        return this.groupId;
    }

    /**
     * A human-readable name for the group.
     * 
     */
    @Import(name="groupName")
    private @Nullable Output<String> groupName;

    /**
     * @return A human-readable name for the group.
     * 
     */
    public Optional<Output<String>> groupName() {
        return Optional.ofNullable(this.groupName);
    }

    /**
     * Blocks the API client access to the group&#39;s child groups.
     * 
     */
    @Import(name="isBlocked")
    private @Nullable Output<Boolean> isBlocked;

    /**
     * @return Blocks the API client access to the group&#39;s child groups.
     * 
     */
    public Optional<Output<Boolean>> isBlocked() {
        return Optional.ofNullable(this.isBlocked);
    }

    /**
     * A unique identifier for the parent group within the group tree.
     * 
     */
    @Import(name="parentGroupId")
    private @Nullable Output<Integer> parentGroupId;

    /**
     * @return A unique identifier for the parent group within the group tree.
     * 
     */
    public Optional<Output<Integer>> parentGroupId() {
        return Optional.ofNullable(this.parentGroupId);
    }

    /**
     * A human-readable description for the role to convey its use.
     * 
     */
    @Import(name="roleDescription")
    private @Nullable Output<String> roleDescription;

    /**
     * @return A human-readable description for the role to convey its use.
     * 
     */
    public Optional<Output<String>> roleDescription() {
        return Optional.ofNullable(this.roleDescription);
    }

    /**
     * A unique identifier for the role.
     * 
     */
    @Import(name="roleId", required=true)
    private Output<Integer> roleId;

    /**
     * @return A unique identifier for the role.
     * 
     */
    public Output<Integer> roleId() {
        return this.roleId;
    }

    /**
     * A human-readable name for the role.
     * 
     */
    @Import(name="roleName")
    private @Nullable Output<String> roleName;

    /**
     * @return A human-readable name for the role.
     * 
     */
    public Optional<Output<String>> roleName() {
        return Optional.ofNullable(this.roleName);
    }

    /**
     * Groups the API client can access.
     * 
     */
    @Import(name="subGroups")
    private @Nullable Output<List<IamApiClientGroupAccessGroupSubGroupArgs>> subGroups;

    /**
     * @return Groups the API client can access.
     * 
     */
    public Optional<Output<List<IamApiClientGroupAccessGroupSubGroupArgs>>> subGroups() {
        return Optional.ofNullable(this.subGroups);
    }

    private IamApiClientGroupAccessGroupSubGroupArgs() {}

    private IamApiClientGroupAccessGroupSubGroupArgs(IamApiClientGroupAccessGroupSubGroupArgs $) {
        this.groupId = $.groupId;
        this.groupName = $.groupName;
        this.isBlocked = $.isBlocked;
        this.parentGroupId = $.parentGroupId;
        this.roleDescription = $.roleDescription;
        this.roleId = $.roleId;
        this.roleName = $.roleName;
        this.subGroups = $.subGroups;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IamApiClientGroupAccessGroupSubGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IamApiClientGroupAccessGroupSubGroupArgs $;

        public Builder() {
            $ = new IamApiClientGroupAccessGroupSubGroupArgs();
        }

        public Builder(IamApiClientGroupAccessGroupSubGroupArgs defaults) {
            $ = new IamApiClientGroupAccessGroupSubGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param groupId A unique identifier for the group.
         * 
         * @return builder
         * 
         */
        public Builder groupId(Output<Integer> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId A unique identifier for the group.
         * 
         * @return builder
         * 
         */
        public Builder groupId(Integer groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param groupName A human-readable name for the group.
         * 
         * @return builder
         * 
         */
        public Builder groupName(@Nullable Output<String> groupName) {
            $.groupName = groupName;
            return this;
        }

        /**
         * @param groupName A human-readable name for the group.
         * 
         * @return builder
         * 
         */
        public Builder groupName(String groupName) {
            return groupName(Output.of(groupName));
        }

        /**
         * @param isBlocked Blocks the API client access to the group&#39;s child groups.
         * 
         * @return builder
         * 
         */
        public Builder isBlocked(@Nullable Output<Boolean> isBlocked) {
            $.isBlocked = isBlocked;
            return this;
        }

        /**
         * @param isBlocked Blocks the API client access to the group&#39;s child groups.
         * 
         * @return builder
         * 
         */
        public Builder isBlocked(Boolean isBlocked) {
            return isBlocked(Output.of(isBlocked));
        }

        /**
         * @param parentGroupId A unique identifier for the parent group within the group tree.
         * 
         * @return builder
         * 
         */
        public Builder parentGroupId(@Nullable Output<Integer> parentGroupId) {
            $.parentGroupId = parentGroupId;
            return this;
        }

        /**
         * @param parentGroupId A unique identifier for the parent group within the group tree.
         * 
         * @return builder
         * 
         */
        public Builder parentGroupId(Integer parentGroupId) {
            return parentGroupId(Output.of(parentGroupId));
        }

        /**
         * @param roleDescription A human-readable description for the role to convey its use.
         * 
         * @return builder
         * 
         */
        public Builder roleDescription(@Nullable Output<String> roleDescription) {
            $.roleDescription = roleDescription;
            return this;
        }

        /**
         * @param roleDescription A human-readable description for the role to convey its use.
         * 
         * @return builder
         * 
         */
        public Builder roleDescription(String roleDescription) {
            return roleDescription(Output.of(roleDescription));
        }

        /**
         * @param roleId A unique identifier for the role.
         * 
         * @return builder
         * 
         */
        public Builder roleId(Output<Integer> roleId) {
            $.roleId = roleId;
            return this;
        }

        /**
         * @param roleId A unique identifier for the role.
         * 
         * @return builder
         * 
         */
        public Builder roleId(Integer roleId) {
            return roleId(Output.of(roleId));
        }

        /**
         * @param roleName A human-readable name for the role.
         * 
         * @return builder
         * 
         */
        public Builder roleName(@Nullable Output<String> roleName) {
            $.roleName = roleName;
            return this;
        }

        /**
         * @param roleName A human-readable name for the role.
         * 
         * @return builder
         * 
         */
        public Builder roleName(String roleName) {
            return roleName(Output.of(roleName));
        }

        /**
         * @param subGroups Groups the API client can access.
         * 
         * @return builder
         * 
         */
        public Builder subGroups(@Nullable Output<List<IamApiClientGroupAccessGroupSubGroupArgs>> subGroups) {
            $.subGroups = subGroups;
            return this;
        }

        /**
         * @param subGroups Groups the API client can access.
         * 
         * @return builder
         * 
         */
        public Builder subGroups(List<IamApiClientGroupAccessGroupSubGroupArgs> subGroups) {
            return subGroups(Output.of(subGroups));
        }

        /**
         * @param subGroups Groups the API client can access.
         * 
         * @return builder
         * 
         */
        public Builder subGroups(IamApiClientGroupAccessGroupSubGroupArgs... subGroups) {
            return subGroups(List.of(subGroups));
        }

        public IamApiClientGroupAccessGroupSubGroupArgs build() {
            if ($.groupId == null) {
                throw new MissingRequiredPropertyException("IamApiClientGroupAccessGroupSubGroupArgs", "groupId");
            }
            if ($.roleId == null) {
                throw new MissingRequiredPropertyException("IamApiClientGroupAccessGroupSubGroupArgs", "roleId");
            }
            return $;
        }
    }

}
