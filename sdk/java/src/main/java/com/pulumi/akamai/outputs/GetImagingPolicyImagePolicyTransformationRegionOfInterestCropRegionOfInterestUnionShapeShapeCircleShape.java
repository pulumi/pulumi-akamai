// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenter;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShape {
    /**
     * @return Defines coordinates for a single point, to help define polygons and rectangles. Each point may be an object with `x`and `y` members, or a two-element array.
     * 
     */
    private GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenter center;
    /**
     * @return The radius of the circle measured in pixels.
     * 
     */
    private @Nullable String radius;
    /**
     * @return The radius of the circle measured in pixels.
     * 
     */
    private @Nullable String radiusVar;

    private GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShape() {}
    /**
     * @return Defines coordinates for a single point, to help define polygons and rectangles. Each point may be an object with `x`and `y` members, or a two-element array.
     * 
     */
    public GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenter center() {
        return this.center;
    }
    /**
     * @return The radius of the circle measured in pixels.
     * 
     */
    public Optional<String> radius() {
        return Optional.ofNullable(this.radius);
    }
    /**
     * @return The radius of the circle measured in pixels.
     * 
     */
    public Optional<String> radiusVar() {
        return Optional.ofNullable(this.radiusVar);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShape defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenter center;
        private @Nullable String radius;
        private @Nullable String radiusVar;
        public Builder() {}
        public Builder(GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShape defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.center = defaults.center;
    	      this.radius = defaults.radius;
    	      this.radiusVar = defaults.radiusVar;
        }

        @CustomType.Setter
        public Builder center(GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenter center) {
            if (center == null) {
              throw new MissingRequiredPropertyException("GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShape", "center");
            }
            this.center = center;
            return this;
        }
        @CustomType.Setter
        public Builder radius(@Nullable String radius) {

            this.radius = radius;
            return this;
        }
        @CustomType.Setter
        public Builder radiusVar(@Nullable String radiusVar) {

            this.radiusVar = radiusVar;
            return this;
        }
        public GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShape build() {
            final var _resultValue = new GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShape();
            _resultValue.center = center;
            _resultValue.radius = radius;
            _resultValue.radiusVar = radiusVar;
            return _resultValue;
        }
    }
}
