// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetIamAllowedApisAllowedApi {
    /**
     * @return API access levels, possible values are READ-ONLY, READ-WRITE, CREDENTIAL-READ-ONLY and CREDENTIAL-READ-WRITE.
     * 
     */
    private List<String> accessLevels;
    /**
     * @return A unique identifier for each API.
     * 
     */
    private Integer apiId;
    /**
     * @return Name of the API.
     * 
     */
    private String apiName;
    /**
     * @return A human-readable name for the API.
     * 
     */
    private String description;
    /**
     * @return A link to more information about the API.
     * 
     */
    private String documentationUrl;
    /**
     * @return Specifies where the API can access resources.
     * 
     */
    private String endpoint;
    /**
     * @return Confirms access to the API.
     * 
     */
    private Boolean hasAccess;
    /**
     * @return Unique identifier for the API&#39;s service provider.
     * 
     */
    private Integer serviceProviderId;

    private GetIamAllowedApisAllowedApi() {}
    /**
     * @return API access levels, possible values are READ-ONLY, READ-WRITE, CREDENTIAL-READ-ONLY and CREDENTIAL-READ-WRITE.
     * 
     */
    public List<String> accessLevels() {
        return this.accessLevels;
    }
    /**
     * @return A unique identifier for each API.
     * 
     */
    public Integer apiId() {
        return this.apiId;
    }
    /**
     * @return Name of the API.
     * 
     */
    public String apiName() {
        return this.apiName;
    }
    /**
     * @return A human-readable name for the API.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A link to more information about the API.
     * 
     */
    public String documentationUrl() {
        return this.documentationUrl;
    }
    /**
     * @return Specifies where the API can access resources.
     * 
     */
    public String endpoint() {
        return this.endpoint;
    }
    /**
     * @return Confirms access to the API.
     * 
     */
    public Boolean hasAccess() {
        return this.hasAccess;
    }
    /**
     * @return Unique identifier for the API&#39;s service provider.
     * 
     */
    public Integer serviceProviderId() {
        return this.serviceProviderId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIamAllowedApisAllowedApi defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> accessLevels;
        private Integer apiId;
        private String apiName;
        private String description;
        private String documentationUrl;
        private String endpoint;
        private Boolean hasAccess;
        private Integer serviceProviderId;
        public Builder() {}
        public Builder(GetIamAllowedApisAllowedApi defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLevels = defaults.accessLevels;
    	      this.apiId = defaults.apiId;
    	      this.apiName = defaults.apiName;
    	      this.description = defaults.description;
    	      this.documentationUrl = defaults.documentationUrl;
    	      this.endpoint = defaults.endpoint;
    	      this.hasAccess = defaults.hasAccess;
    	      this.serviceProviderId = defaults.serviceProviderId;
        }

        @CustomType.Setter
        public Builder accessLevels(List<String> accessLevels) {
            if (accessLevels == null) {
              throw new MissingRequiredPropertyException("GetIamAllowedApisAllowedApi", "accessLevels");
            }
            this.accessLevels = accessLevels;
            return this;
        }
        public Builder accessLevels(String... accessLevels) {
            return accessLevels(List.of(accessLevels));
        }
        @CustomType.Setter
        public Builder apiId(Integer apiId) {
            if (apiId == null) {
              throw new MissingRequiredPropertyException("GetIamAllowedApisAllowedApi", "apiId");
            }
            this.apiId = apiId;
            return this;
        }
        @CustomType.Setter
        public Builder apiName(String apiName) {
            if (apiName == null) {
              throw new MissingRequiredPropertyException("GetIamAllowedApisAllowedApi", "apiName");
            }
            this.apiName = apiName;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetIamAllowedApisAllowedApi", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder documentationUrl(String documentationUrl) {
            if (documentationUrl == null) {
              throw new MissingRequiredPropertyException("GetIamAllowedApisAllowedApi", "documentationUrl");
            }
            this.documentationUrl = documentationUrl;
            return this;
        }
        @CustomType.Setter
        public Builder endpoint(String endpoint) {
            if (endpoint == null) {
              throw new MissingRequiredPropertyException("GetIamAllowedApisAllowedApi", "endpoint");
            }
            this.endpoint = endpoint;
            return this;
        }
        @CustomType.Setter
        public Builder hasAccess(Boolean hasAccess) {
            if (hasAccess == null) {
              throw new MissingRequiredPropertyException("GetIamAllowedApisAllowedApi", "hasAccess");
            }
            this.hasAccess = hasAccess;
            return this;
        }
        @CustomType.Setter
        public Builder serviceProviderId(Integer serviceProviderId) {
            if (serviceProviderId == null) {
              throw new MissingRequiredPropertyException("GetIamAllowedApisAllowedApi", "serviceProviderId");
            }
            this.serviceProviderId = serviceProviderId;
            return this;
        }
        public GetIamAllowedApisAllowedApi build() {
            final var _resultValue = new GetIamAllowedApisAllowedApi();
            _resultValue.accessLevels = accessLevels;
            _resultValue.apiId = apiId;
            _resultValue.apiName = apiName;
            _resultValue.description = description;
            _resultValue.documentationUrl = documentationUrl;
            _resultValue.endpoint = endpoint;
            _resultValue.hasAccess = hasAccess;
            _resultValue.serviceProviderId = serviceProviderId;
            return _resultValue;
        }
    }
}
