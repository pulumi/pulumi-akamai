// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc {
    /**
     * @return The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
     * 
     */
    private String conditionalSamplingFrequency;
    /**
     * @return Enable diagnostic data beacons for consumption by the Broadcast Operations Control Center.
     * 
     */
    private Boolean enabled;
    /**
     * @return Select whether to beacon diagnostics data for internal ORIGIN_ONLY, MIDGRESS_ONLY, or both ORIGIN_AND_MIDGRESS forwards.
     * 
     */
    private String forwardType;
    /**
     * @return Select whether to beacon diagnostics data for EDGE_ONLY or EDGE_AND_MIDGRESS requests.
     * 
     */
    private String requestType;
    /**
     * @return The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
     * 
     */
    private String samplingFrequency;

    private GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc() {}
    /**
     * @return The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
     * 
     */
    public String conditionalSamplingFrequency() {
        return this.conditionalSamplingFrequency;
    }
    /**
     * @return Enable diagnostic data beacons for consumption by the Broadcast Operations Control Center.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Select whether to beacon diagnostics data for internal ORIGIN_ONLY, MIDGRESS_ONLY, or both ORIGIN_AND_MIDGRESS forwards.
     * 
     */
    public String forwardType() {
        return this.forwardType;
    }
    /**
     * @return Select whether to beacon diagnostics data for EDGE_ONLY or EDGE_AND_MIDGRESS requests.
     * 
     */
    public String requestType() {
        return this.requestType;
    }
    /**
     * @return The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
     * 
     */
    public String samplingFrequency() {
        return this.samplingFrequency;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String conditionalSamplingFrequency;
        private Boolean enabled;
        private String forwardType;
        private String requestType;
        private String samplingFrequency;
        public Builder() {}
        public Builder(GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conditionalSamplingFrequency = defaults.conditionalSamplingFrequency;
    	      this.enabled = defaults.enabled;
    	      this.forwardType = defaults.forwardType;
    	      this.requestType = defaults.requestType;
    	      this.samplingFrequency = defaults.samplingFrequency;
        }

        @CustomType.Setter
        public Builder conditionalSamplingFrequency(String conditionalSamplingFrequency) {
            if (conditionalSamplingFrequency == null) {
              throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc", "conditionalSamplingFrequency");
            }
            this.conditionalSamplingFrequency = conditionalSamplingFrequency;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder forwardType(String forwardType) {
            if (forwardType == null) {
              throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc", "forwardType");
            }
            this.forwardType = forwardType;
            return this;
        }
        @CustomType.Setter
        public Builder requestType(String requestType) {
            if (requestType == null) {
              throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc", "requestType");
            }
            this.requestType = requestType;
            return this;
        }
        @CustomType.Setter
        public Builder samplingFrequency(String samplingFrequency) {
            if (samplingFrequency == null) {
              throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc", "samplingFrequency");
            }
            this.samplingFrequency = samplingFrequency;
            return this;
        }
        public GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc build() {
            final var _resultValue = new GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc();
            _resultValue.conditionalSamplingFrequency = conditionalSamplingFrequency;
            _resultValue.enabled = enabled;
            _resultValue.forwardType = forwardType;
            _resultValue.requestType = requestType;
            _resultValue.samplingFrequency = samplingFrequency;
            return _resultValue;
        }
    }
}
