// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationBackgroundColorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationBlurArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationChromaKeyArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationCompositeArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationCompoundArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationContrastArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationGoopArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationGrayscaleArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationHslArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationHsvArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfDimensionArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfOrientationArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationMaxColorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationMirrorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationMonoHueArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationOpacityArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationRemoveColorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationUnsharpMaskArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationArgs Empty = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationArgs();

    @Import(name="backgroundColors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationBackgroundColorArgs>> backgroundColors;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationBackgroundColorArgs>>> backgroundColors() {
        return Optional.ofNullable(this.backgroundColors);
    }

    @Import(name="blurs")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationBlurArgs>> blurs;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationBlurArgs>>> blurs() {
        return Optional.ofNullable(this.blurs);
    }

    @Import(name="chromaKeys")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationChromaKeyArgs>> chromaKeys;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationChromaKeyArgs>>> chromaKeys() {
        return Optional.ofNullable(this.chromaKeys);
    }

    @Import(name="composites")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationCompositeArgs>> composites;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationCompositeArgs>>> composites() {
        return Optional.ofNullable(this.composites);
    }

    @Import(name="compounds")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationCompoundArgs>> compounds;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationCompoundArgs>>> compounds() {
        return Optional.ofNullable(this.compounds);
    }

    @Import(name="contrasts")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationContrastArgs>> contrasts;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationContrastArgs>>> contrasts() {
        return Optional.ofNullable(this.contrasts);
    }

    @Import(name="goops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationGoopArgs>> goops;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationGoopArgs>>> goops() {
        return Optional.ofNullable(this.goops);
    }

    @Import(name="grayscales")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationGrayscaleArgs>> grayscales;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationGrayscaleArgs>>> grayscales() {
        return Optional.ofNullable(this.grayscales);
    }

    @Import(name="hsls")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationHslArgs>> hsls;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationHslArgs>>> hsls() {
        return Optional.ofNullable(this.hsls);
    }

    @Import(name="hsvs")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationHsvArgs>> hsvs;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationHsvArgs>>> hsvs() {
        return Optional.ofNullable(this.hsvs);
    }

    @Import(name="ifDimensions")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfDimensionArgs>> ifDimensions;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfDimensionArgs>>> ifDimensions() {
        return Optional.ofNullable(this.ifDimensions);
    }

    @Import(name="ifOrientations")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfOrientationArgs>> ifOrientations;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfOrientationArgs>>> ifOrientations() {
        return Optional.ofNullable(this.ifOrientations);
    }

    @Import(name="maxColors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationMaxColorArgs>> maxColors;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationMaxColorArgs>>> maxColors() {
        return Optional.ofNullable(this.maxColors);
    }

    @Import(name="mirrors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationMirrorArgs>> mirrors;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationMirrorArgs>>> mirrors() {
        return Optional.ofNullable(this.mirrors);
    }

    @Import(name="monoHues")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationMonoHueArgs>> monoHues;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationMonoHueArgs>>> monoHues() {
        return Optional.ofNullable(this.monoHues);
    }

    @Import(name="opacities")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationOpacityArgs>> opacities;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationOpacityArgs>>> opacities() {
        return Optional.ofNullable(this.opacities);
    }

    @Import(name="removeColors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationRemoveColorArgs>> removeColors;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationRemoveColorArgs>>> removeColors() {
        return Optional.ofNullable(this.removeColors);
    }

    @Import(name="unsharpMasks")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationUnsharpMaskArgs>> unsharpMasks;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationUnsharpMaskArgs>>> unsharpMasks() {
        return Optional.ofNullable(this.unsharpMasks);
    }

    private GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationArgs() {}

    private GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationArgs(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationArgs $) {
        this.backgroundColors = $.backgroundColors;
        this.blurs = $.blurs;
        this.chromaKeys = $.chromaKeys;
        this.composites = $.composites;
        this.compounds = $.compounds;
        this.contrasts = $.contrasts;
        this.goops = $.goops;
        this.grayscales = $.grayscales;
        this.hsls = $.hsls;
        this.hsvs = $.hsvs;
        this.ifDimensions = $.ifDimensions;
        this.ifOrientations = $.ifOrientations;
        this.maxColors = $.maxColors;
        this.mirrors = $.mirrors;
        this.monoHues = $.monoHues;
        this.opacities = $.opacities;
        this.removeColors = $.removeColors;
        this.unsharpMasks = $.unsharpMasks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationArgs();
        }

        public Builder(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationArgs defaults) {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationArgs(Objects.requireNonNull(defaults));
        }

        public Builder backgroundColors(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationBackgroundColorArgs>> backgroundColors) {
            $.backgroundColors = backgroundColors;
            return this;
        }

        public Builder backgroundColors(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationBackgroundColorArgs> backgroundColors) {
            return backgroundColors(Output.of(backgroundColors));
        }

        public Builder backgroundColors(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationBackgroundColorArgs... backgroundColors) {
            return backgroundColors(List.of(backgroundColors));
        }

        public Builder blurs(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationBlurArgs>> blurs) {
            $.blurs = blurs;
            return this;
        }

        public Builder blurs(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationBlurArgs> blurs) {
            return blurs(Output.of(blurs));
        }

        public Builder blurs(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationBlurArgs... blurs) {
            return blurs(List.of(blurs));
        }

        public Builder chromaKeys(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationChromaKeyArgs>> chromaKeys) {
            $.chromaKeys = chromaKeys;
            return this;
        }

        public Builder chromaKeys(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationChromaKeyArgs> chromaKeys) {
            return chromaKeys(Output.of(chromaKeys));
        }

        public Builder chromaKeys(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationChromaKeyArgs... chromaKeys) {
            return chromaKeys(List.of(chromaKeys));
        }

        public Builder composites(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationCompositeArgs>> composites) {
            $.composites = composites;
            return this;
        }

        public Builder composites(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationCompositeArgs> composites) {
            return composites(Output.of(composites));
        }

        public Builder composites(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationCompositeArgs... composites) {
            return composites(List.of(composites));
        }

        public Builder compounds(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationCompoundArgs>> compounds) {
            $.compounds = compounds;
            return this;
        }

        public Builder compounds(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationCompoundArgs> compounds) {
            return compounds(Output.of(compounds));
        }

        public Builder compounds(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationCompoundArgs... compounds) {
            return compounds(List.of(compounds));
        }

        public Builder contrasts(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationContrastArgs>> contrasts) {
            $.contrasts = contrasts;
            return this;
        }

        public Builder contrasts(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationContrastArgs> contrasts) {
            return contrasts(Output.of(contrasts));
        }

        public Builder contrasts(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationContrastArgs... contrasts) {
            return contrasts(List.of(contrasts));
        }

        public Builder goops(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationGoopArgs>> goops) {
            $.goops = goops;
            return this;
        }

        public Builder goops(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationGoopArgs> goops) {
            return goops(Output.of(goops));
        }

        public Builder goops(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationGoopArgs... goops) {
            return goops(List.of(goops));
        }

        public Builder grayscales(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationGrayscaleArgs>> grayscales) {
            $.grayscales = grayscales;
            return this;
        }

        public Builder grayscales(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationGrayscaleArgs> grayscales) {
            return grayscales(Output.of(grayscales));
        }

        public Builder grayscales(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationGrayscaleArgs... grayscales) {
            return grayscales(List.of(grayscales));
        }

        public Builder hsls(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationHslArgs>> hsls) {
            $.hsls = hsls;
            return this;
        }

        public Builder hsls(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationHslArgs> hsls) {
            return hsls(Output.of(hsls));
        }

        public Builder hsls(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationHslArgs... hsls) {
            return hsls(List.of(hsls));
        }

        public Builder hsvs(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationHsvArgs>> hsvs) {
            $.hsvs = hsvs;
            return this;
        }

        public Builder hsvs(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationHsvArgs> hsvs) {
            return hsvs(Output.of(hsvs));
        }

        public Builder hsvs(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationHsvArgs... hsvs) {
            return hsvs(List.of(hsvs));
        }

        public Builder ifDimensions(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfDimensionArgs>> ifDimensions) {
            $.ifDimensions = ifDimensions;
            return this;
        }

        public Builder ifDimensions(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfDimensionArgs> ifDimensions) {
            return ifDimensions(Output.of(ifDimensions));
        }

        public Builder ifDimensions(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfDimensionArgs... ifDimensions) {
            return ifDimensions(List.of(ifDimensions));
        }

        public Builder ifOrientations(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfOrientationArgs>> ifOrientations) {
            $.ifOrientations = ifOrientations;
            return this;
        }

        public Builder ifOrientations(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfOrientationArgs> ifOrientations) {
            return ifOrientations(Output.of(ifOrientations));
        }

        public Builder ifOrientations(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfOrientationArgs... ifOrientations) {
            return ifOrientations(List.of(ifOrientations));
        }

        public Builder maxColors(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationMaxColorArgs>> maxColors) {
            $.maxColors = maxColors;
            return this;
        }

        public Builder maxColors(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationMaxColorArgs> maxColors) {
            return maxColors(Output.of(maxColors));
        }

        public Builder maxColors(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationMaxColorArgs... maxColors) {
            return maxColors(List.of(maxColors));
        }

        public Builder mirrors(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationMirrorArgs>> mirrors) {
            $.mirrors = mirrors;
            return this;
        }

        public Builder mirrors(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationMirrorArgs> mirrors) {
            return mirrors(Output.of(mirrors));
        }

        public Builder mirrors(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationMirrorArgs... mirrors) {
            return mirrors(List.of(mirrors));
        }

        public Builder monoHues(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationMonoHueArgs>> monoHues) {
            $.monoHues = monoHues;
            return this;
        }

        public Builder monoHues(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationMonoHueArgs> monoHues) {
            return monoHues(Output.of(monoHues));
        }

        public Builder monoHues(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationMonoHueArgs... monoHues) {
            return monoHues(List.of(monoHues));
        }

        public Builder opacities(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationOpacityArgs>> opacities) {
            $.opacities = opacities;
            return this;
        }

        public Builder opacities(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationOpacityArgs> opacities) {
            return opacities(Output.of(opacities));
        }

        public Builder opacities(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationOpacityArgs... opacities) {
            return opacities(List.of(opacities));
        }

        public Builder removeColors(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationRemoveColorArgs>> removeColors) {
            $.removeColors = removeColors;
            return this;
        }

        public Builder removeColors(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationRemoveColorArgs> removeColors) {
            return removeColors(Output.of(removeColors));
        }

        public Builder removeColors(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationRemoveColorArgs... removeColors) {
            return removeColors(List.of(removeColors));
        }

        public Builder unsharpMasks(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationUnsharpMaskArgs>> unsharpMasks) {
            $.unsharpMasks = unsharpMasks;
            return this;
        }

        public Builder unsharpMasks(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationUnsharpMaskArgs> unsharpMasks) {
            return unsharpMasks(Output.of(unsharpMasks));
        }

        public Builder unsharpMasks(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationUnsharpMaskArgs... unsharpMasks) {
            return unsharpMasks(List.of(unsharpMasks));
        }

        public GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationArgs build() {
            return $;
        }
    }

}
