// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeImageArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeArgs Empty = new GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeArgs();

    @Import(name="gravity")
    private @Nullable Output<String> gravity;

    public Optional<Output<String>> gravity() {
        return Optional.ofNullable(this.gravity);
    }

    @Import(name="gravityVar")
    private @Nullable Output<String> gravityVar;

    public Optional<Output<String>> gravityVar() {
        return Optional.ofNullable(this.gravityVar);
    }

    @Import(name="image", required=true)
    private Output<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeImageArgs> image;

    public Output<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeImageArgs> image() {
        return this.image;
    }

    @Import(name="placement")
    private @Nullable Output<String> placement;

    public Optional<Output<String>> placement() {
        return Optional.ofNullable(this.placement);
    }

    @Import(name="placementVar")
    private @Nullable Output<String> placementVar;

    public Optional<Output<String>> placementVar() {
        return Optional.ofNullable(this.placementVar);
    }

    @Import(name="scale")
    private @Nullable Output<String> scale;

    public Optional<Output<String>> scale() {
        return Optional.ofNullable(this.scale);
    }

    @Import(name="scaleDimension")
    private @Nullable Output<String> scaleDimension;

    public Optional<Output<String>> scaleDimension() {
        return Optional.ofNullable(this.scaleDimension);
    }

    @Import(name="scaleDimensionVar")
    private @Nullable Output<String> scaleDimensionVar;

    public Optional<Output<String>> scaleDimensionVar() {
        return Optional.ofNullable(this.scaleDimensionVar);
    }

    @Import(name="scaleVar")
    private @Nullable Output<String> scaleVar;

    public Optional<Output<String>> scaleVar() {
        return Optional.ofNullable(this.scaleVar);
    }

    @Import(name="xPosition")
    private @Nullable Output<String> xPosition;

    public Optional<Output<String>> xPosition() {
        return Optional.ofNullable(this.xPosition);
    }

    @Import(name="xPositionVar")
    private @Nullable Output<String> xPositionVar;

    public Optional<Output<String>> xPositionVar() {
        return Optional.ofNullable(this.xPositionVar);
    }

    @Import(name="yPosition")
    private @Nullable Output<String> yPosition;

    public Optional<Output<String>> yPosition() {
        return Optional.ofNullable(this.yPosition);
    }

    @Import(name="yPositionVar")
    private @Nullable Output<String> yPositionVar;

    public Optional<Output<String>> yPositionVar() {
        return Optional.ofNullable(this.yPositionVar);
    }

    private GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeArgs() {}

    private GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeArgs(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeArgs $) {
        this.gravity = $.gravity;
        this.gravityVar = $.gravityVar;
        this.image = $.image;
        this.placement = $.placement;
        this.placementVar = $.placementVar;
        this.scale = $.scale;
        this.scaleDimension = $.scaleDimension;
        this.scaleDimensionVar = $.scaleDimensionVar;
        this.scaleVar = $.scaleVar;
        this.xPosition = $.xPosition;
        this.xPositionVar = $.xPositionVar;
        this.yPosition = $.yPosition;
        this.yPositionVar = $.yPositionVar;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeArgs();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeArgs defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeArgs(Objects.requireNonNull(defaults));
        }

        public Builder gravity(@Nullable Output<String> gravity) {
            $.gravity = gravity;
            return this;
        }

        public Builder gravity(String gravity) {
            return gravity(Output.of(gravity));
        }

        public Builder gravityVar(@Nullable Output<String> gravityVar) {
            $.gravityVar = gravityVar;
            return this;
        }

        public Builder gravityVar(String gravityVar) {
            return gravityVar(Output.of(gravityVar));
        }

        public Builder image(Output<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeImageArgs> image) {
            $.image = image;
            return this;
        }

        public Builder image(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeImageArgs image) {
            return image(Output.of(image));
        }

        public Builder placement(@Nullable Output<String> placement) {
            $.placement = placement;
            return this;
        }

        public Builder placement(String placement) {
            return placement(Output.of(placement));
        }

        public Builder placementVar(@Nullable Output<String> placementVar) {
            $.placementVar = placementVar;
            return this;
        }

        public Builder placementVar(String placementVar) {
            return placementVar(Output.of(placementVar));
        }

        public Builder scale(@Nullable Output<String> scale) {
            $.scale = scale;
            return this;
        }

        public Builder scale(String scale) {
            return scale(Output.of(scale));
        }

        public Builder scaleDimension(@Nullable Output<String> scaleDimension) {
            $.scaleDimension = scaleDimension;
            return this;
        }

        public Builder scaleDimension(String scaleDimension) {
            return scaleDimension(Output.of(scaleDimension));
        }

        public Builder scaleDimensionVar(@Nullable Output<String> scaleDimensionVar) {
            $.scaleDimensionVar = scaleDimensionVar;
            return this;
        }

        public Builder scaleDimensionVar(String scaleDimensionVar) {
            return scaleDimensionVar(Output.of(scaleDimensionVar));
        }

        public Builder scaleVar(@Nullable Output<String> scaleVar) {
            $.scaleVar = scaleVar;
            return this;
        }

        public Builder scaleVar(String scaleVar) {
            return scaleVar(Output.of(scaleVar));
        }

        public Builder xPosition(@Nullable Output<String> xPosition) {
            $.xPosition = xPosition;
            return this;
        }

        public Builder xPosition(String xPosition) {
            return xPosition(Output.of(xPosition));
        }

        public Builder xPositionVar(@Nullable Output<String> xPositionVar) {
            $.xPositionVar = xPositionVar;
            return this;
        }

        public Builder xPositionVar(String xPositionVar) {
            return xPositionVar(Output.of(xPositionVar));
        }

        public Builder yPosition(@Nullable Output<String> yPosition) {
            $.yPosition = yPosition;
            return this;
        }

        public Builder yPosition(String yPosition) {
            return yPosition(Output.of(yPosition));
        }

        public Builder yPositionVar(@Nullable Output<String> yPositionVar) {
            $.yPositionVar = yPositionVar;
            return this;
        }

        public Builder yPositionVar(String yPositionVar) {
            return yPositionVar(Output.of(yPositionVar));
        }

        public GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeArgs build() {
            $.image = Objects.requireNonNull($.image, "expected parameter 'image' to be non-null");
            return $;
        }
    }

}
