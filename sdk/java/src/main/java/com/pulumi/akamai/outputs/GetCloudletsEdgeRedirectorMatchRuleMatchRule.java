// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.akamai.outputs.GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatch;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCloudletsEdgeRedirectorMatchRuleMatchRule {
    /**
     * @return (Optional) Whether to disable a rule so it is not evaluated against incoming requests.
     * 
     */
    private @Nullable Boolean disabled;
    /**
     * @return (Optional) The end time for this match. Specify the value in UTC in seconds since the epoch.
     * 
     */
    private @Nullable Integer end;
    /**
     * @return (Optional) If you&#39;re using a URL match, this specifies the URL that the Cloudlet uses to match the incoming request.
     * 
     */
    private @Nullable String matchUrl;
    /**
     * @return (Optional) A list of conditions to apply to a Cloudlet, including:
     * 
     */
    private @Nullable List<GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatch> matches;
    /**
     * @return (Optional) If you&#39;re using a `match_type` that supports name attributes, specify the part the incoming request to match on, either `cookie`, `header`, `parameter`, or `query`.
     * 
     */
    private @Nullable String name;
    /**
     * @return (Required) The URL Edge Redirector redirects the request to. If you&#39;re using `use_relative_url`, you can enter a path for the value.
     * 
     */
    private String redirectUrl;
    /**
     * @return (Optional) The start time for this match. Specify the value in UTC in seconds since the epoch.
     * 
     */
    private @Nullable Integer start;
    /**
     * @return (Required) The HTTP response status code, which is either `301` (permanent redirect) or `302` (temporary redirect).
     * 
     */
    private Integer statusCode;
    /**
     * @return (Required) The type of the array, either `object` or `simple`. Use the `simple` option when adding only an array of string-based values.
     * 
     */
    private String type;
    /**
     * @return (Optional) Whether the Cloudlet should include the query string from the request in the rewritten or forwarded URL.
     * 
     */
    private @Nullable Boolean useIncomingQueryString;
    /**
     * @return (Optional) If set to `relative_url`, takes the path you specify in the `redirect_url` argument and sets it in the response’s Location header. The client or browser receiving the request decides which protocol and hostname to use. If set to `copy_scheme_hostname`, creates an absolute path by taking the protocol and hostname from the incoming request and combining them with path information you specify in the `redirect_url` argument. This absolute path is set in the response’s Location header. If you do not specify use_relative_url or set to `none`, then specify the `redirect_url` argument as a fully-qualified URL.
     * 
     */
    private @Nullable String useRelativeUrl;

    private GetCloudletsEdgeRedirectorMatchRuleMatchRule() {}
    /**
     * @return (Optional) Whether to disable a rule so it is not evaluated against incoming requests.
     * 
     */
    public Optional<Boolean> disabled() {
        return Optional.ofNullable(this.disabled);
    }
    /**
     * @return (Optional) The end time for this match. Specify the value in UTC in seconds since the epoch.
     * 
     */
    public Optional<Integer> end() {
        return Optional.ofNullable(this.end);
    }
    /**
     * @return (Optional) If you&#39;re using a URL match, this specifies the URL that the Cloudlet uses to match the incoming request.
     * 
     */
    public Optional<String> matchUrl() {
        return Optional.ofNullable(this.matchUrl);
    }
    /**
     * @return (Optional) A list of conditions to apply to a Cloudlet, including:
     * 
     */
    public List<GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatch> matches() {
        return this.matches == null ? List.of() : this.matches;
    }
    /**
     * @return (Optional) If you&#39;re using a `match_type` that supports name attributes, specify the part the incoming request to match on, either `cookie`, `header`, `parameter`, or `query`.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return (Required) The URL Edge Redirector redirects the request to. If you&#39;re using `use_relative_url`, you can enter a path for the value.
     * 
     */
    public String redirectUrl() {
        return this.redirectUrl;
    }
    /**
     * @return (Optional) The start time for this match. Specify the value in UTC in seconds since the epoch.
     * 
     */
    public Optional<Integer> start() {
        return Optional.ofNullable(this.start);
    }
    /**
     * @return (Required) The HTTP response status code, which is either `301` (permanent redirect) or `302` (temporary redirect).
     * 
     */
    public Integer statusCode() {
        return this.statusCode;
    }
    /**
     * @return (Required) The type of the array, either `object` or `simple`. Use the `simple` option when adding only an array of string-based values.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return (Optional) Whether the Cloudlet should include the query string from the request in the rewritten or forwarded URL.
     * 
     */
    public Optional<Boolean> useIncomingQueryString() {
        return Optional.ofNullable(this.useIncomingQueryString);
    }
    /**
     * @return (Optional) If set to `relative_url`, takes the path you specify in the `redirect_url` argument and sets it in the response’s Location header. The client or browser receiving the request decides which protocol and hostname to use. If set to `copy_scheme_hostname`, creates an absolute path by taking the protocol and hostname from the incoming request and combining them with path information you specify in the `redirect_url` argument. This absolute path is set in the response’s Location header. If you do not specify use_relative_url or set to `none`, then specify the `redirect_url` argument as a fully-qualified URL.
     * 
     */
    public Optional<String> useRelativeUrl() {
        return Optional.ofNullable(this.useRelativeUrl);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCloudletsEdgeRedirectorMatchRuleMatchRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean disabled;
        private @Nullable Integer end;
        private @Nullable String matchUrl;
        private @Nullable List<GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatch> matches;
        private @Nullable String name;
        private String redirectUrl;
        private @Nullable Integer start;
        private Integer statusCode;
        private String type;
        private @Nullable Boolean useIncomingQueryString;
        private @Nullable String useRelativeUrl;
        public Builder() {}
        public Builder(GetCloudletsEdgeRedirectorMatchRuleMatchRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.disabled = defaults.disabled;
    	      this.end = defaults.end;
    	      this.matchUrl = defaults.matchUrl;
    	      this.matches = defaults.matches;
    	      this.name = defaults.name;
    	      this.redirectUrl = defaults.redirectUrl;
    	      this.start = defaults.start;
    	      this.statusCode = defaults.statusCode;
    	      this.type = defaults.type;
    	      this.useIncomingQueryString = defaults.useIncomingQueryString;
    	      this.useRelativeUrl = defaults.useRelativeUrl;
        }

        @CustomType.Setter
        public Builder disabled(@Nullable Boolean disabled) {
            this.disabled = disabled;
            return this;
        }
        @CustomType.Setter
        public Builder end(@Nullable Integer end) {
            this.end = end;
            return this;
        }
        @CustomType.Setter
        public Builder matchUrl(@Nullable String matchUrl) {
            this.matchUrl = matchUrl;
            return this;
        }
        @CustomType.Setter
        public Builder matches(@Nullable List<GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatch> matches) {
            this.matches = matches;
            return this;
        }
        public Builder matches(GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatch... matches) {
            return matches(List.of(matches));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder redirectUrl(String redirectUrl) {
            this.redirectUrl = Objects.requireNonNull(redirectUrl);
            return this;
        }
        @CustomType.Setter
        public Builder start(@Nullable Integer start) {
            this.start = start;
            return this;
        }
        @CustomType.Setter
        public Builder statusCode(Integer statusCode) {
            this.statusCode = Objects.requireNonNull(statusCode);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder useIncomingQueryString(@Nullable Boolean useIncomingQueryString) {
            this.useIncomingQueryString = useIncomingQueryString;
            return this;
        }
        @CustomType.Setter
        public Builder useRelativeUrl(@Nullable String useRelativeUrl) {
            this.useRelativeUrl = useRelativeUrl;
            return this;
        }
        public GetCloudletsEdgeRedirectorMatchRuleMatchRule build() {
            final var o = new GetCloudletsEdgeRedirectorMatchRuleMatchRule();
            o.disabled = disabled;
            o.end = end;
            o.matchUrl = matchUrl;
            o.matches = matches;
            o.name = name;
            o.redirectUrl = redirectUrl;
            o.start = start;
            o.statusCode = statusCode;
            o.type = type;
            o.useIncomingQueryString = useIncomingQueryString;
            o.useRelativeUrl = useRelativeUrl;
            return o;
        }
    }
}
