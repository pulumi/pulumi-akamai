// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.akamai.outputs.MtlskeystoreClientCertificateAkamaiVersionCertificateBlock;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MtlskeystoreClientCertificateAkamaiVersion {
    /**
     * @return Details of the certificate block for the client certificate version.
     * 
     */
    private @Nullable MtlskeystoreClientCertificateAkamaiVersionCertificateBlock certificateBlock;
    /**
     * @return The user who created the client certificate version.
     * 
     */
    private @Nullable String createdBy;
    /**
     * @return An ISO 8601 timestamp indicating the client certificate version&#39;s creation.
     * 
     */
    private @Nullable String createdDate;
    /**
     * @return An ISO 8601 timestamp indicating the client certificate version&#39;s deletion request. Appears as null if there&#39;s no request.
     * 
     */
    private @Nullable String deleteRequestedDate;
    /**
     * @return Specifies the key elliptic curve when key algorithm `ECDSA` is used.
     * 
     */
    private @Nullable String ellipticCurve;
    /**
     * @return An ISO 8601 timestamp indicating when the client certificate version expires.
     * 
     */
    private @Nullable String expiryDate;
    /**
     * @return An ISO 8601 timestamp indicating the client certificate version&#39;s availability.
     * 
     */
    private @Nullable String issuedDate;
    /**
     * @return The signing entity of the client certificate version.
     * 
     */
    private @Nullable String issuer;
    /**
     * @return Identifies the client certificate version&#39;s encryption algorithm. Supported values are `RSA` and `ECDSA`.
     * 
     */
    private @Nullable String keyAlgorithm;
    /**
     * @return The private key length of the client certificate version when key algorithm `RSA` is used.
     * 
     */
    private @Nullable String keySizeInBytes;
    /**
     * @return An ISO 8601 timestamp indicating the client certificate version&#39;s deletion. Appears as null if there&#39;s no request.
     * 
     */
    private @Nullable String scheduledDeleteDate;
    /**
     * @return Specifies the algorithm that secures the data exchange between the edge server and origin.
     * 
     */
    private @Nullable String signatureAlgorithm;
    /**
     * @return The client certificate version status. Possible values: `DEPLOYMENT_PENDING`, `DEPLOYED`, or `DELETE_PENDING`.
     * 
     */
    private @Nullable String status;
    /**
     * @return The public key&#39;s entity stored in the client certificate version&#39;s subject public key field.
     * 
     */
    private @Nullable String subject;
    /**
     * @return The unique identifier of the client certificate version.
     * 
     */
    private @Nullable Integer version;
    /**
     * @return Unique identifier for the client certificate version. Use it to configure mutual authentication (mTLS) sessions between the origin and edge servers in Property Manager&#39;s Mutual TLS Origin Keystore behavior.
     * 
     */
    private @Nullable String versionGuid;

    private MtlskeystoreClientCertificateAkamaiVersion() {}
    /**
     * @return Details of the certificate block for the client certificate version.
     * 
     */
    public Optional<MtlskeystoreClientCertificateAkamaiVersionCertificateBlock> certificateBlock() {
        return Optional.ofNullable(this.certificateBlock);
    }
    /**
     * @return The user who created the client certificate version.
     * 
     */
    public Optional<String> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }
    /**
     * @return An ISO 8601 timestamp indicating the client certificate version&#39;s creation.
     * 
     */
    public Optional<String> createdDate() {
        return Optional.ofNullable(this.createdDate);
    }
    /**
     * @return An ISO 8601 timestamp indicating the client certificate version&#39;s deletion request. Appears as null if there&#39;s no request.
     * 
     */
    public Optional<String> deleteRequestedDate() {
        return Optional.ofNullable(this.deleteRequestedDate);
    }
    /**
     * @return Specifies the key elliptic curve when key algorithm `ECDSA` is used.
     * 
     */
    public Optional<String> ellipticCurve() {
        return Optional.ofNullable(this.ellipticCurve);
    }
    /**
     * @return An ISO 8601 timestamp indicating when the client certificate version expires.
     * 
     */
    public Optional<String> expiryDate() {
        return Optional.ofNullable(this.expiryDate);
    }
    /**
     * @return An ISO 8601 timestamp indicating the client certificate version&#39;s availability.
     * 
     */
    public Optional<String> issuedDate() {
        return Optional.ofNullable(this.issuedDate);
    }
    /**
     * @return The signing entity of the client certificate version.
     * 
     */
    public Optional<String> issuer() {
        return Optional.ofNullable(this.issuer);
    }
    /**
     * @return Identifies the client certificate version&#39;s encryption algorithm. Supported values are `RSA` and `ECDSA`.
     * 
     */
    public Optional<String> keyAlgorithm() {
        return Optional.ofNullable(this.keyAlgorithm);
    }
    /**
     * @return The private key length of the client certificate version when key algorithm `RSA` is used.
     * 
     */
    public Optional<String> keySizeInBytes() {
        return Optional.ofNullable(this.keySizeInBytes);
    }
    /**
     * @return An ISO 8601 timestamp indicating the client certificate version&#39;s deletion. Appears as null if there&#39;s no request.
     * 
     */
    public Optional<String> scheduledDeleteDate() {
        return Optional.ofNullable(this.scheduledDeleteDate);
    }
    /**
     * @return Specifies the algorithm that secures the data exchange between the edge server and origin.
     * 
     */
    public Optional<String> signatureAlgorithm() {
        return Optional.ofNullable(this.signatureAlgorithm);
    }
    /**
     * @return The client certificate version status. Possible values: `DEPLOYMENT_PENDING`, `DEPLOYED`, or `DELETE_PENDING`.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return The public key&#39;s entity stored in the client certificate version&#39;s subject public key field.
     * 
     */
    public Optional<String> subject() {
        return Optional.ofNullable(this.subject);
    }
    /**
     * @return The unique identifier of the client certificate version.
     * 
     */
    public Optional<Integer> version() {
        return Optional.ofNullable(this.version);
    }
    /**
     * @return Unique identifier for the client certificate version. Use it to configure mutual authentication (mTLS) sessions between the origin and edge servers in Property Manager&#39;s Mutual TLS Origin Keystore behavior.
     * 
     */
    public Optional<String> versionGuid() {
        return Optional.ofNullable(this.versionGuid);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MtlskeystoreClientCertificateAkamaiVersion defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable MtlskeystoreClientCertificateAkamaiVersionCertificateBlock certificateBlock;
        private @Nullable String createdBy;
        private @Nullable String createdDate;
        private @Nullable String deleteRequestedDate;
        private @Nullable String ellipticCurve;
        private @Nullable String expiryDate;
        private @Nullable String issuedDate;
        private @Nullable String issuer;
        private @Nullable String keyAlgorithm;
        private @Nullable String keySizeInBytes;
        private @Nullable String scheduledDeleteDate;
        private @Nullable String signatureAlgorithm;
        private @Nullable String status;
        private @Nullable String subject;
        private @Nullable Integer version;
        private @Nullable String versionGuid;
        public Builder() {}
        public Builder(MtlskeystoreClientCertificateAkamaiVersion defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateBlock = defaults.certificateBlock;
    	      this.createdBy = defaults.createdBy;
    	      this.createdDate = defaults.createdDate;
    	      this.deleteRequestedDate = defaults.deleteRequestedDate;
    	      this.ellipticCurve = defaults.ellipticCurve;
    	      this.expiryDate = defaults.expiryDate;
    	      this.issuedDate = defaults.issuedDate;
    	      this.issuer = defaults.issuer;
    	      this.keyAlgorithm = defaults.keyAlgorithm;
    	      this.keySizeInBytes = defaults.keySizeInBytes;
    	      this.scheduledDeleteDate = defaults.scheduledDeleteDate;
    	      this.signatureAlgorithm = defaults.signatureAlgorithm;
    	      this.status = defaults.status;
    	      this.subject = defaults.subject;
    	      this.version = defaults.version;
    	      this.versionGuid = defaults.versionGuid;
        }

        @CustomType.Setter
        public Builder certificateBlock(@Nullable MtlskeystoreClientCertificateAkamaiVersionCertificateBlock certificateBlock) {

            this.certificateBlock = certificateBlock;
            return this;
        }
        @CustomType.Setter
        public Builder createdBy(@Nullable String createdBy) {

            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder createdDate(@Nullable String createdDate) {

            this.createdDate = createdDate;
            return this;
        }
        @CustomType.Setter
        public Builder deleteRequestedDate(@Nullable String deleteRequestedDate) {

            this.deleteRequestedDate = deleteRequestedDate;
            return this;
        }
        @CustomType.Setter
        public Builder ellipticCurve(@Nullable String ellipticCurve) {

            this.ellipticCurve = ellipticCurve;
            return this;
        }
        @CustomType.Setter
        public Builder expiryDate(@Nullable String expiryDate) {

            this.expiryDate = expiryDate;
            return this;
        }
        @CustomType.Setter
        public Builder issuedDate(@Nullable String issuedDate) {

            this.issuedDate = issuedDate;
            return this;
        }
        @CustomType.Setter
        public Builder issuer(@Nullable String issuer) {

            this.issuer = issuer;
            return this;
        }
        @CustomType.Setter
        public Builder keyAlgorithm(@Nullable String keyAlgorithm) {

            this.keyAlgorithm = keyAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder keySizeInBytes(@Nullable String keySizeInBytes) {

            this.keySizeInBytes = keySizeInBytes;
            return this;
        }
        @CustomType.Setter
        public Builder scheduledDeleteDate(@Nullable String scheduledDeleteDate) {

            this.scheduledDeleteDate = scheduledDeleteDate;
            return this;
        }
        @CustomType.Setter
        public Builder signatureAlgorithm(@Nullable String signatureAlgorithm) {

            this.signatureAlgorithm = signatureAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {

            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder subject(@Nullable String subject) {

            this.subject = subject;
            return this;
        }
        @CustomType.Setter
        public Builder version(@Nullable Integer version) {

            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder versionGuid(@Nullable String versionGuid) {

            this.versionGuid = versionGuid;
            return this;
        }
        public MtlskeystoreClientCertificateAkamaiVersion build() {
            final var _resultValue = new MtlskeystoreClientCertificateAkamaiVersion();
            _resultValue.certificateBlock = certificateBlock;
            _resultValue.createdBy = createdBy;
            _resultValue.createdDate = createdDate;
            _resultValue.deleteRequestedDate = deleteRequestedDate;
            _resultValue.ellipticCurve = ellipticCurve;
            _resultValue.expiryDate = expiryDate;
            _resultValue.issuedDate = issuedDate;
            _resultValue.issuer = issuer;
            _resultValue.keyAlgorithm = keyAlgorithm;
            _resultValue.keySizeInBytes = keySizeInBytes;
            _resultValue.scheduledDeleteDate = scheduledDeleteDate;
            _resultValue.signatureAlgorithm = signatureAlgorithm;
            _resultValue.status = status;
            _resultValue.subject = subject;
            _resultValue.version = version;
            _resultValue.versionGuid = versionGuid;
            return _resultValue;
        }
    }
}
