// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyRulesBuilderRulesV20230920BehaviorStandardTlsMigrationArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetPropertyRulesBuilderRulesV20230920BehaviorStandardTlsMigrationArgs Empty = new GetPropertyRulesBuilderRulesV20230920BehaviorStandardTlsMigrationArgs();

    /**
     * Allow temporary downgrade of HTTPS traffic to HTTP. This removes various `Origin`, `Referer`, `Cookie`, `Cookie2`, `sec-*` and `proxy-*` headers from the request to origin.
     * 
     */
    @Import(name="allowHttpsDowngrade")
    private @Nullable Output<Boolean> allowHttpsDowngrade;

    /**
     * @return Allow temporary downgrade of HTTPS traffic to HTTP. This removes various `Origin`, `Referer`, `Cookie`, `Cookie2`, `sec-*` and `proxy-*` headers from the request to origin.
     * 
     */
    public Optional<Output<Boolean>> allowHttpsDowngrade() {
        return Optional.ofNullable(this.allowHttpsDowngrade);
    }

    /**
     * Allows temporary upgrade of HTTP traffic to HTTPS.
     * 
     */
    @Import(name="allowHttpsUpgrade")
    private @Nullable Output<Boolean> allowHttpsUpgrade;

    /**
     * @return Allows temporary upgrade of HTTP traffic to HTTPS.
     * 
     */
    public Optional<Output<Boolean>> allowHttpsUpgrade() {
        return Optional.ofNullable(this.allowHttpsUpgrade);
    }

    /**
     * Specifies the number cache sharing days.
     * 
     */
    @Import(name="cacheSharingDuration")
    private @Nullable Output<Integer> cacheSharingDuration;

    /**
     * @return Specifies the number cache sharing days.
     * 
     */
    public Optional<Output<Integer>> cacheSharingDuration() {
        return Optional.ofNullable(this.cacheSharingDuration);
    }

    /**
     * Specifies when to start cache sharing.
     * 
     */
    @Import(name="cacheSharingStartTime")
    private @Nullable Output<String> cacheSharingStartTime;

    /**
     * @return Specifies when to start cache sharing.
     * 
     */
    public Optional<Output<String>> cacheSharingStartTime() {
        return Optional.ofNullable(this.cacheSharingStartTime);
    }

    /**
     * Allows migration to Standard TLS.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Allows migration to Standard TLS.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Sets whether your new certificate is SNI-only.
     * 
     */
    @Import(name="isCertificateSniOnly")
    private @Nullable Output<Boolean> isCertificateSniOnly;

    /**
     * @return Sets whether your new certificate is SNI-only.
     * 
     */
    public Optional<Output<Boolean>> isCertificateSniOnly() {
        return Optional.ofNullable(this.isCertificateSniOnly);
    }

    /**
     * Allows you to align traffic to various `tieredDistribution` areas.
     * 
     */
    @Import(name="isTieredDistributionUsed")
    private @Nullable Output<Boolean> isTieredDistributionUsed;

    /**
     * @return Allows you to align traffic to various `tieredDistribution` areas.
     * 
     */
    public Optional<Output<Boolean>> isTieredDistributionUsed() {
        return Optional.ofNullable(this.isTieredDistributionUsed);
    }

    /**
     * Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    @Import(name="locked")
    private @Nullable Output<Boolean> locked;

    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Output<Boolean>> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * Specifies the number of days to migrate the cache.
     * 
     */
    @Import(name="migrationDuration")
    private @Nullable Output<Integer> migrationDuration;

    /**
     * @return Specifies the number of days to migrate the cache.
     * 
     */
    public Optional<Output<Integer>> migrationDuration() {
        return Optional.ofNullable(this.migrationDuration);
    }

    /**
     * What kind of traffic you&#39;re migrating from.
     * 
     */
    @Import(name="migrationFrom")
    private @Nullable Output<String> migrationFrom;

    /**
     * @return What kind of traffic you&#39;re migrating from.
     * 
     */
    public Optional<Output<String>> migrationFrom() {
        return Optional.ofNullable(this.migrationFrom);
    }

    /**
     * Specifies when to start migrating the cache.
     * 
     */
    @Import(name="migrationStartTime")
    private @Nullable Output<String> migrationStartTime;

    /**
     * @return Specifies when to start migrating the cache.
     * 
     */
    public Optional<Output<String>> migrationStartTime() {
        return Optional.ofNullable(this.migrationStartTime);
    }

    /**
     * Specifies the `tieredDistribution` location.
     * 
     */
    @Import(name="tdLocation")
    private @Nullable Output<String> tdLocation;

    /**
     * @return Specifies the `tieredDistribution` location.
     * 
     */
    public Optional<Output<String>> tdLocation() {
        return Optional.ofNullable(this.tdLocation);
    }

    /**
     * This option is for internal usage only.
     * 
     */
    @Import(name="templateUuid")
    private @Nullable Output<String> templateUuid;

    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<Output<String>> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }

    /**
     * A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private GetPropertyRulesBuilderRulesV20230920BehaviorStandardTlsMigrationArgs() {}

    private GetPropertyRulesBuilderRulesV20230920BehaviorStandardTlsMigrationArgs(GetPropertyRulesBuilderRulesV20230920BehaviorStandardTlsMigrationArgs $) {
        this.allowHttpsDowngrade = $.allowHttpsDowngrade;
        this.allowHttpsUpgrade = $.allowHttpsUpgrade;
        this.cacheSharingDuration = $.cacheSharingDuration;
        this.cacheSharingStartTime = $.cacheSharingStartTime;
        this.enabled = $.enabled;
        this.isCertificateSniOnly = $.isCertificateSniOnly;
        this.isTieredDistributionUsed = $.isTieredDistributionUsed;
        this.locked = $.locked;
        this.migrationDuration = $.migrationDuration;
        this.migrationFrom = $.migrationFrom;
        this.migrationStartTime = $.migrationStartTime;
        this.tdLocation = $.tdLocation;
        this.templateUuid = $.templateUuid;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesBuilderRulesV20230920BehaviorStandardTlsMigrationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesBuilderRulesV20230920BehaviorStandardTlsMigrationArgs $;

        public Builder() {
            $ = new GetPropertyRulesBuilderRulesV20230920BehaviorStandardTlsMigrationArgs();
        }

        public Builder(GetPropertyRulesBuilderRulesV20230920BehaviorStandardTlsMigrationArgs defaults) {
            $ = new GetPropertyRulesBuilderRulesV20230920BehaviorStandardTlsMigrationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowHttpsDowngrade Allow temporary downgrade of HTTPS traffic to HTTP. This removes various `Origin`, `Referer`, `Cookie`, `Cookie2`, `sec-*` and `proxy-*` headers from the request to origin.
         * 
         * @return builder
         * 
         */
        public Builder allowHttpsDowngrade(@Nullable Output<Boolean> allowHttpsDowngrade) {
            $.allowHttpsDowngrade = allowHttpsDowngrade;
            return this;
        }

        /**
         * @param allowHttpsDowngrade Allow temporary downgrade of HTTPS traffic to HTTP. This removes various `Origin`, `Referer`, `Cookie`, `Cookie2`, `sec-*` and `proxy-*` headers from the request to origin.
         * 
         * @return builder
         * 
         */
        public Builder allowHttpsDowngrade(Boolean allowHttpsDowngrade) {
            return allowHttpsDowngrade(Output.of(allowHttpsDowngrade));
        }

        /**
         * @param allowHttpsUpgrade Allows temporary upgrade of HTTP traffic to HTTPS.
         * 
         * @return builder
         * 
         */
        public Builder allowHttpsUpgrade(@Nullable Output<Boolean> allowHttpsUpgrade) {
            $.allowHttpsUpgrade = allowHttpsUpgrade;
            return this;
        }

        /**
         * @param allowHttpsUpgrade Allows temporary upgrade of HTTP traffic to HTTPS.
         * 
         * @return builder
         * 
         */
        public Builder allowHttpsUpgrade(Boolean allowHttpsUpgrade) {
            return allowHttpsUpgrade(Output.of(allowHttpsUpgrade));
        }

        /**
         * @param cacheSharingDuration Specifies the number cache sharing days.
         * 
         * @return builder
         * 
         */
        public Builder cacheSharingDuration(@Nullable Output<Integer> cacheSharingDuration) {
            $.cacheSharingDuration = cacheSharingDuration;
            return this;
        }

        /**
         * @param cacheSharingDuration Specifies the number cache sharing days.
         * 
         * @return builder
         * 
         */
        public Builder cacheSharingDuration(Integer cacheSharingDuration) {
            return cacheSharingDuration(Output.of(cacheSharingDuration));
        }

        /**
         * @param cacheSharingStartTime Specifies when to start cache sharing.
         * 
         * @return builder
         * 
         */
        public Builder cacheSharingStartTime(@Nullable Output<String> cacheSharingStartTime) {
            $.cacheSharingStartTime = cacheSharingStartTime;
            return this;
        }

        /**
         * @param cacheSharingStartTime Specifies when to start cache sharing.
         * 
         * @return builder
         * 
         */
        public Builder cacheSharingStartTime(String cacheSharingStartTime) {
            return cacheSharingStartTime(Output.of(cacheSharingStartTime));
        }

        /**
         * @param enabled Allows migration to Standard TLS.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Allows migration to Standard TLS.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param isCertificateSniOnly Sets whether your new certificate is SNI-only.
         * 
         * @return builder
         * 
         */
        public Builder isCertificateSniOnly(@Nullable Output<Boolean> isCertificateSniOnly) {
            $.isCertificateSniOnly = isCertificateSniOnly;
            return this;
        }

        /**
         * @param isCertificateSniOnly Sets whether your new certificate is SNI-only.
         * 
         * @return builder
         * 
         */
        public Builder isCertificateSniOnly(Boolean isCertificateSniOnly) {
            return isCertificateSniOnly(Output.of(isCertificateSniOnly));
        }

        /**
         * @param isTieredDistributionUsed Allows you to align traffic to various `tieredDistribution` areas.
         * 
         * @return builder
         * 
         */
        public Builder isTieredDistributionUsed(@Nullable Output<Boolean> isTieredDistributionUsed) {
            $.isTieredDistributionUsed = isTieredDistributionUsed;
            return this;
        }

        /**
         * @param isTieredDistributionUsed Allows you to align traffic to various `tieredDistribution` areas.
         * 
         * @return builder
         * 
         */
        public Builder isTieredDistributionUsed(Boolean isTieredDistributionUsed) {
            return isTieredDistributionUsed(Output.of(isTieredDistributionUsed));
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(@Nullable Output<Boolean> locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(Boolean locked) {
            return locked(Output.of(locked));
        }

        /**
         * @param migrationDuration Specifies the number of days to migrate the cache.
         * 
         * @return builder
         * 
         */
        public Builder migrationDuration(@Nullable Output<Integer> migrationDuration) {
            $.migrationDuration = migrationDuration;
            return this;
        }

        /**
         * @param migrationDuration Specifies the number of days to migrate the cache.
         * 
         * @return builder
         * 
         */
        public Builder migrationDuration(Integer migrationDuration) {
            return migrationDuration(Output.of(migrationDuration));
        }

        /**
         * @param migrationFrom What kind of traffic you&#39;re migrating from.
         * 
         * @return builder
         * 
         */
        public Builder migrationFrom(@Nullable Output<String> migrationFrom) {
            $.migrationFrom = migrationFrom;
            return this;
        }

        /**
         * @param migrationFrom What kind of traffic you&#39;re migrating from.
         * 
         * @return builder
         * 
         */
        public Builder migrationFrom(String migrationFrom) {
            return migrationFrom(Output.of(migrationFrom));
        }

        /**
         * @param migrationStartTime Specifies when to start migrating the cache.
         * 
         * @return builder
         * 
         */
        public Builder migrationStartTime(@Nullable Output<String> migrationStartTime) {
            $.migrationStartTime = migrationStartTime;
            return this;
        }

        /**
         * @param migrationStartTime Specifies when to start migrating the cache.
         * 
         * @return builder
         * 
         */
        public Builder migrationStartTime(String migrationStartTime) {
            return migrationStartTime(Output.of(migrationStartTime));
        }

        /**
         * @param tdLocation Specifies the `tieredDistribution` location.
         * 
         * @return builder
         * 
         */
        public Builder tdLocation(@Nullable Output<String> tdLocation) {
            $.tdLocation = tdLocation;
            return this;
        }

        /**
         * @param tdLocation Specifies the `tieredDistribution` location.
         * 
         * @return builder
         * 
         */
        public Builder tdLocation(String tdLocation) {
            return tdLocation(Output.of(tdLocation));
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(@Nullable Output<String> templateUuid) {
            $.templateUuid = templateUuid;
            return this;
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(String templateUuid) {
            return templateUuid(Output.of(templateUuid));
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public GetPropertyRulesBuilderRulesV20230920BehaviorStandardTlsMigrationArgs build() {
            return $;
        }
    }

}
