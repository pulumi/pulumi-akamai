// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationMaxColor extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyTransformationMaxColor Empty = new GetImagingPolicyImagePolicyTransformationMaxColor();

    /**
     * The value representing the maximum number of colors to use with the source image.
     * 
     */
    @Import(name="colors")
    private @Nullable String colors;

    /**
     * @return The value representing the maximum number of colors to use with the source image.
     * 
     */
    public Optional<String> colors() {
        return Optional.ofNullable(this.colors);
    }

    /**
     * The value representing the maximum number of colors to use with the source image.
     * 
     */
    @Import(name="colorsVar")
    private @Nullable String colorsVar;

    /**
     * @return The value representing the maximum number of colors to use with the source image.
     * 
     */
    public Optional<String> colorsVar() {
        return Optional.ofNullable(this.colorsVar);
    }

    private GetImagingPolicyImagePolicyTransformationMaxColor() {}

    private GetImagingPolicyImagePolicyTransformationMaxColor(GetImagingPolicyImagePolicyTransformationMaxColor $) {
        this.colors = $.colors;
        this.colorsVar = $.colorsVar;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationMaxColor defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationMaxColor $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationMaxColor();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationMaxColor defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationMaxColor(Objects.requireNonNull(defaults));
        }

        /**
         * @param colors The value representing the maximum number of colors to use with the source image.
         * 
         * @return builder
         * 
         */
        public Builder colors(@Nullable String colors) {
            $.colors = colors;
            return this;
        }

        /**
         * @param colorsVar The value representing the maximum number of colors to use with the source image.
         * 
         * @return builder
         * 
         */
        public Builder colorsVar(@Nullable String colorsVar) {
            $.colorsVar = colorsVar;
            return this;
        }

        public GetImagingPolicyImagePolicyTransformationMaxColor build() {
            return $;
        }
    }

}
