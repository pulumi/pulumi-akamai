// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyRulesBuilderRulesV20240531BehaviorSegmentedContentProtection extends com.pulumi.resources.InvokeArgs {

    public static final GetPropertyRulesBuilderRulesV20240531BehaviorSegmentedContentProtection Empty = new GetPropertyRulesBuilderRulesV20240531BehaviorSegmentedContentProtection();

    /**
     * Enabling this option carries the `ACL` field from the access token over to the session token, to limit the requesting client&#39;s access to the specific URL or path set in the `ACL` field. Playback may fail if the base path of the master playlist (and variant playlist, plus segments) varies from that of the `ACL` field.
     * 
     */
    @Import(name="acl")
    private @Nullable Boolean acl;

    /**
     * @return Enabling this option carries the `ACL` field from the access token over to the session token, to limit the requesting client&#39;s access to the specific URL or path set in the `ACL` field. Playback may fail if the base path of the master playlist (and variant playlist, plus segments) varies from that of the `ACL` field.
     * 
     */
    public Optional<Boolean> acl() {
        return Optional.ofNullable(this.acl);
    }

    /**
     * Whether to enable DASH Media Encryption.
     * 
     */
    @Import(name="dashMediaEncryption")
    private @Nullable Boolean dashMediaEncryption;

    /**
     * @return Whether to enable DASH Media Encryption.
     * 
     */
    public Optional<Boolean> dashMediaEncryption() {
        return Optional.ofNullable(this.dashMediaEncryption);
    }

    /**
     * Enabling this option carries the `data/payload` field from the access token over to the session token, allowing access to opaque data for log analysis for a URL protected by a session token.
     * 
     */
    @Import(name="dataPayload")
    private @Nullable Boolean dataPayload;

    /**
     * @return Enabling this option carries the `data/payload` field from the access token over to the session token, allowing access to opaque data for log analysis for a URL protected by a session token.
     * 
     */
    public Optional<Boolean> dataPayload() {
        return Optional.ofNullable(this.dataPayload);
    }

    /**
     * When enabled, passes tokens in HLS variant manifest URLs and HLS segment URLs, as an alternative to cookies.
     * 
     */
    @Import(name="enableTokenInUri")
    private @Nullable Boolean enableTokenInUri;

    /**
     * @return When enabled, passes tokens in HLS variant manifest URLs and HLS segment URLs, as an alternative to cookies.
     * 
     */
    public Optional<Boolean> enableTokenInUri() {
        return Optional.ofNullable(this.enableTokenInUri);
    }

    /**
     * Enables the segmented content protection behavior.
     * 
     */
    @Import(name="enabled")
    private @Nullable Boolean enabled;

    /**
     * @return Enables the segmented content protection behavior.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    @Import(name="fieldCarryOver")
    private @Nullable String fieldCarryOver;

    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<String> fieldCarryOver() {
        return Optional.ofNullable(this.fieldCarryOver);
    }

    /**
     * This allows you to include additional salt properties specific to each end user to strengthen the relationship between the session token and playback session. This specifies the set of request headers whose values generate the salt value, typically `User-Agent`, `X-Playback-Session-Id`, and `Origin`. Any specified header needs to appear in the player&#39;s request.
     * 
     */
    @Import(name="headerForSalts")
    private @Nullable List<String> headerForSalts;

    /**
     * @return This allows you to include additional salt properties specific to each end user to strengthen the relationship between the session token and playback session. This specifies the set of request headers whose values generate the salt value, typically `User-Agent`, `X-Playback-Session-Id`, and `Origin`. Any specified header needs to appear in the player&#39;s request.
     * 
     */
    public Optional<List<String>> headerForSalts() {
        return Optional.ofNullable(this.headerForSalts);
    }

    /**
     * Specifies the set of filenames that form HLS master manifest URLs. You can use `*` wildcard character that matches zero or more characters. Make sure to specify master manifest filenames uniquely, to distinguish them from variant manifest files.
     * 
     */
    @Import(name="hlsMasterManifestFiles")
    private @Nullable List<String> hlsMasterManifestFiles;

    /**
     * @return Specifies the set of filenames that form HLS master manifest URLs. You can use `*` wildcard character that matches zero or more characters. Make sure to specify master manifest filenames uniquely, to distinguish them from variant manifest files.
     * 
     */
    public Optional<List<String>> hlsMasterManifestFiles() {
        return Optional.ofNullable(this.hlsMasterManifestFiles);
    }

    /**
     * Enables HLS Segment Encryption.
     * 
     */
    @Import(name="hlsMediaEncryption")
    private @Nullable Boolean hlsMediaEncryption;

    /**
     * @return Enables HLS Segment Encryption.
     * 
     */
    public Optional<Boolean> hlsMediaEncryption() {
        return Optional.ofNullable(this.hlsMediaEncryption);
    }

    /**
     * Enabling this restricts content access to a specific IP address, only appropriate if it does not change during the playback session.
     * 
     */
    @Import(name="ip")
    private @Nullable Boolean ip;

    /**
     * @return Enabling this restricts content access to a specific IP address, only appropriate if it does not change during the playback session.
     * 
     */
    public Optional<Boolean> ip() {
        return Optional.ofNullable(this.ip);
    }

    /**
     * Specifies the encryption key to use as a shared secret to validate tokens.
     * 
     */
    @Import(name="key")
    private @Nullable String key;

    /**
     * @return Specifies the encryption key to use as a shared secret to validate tokens.
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    @Import(name="locked")
    private @Nullable Boolean locked;

    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Boolean> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    @Import(name="mediaEncryptionTitle")
    private @Nullable String mediaEncryptionTitle;

    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<String> mediaEncryptionTitle() {
        return Optional.ofNullable(this.mediaEncryptionTitle);
    }

    /**
     * Identifies the `TokenAuth` tokens to block from accessing your content.
     * 
     */
    @Import(name="revokedListId")
    private @Nullable Integer revokedListId;

    /**
     * @return Identifies the `TokenAuth` tokens to block from accessing your content.
     * 
     */
    public Optional<Integer> revokedListId() {
        return Optional.ofNullable(this.revokedListId);
    }

    /**
     * Specifies a salt as input into the token for added security. This value needs to match the salt used in the token generation code.
     * 
     */
    @Import(name="salt")
    private @Nullable String salt;

    /**
     * @return Specifies a salt as input into the token for added security. This value needs to match the salt used in the token generation code.
     * 
     */
    public Optional<String> salt() {
        return Optional.ofNullable(this.salt);
    }

    /**
     * Enabling this option carries the `session_id` value from the access token over to the session token, for use in tracking and counting unique playback sessions.
     * 
     */
    @Import(name="sessionId")
    private @Nullable Boolean sessionId;

    /**
     * @return Enabling this option carries the `session_id` value from the access token over to the session token, for use in tracking and counting unique playback sessions.
     * 
     */
    public Optional<Boolean> sessionId() {
        return Optional.ofNullable(this.sessionId);
    }

    /**
     * This option is for internal usage only.
     * 
     */
    @Import(name="templateUuid")
    private @Nullable String templateUuid;

    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<String> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }

    /**
     * This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    @Import(name="tokenAuthHlsTitle")
    private @Nullable String tokenAuthHlsTitle;

    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<String> tokenAuthHlsTitle() {
        return Optional.ofNullable(this.tokenAuthHlsTitle);
    }

    /**
     * This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    @Import(name="tokenAuthenticationTitle")
    private @Nullable String tokenAuthenticationTitle;

    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<String> tokenAuthenticationTitle() {
        return Optional.ofNullable(this.tokenAuthenticationTitle);
    }

    /**
     * Enable this to deny requests from playback URLs that contain a `TokenAuth` token that uses specific token identifiers.
     * 
     */
    @Import(name="tokenRevocationEnabled")
    private @Nullable Boolean tokenRevocationEnabled;

    /**
     * @return Enable this to deny requests from playback URLs that contain a `TokenAuth` token that uses specific token identifiers.
     * 
     */
    public Optional<Boolean> tokenRevocationEnabled() {
        return Optional.ofNullable(this.tokenRevocationEnabled);
    }

    /**
     * This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    @Import(name="tokenRevocationTitle")
    private @Nullable String tokenRevocationTitle;

    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<String> tokenRevocationTitle() {
        return Optional.ofNullable(this.tokenRevocationTitle);
    }

    /**
     * An alternate encryption key to match along with the `key` field, allowing you to rotate keys with no down time.
     * 
     */
    @Import(name="transitionKey")
    private @Nullable String transitionKey;

    /**
     * @return An alternate encryption key to match along with the `key` field, allowing you to rotate keys with no down time.
     * 
     */
    public Optional<String> transitionKey() {
        return Optional.ofNullable(this.transitionKey);
    }

    /**
     * Allows you to specify advanced `transitionKey` and `salt` options.
     * 
     */
    @Import(name="useAdvanced")
    private @Nullable Boolean useAdvanced;

    /**
     * @return Allows you to specify advanced `transitionKey` and `salt` options.
     * 
     */
    public Optional<Boolean> useAdvanced() {
        return Optional.ofNullable(this.useAdvanced);
    }

    /**
     * A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    @Import(name="uuid")
    private @Nullable String uuid;

    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private GetPropertyRulesBuilderRulesV20240531BehaviorSegmentedContentProtection() {}

    private GetPropertyRulesBuilderRulesV20240531BehaviorSegmentedContentProtection(GetPropertyRulesBuilderRulesV20240531BehaviorSegmentedContentProtection $) {
        this.acl = $.acl;
        this.dashMediaEncryption = $.dashMediaEncryption;
        this.dataPayload = $.dataPayload;
        this.enableTokenInUri = $.enableTokenInUri;
        this.enabled = $.enabled;
        this.fieldCarryOver = $.fieldCarryOver;
        this.headerForSalts = $.headerForSalts;
        this.hlsMasterManifestFiles = $.hlsMasterManifestFiles;
        this.hlsMediaEncryption = $.hlsMediaEncryption;
        this.ip = $.ip;
        this.key = $.key;
        this.locked = $.locked;
        this.mediaEncryptionTitle = $.mediaEncryptionTitle;
        this.revokedListId = $.revokedListId;
        this.salt = $.salt;
        this.sessionId = $.sessionId;
        this.templateUuid = $.templateUuid;
        this.tokenAuthHlsTitle = $.tokenAuthHlsTitle;
        this.tokenAuthenticationTitle = $.tokenAuthenticationTitle;
        this.tokenRevocationEnabled = $.tokenRevocationEnabled;
        this.tokenRevocationTitle = $.tokenRevocationTitle;
        this.transitionKey = $.transitionKey;
        this.useAdvanced = $.useAdvanced;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesBuilderRulesV20240531BehaviorSegmentedContentProtection defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesBuilderRulesV20240531BehaviorSegmentedContentProtection $;

        public Builder() {
            $ = new GetPropertyRulesBuilderRulesV20240531BehaviorSegmentedContentProtection();
        }

        public Builder(GetPropertyRulesBuilderRulesV20240531BehaviorSegmentedContentProtection defaults) {
            $ = new GetPropertyRulesBuilderRulesV20240531BehaviorSegmentedContentProtection(Objects.requireNonNull(defaults));
        }

        /**
         * @param acl Enabling this option carries the `ACL` field from the access token over to the session token, to limit the requesting client&#39;s access to the specific URL or path set in the `ACL` field. Playback may fail if the base path of the master playlist (and variant playlist, plus segments) varies from that of the `ACL` field.
         * 
         * @return builder
         * 
         */
        public Builder acl(@Nullable Boolean acl) {
            $.acl = acl;
            return this;
        }

        /**
         * @param dashMediaEncryption Whether to enable DASH Media Encryption.
         * 
         * @return builder
         * 
         */
        public Builder dashMediaEncryption(@Nullable Boolean dashMediaEncryption) {
            $.dashMediaEncryption = dashMediaEncryption;
            return this;
        }

        /**
         * @param dataPayload Enabling this option carries the `data/payload` field from the access token over to the session token, allowing access to opaque data for log analysis for a URL protected by a session token.
         * 
         * @return builder
         * 
         */
        public Builder dataPayload(@Nullable Boolean dataPayload) {
            $.dataPayload = dataPayload;
            return this;
        }

        /**
         * @param enableTokenInUri When enabled, passes tokens in HLS variant manifest URLs and HLS segment URLs, as an alternative to cookies.
         * 
         * @return builder
         * 
         */
        public Builder enableTokenInUri(@Nullable Boolean enableTokenInUri) {
            $.enableTokenInUri = enableTokenInUri;
            return this;
        }

        /**
         * @param enabled Enables the segmented content protection behavior.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param fieldCarryOver This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder fieldCarryOver(@Nullable String fieldCarryOver) {
            $.fieldCarryOver = fieldCarryOver;
            return this;
        }

        /**
         * @param headerForSalts This allows you to include additional salt properties specific to each end user to strengthen the relationship between the session token and playback session. This specifies the set of request headers whose values generate the salt value, typically `User-Agent`, `X-Playback-Session-Id`, and `Origin`. Any specified header needs to appear in the player&#39;s request.
         * 
         * @return builder
         * 
         */
        public Builder headerForSalts(@Nullable List<String> headerForSalts) {
            $.headerForSalts = headerForSalts;
            return this;
        }

        /**
         * @param headerForSalts This allows you to include additional salt properties specific to each end user to strengthen the relationship between the session token and playback session. This specifies the set of request headers whose values generate the salt value, typically `User-Agent`, `X-Playback-Session-Id`, and `Origin`. Any specified header needs to appear in the player&#39;s request.
         * 
         * @return builder
         * 
         */
        public Builder headerForSalts(String... headerForSalts) {
            return headerForSalts(List.of(headerForSalts));
        }

        /**
         * @param hlsMasterManifestFiles Specifies the set of filenames that form HLS master manifest URLs. You can use `*` wildcard character that matches zero or more characters. Make sure to specify master manifest filenames uniquely, to distinguish them from variant manifest files.
         * 
         * @return builder
         * 
         */
        public Builder hlsMasterManifestFiles(@Nullable List<String> hlsMasterManifestFiles) {
            $.hlsMasterManifestFiles = hlsMasterManifestFiles;
            return this;
        }

        /**
         * @param hlsMasterManifestFiles Specifies the set of filenames that form HLS master manifest URLs. You can use `*` wildcard character that matches zero or more characters. Make sure to specify master manifest filenames uniquely, to distinguish them from variant manifest files.
         * 
         * @return builder
         * 
         */
        public Builder hlsMasterManifestFiles(String... hlsMasterManifestFiles) {
            return hlsMasterManifestFiles(List.of(hlsMasterManifestFiles));
        }

        /**
         * @param hlsMediaEncryption Enables HLS Segment Encryption.
         * 
         * @return builder
         * 
         */
        public Builder hlsMediaEncryption(@Nullable Boolean hlsMediaEncryption) {
            $.hlsMediaEncryption = hlsMediaEncryption;
            return this;
        }

        /**
         * @param ip Enabling this restricts content access to a specific IP address, only appropriate if it does not change during the playback session.
         * 
         * @return builder
         * 
         */
        public Builder ip(@Nullable Boolean ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param key Specifies the encryption key to use as a shared secret to validate tokens.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable String key) {
            $.key = key;
            return this;
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(@Nullable Boolean locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param mediaEncryptionTitle This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder mediaEncryptionTitle(@Nullable String mediaEncryptionTitle) {
            $.mediaEncryptionTitle = mediaEncryptionTitle;
            return this;
        }

        /**
         * @param revokedListId Identifies the `TokenAuth` tokens to block from accessing your content.
         * 
         * @return builder
         * 
         */
        public Builder revokedListId(@Nullable Integer revokedListId) {
            $.revokedListId = revokedListId;
            return this;
        }

        /**
         * @param salt Specifies a salt as input into the token for added security. This value needs to match the salt used in the token generation code.
         * 
         * @return builder
         * 
         */
        public Builder salt(@Nullable String salt) {
            $.salt = salt;
            return this;
        }

        /**
         * @param sessionId Enabling this option carries the `session_id` value from the access token over to the session token, for use in tracking and counting unique playback sessions.
         * 
         * @return builder
         * 
         */
        public Builder sessionId(@Nullable Boolean sessionId) {
            $.sessionId = sessionId;
            return this;
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(@Nullable String templateUuid) {
            $.templateUuid = templateUuid;
            return this;
        }

        /**
         * @param tokenAuthHlsTitle This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder tokenAuthHlsTitle(@Nullable String tokenAuthHlsTitle) {
            $.tokenAuthHlsTitle = tokenAuthHlsTitle;
            return this;
        }

        /**
         * @param tokenAuthenticationTitle This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder tokenAuthenticationTitle(@Nullable String tokenAuthenticationTitle) {
            $.tokenAuthenticationTitle = tokenAuthenticationTitle;
            return this;
        }

        /**
         * @param tokenRevocationEnabled Enable this to deny requests from playback URLs that contain a `TokenAuth` token that uses specific token identifiers.
         * 
         * @return builder
         * 
         */
        public Builder tokenRevocationEnabled(@Nullable Boolean tokenRevocationEnabled) {
            $.tokenRevocationEnabled = tokenRevocationEnabled;
            return this;
        }

        /**
         * @param tokenRevocationTitle This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder tokenRevocationTitle(@Nullable String tokenRevocationTitle) {
            $.tokenRevocationTitle = tokenRevocationTitle;
            return this;
        }

        /**
         * @param transitionKey An alternate encryption key to match along with the `key` field, allowing you to rotate keys with no down time.
         * 
         * @return builder
         * 
         */
        public Builder transitionKey(@Nullable String transitionKey) {
            $.transitionKey = transitionKey;
            return this;
        }

        /**
         * @param useAdvanced Allows you to specify advanced `transitionKey` and `salt` options.
         * 
         * @return builder
         * 
         */
        public Builder useAdvanced(@Nullable Boolean useAdvanced) {
            $.useAdvanced = useAdvanced;
            return this;
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable String uuid) {
            $.uuid = uuid;
            return this;
        }

        public GetPropertyRulesBuilderRulesV20240531BehaviorSegmentedContentProtection build() {
            return $;
        }
    }

}
