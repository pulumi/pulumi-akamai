// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetMtlskeystoreAccountCaCertificatesCertificate {
    /**
     * @return The account the CA certificate is under.
     * 
     */
    private String accountId;
    /**
     * @return The certificate block of the CA certificate.
     * 
     */
    private String certificate;
    /**
     * @return The common name of the CA certificate.
     * 
     */
    private String commonName;
    /**
     * @return The user who created the CA certificate.
     * 
     */
    private String createdBy;
    /**
     * @return An ISO 8601 timestamp indicating the CA certificate&#39;s creation.
     * 
     */
    private String createdDate;
    /**
     * @return An ISO 8601 timestamp indicating when the CA certificate expires.
     * 
     */
    private String expiryDate;
    /**
     * @return The unique identifier of the CA certificate.
     * 
     */
    private Integer id;
    /**
     * @return An ISO 8601 timestamp indicating the CA certificate&#39;s availability.
     * 
     */
    private String issuedDate;
    /**
     * @return Identifies the CA certificate&#39;s encryption algorithm. Possible values: `RSA` or `ECDSA`.
     * 
     */
    private String keyAlgorithm;
    /**
     * @return The private key length of the CA certificate.
     * 
     */
    private Integer keySizeInBytes;
    /**
     * @return An ISO 8601 timestamp indicating when the CA certificate&#39;s status moved from QUALIFYING to CURRENT.
     * 
     */
    private String qualificationDate;
    /**
     * @return Specifies the algorithm that secures the data exchange between the edge server and origin.
     * 
     */
    private String signatureAlgorithm;
    /**
     * @return The status of the CA certificate. Possible values: QUALIFYING, CURRENT, PREVIOUS, or EXPIRED.
     * 
     */
    private String status;
    /**
     * @return The public key&#39;s entity stored in the CA certificate&#39;s subject public key field.
     * 
     */
    private String subject;
    /**
     * @return The version of the CA certificate.
     * 
     */
    private Integer version;

    private GetMtlskeystoreAccountCaCertificatesCertificate() {}
    /**
     * @return The account the CA certificate is under.
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return The certificate block of the CA certificate.
     * 
     */
    public String certificate() {
        return this.certificate;
    }
    /**
     * @return The common name of the CA certificate.
     * 
     */
    public String commonName() {
        return this.commonName;
    }
    /**
     * @return The user who created the CA certificate.
     * 
     */
    public String createdBy() {
        return this.createdBy;
    }
    /**
     * @return An ISO 8601 timestamp indicating the CA certificate&#39;s creation.
     * 
     */
    public String createdDate() {
        return this.createdDate;
    }
    /**
     * @return An ISO 8601 timestamp indicating when the CA certificate expires.
     * 
     */
    public String expiryDate() {
        return this.expiryDate;
    }
    /**
     * @return The unique identifier of the CA certificate.
     * 
     */
    public Integer id() {
        return this.id;
    }
    /**
     * @return An ISO 8601 timestamp indicating the CA certificate&#39;s availability.
     * 
     */
    public String issuedDate() {
        return this.issuedDate;
    }
    /**
     * @return Identifies the CA certificate&#39;s encryption algorithm. Possible values: `RSA` or `ECDSA`.
     * 
     */
    public String keyAlgorithm() {
        return this.keyAlgorithm;
    }
    /**
     * @return The private key length of the CA certificate.
     * 
     */
    public Integer keySizeInBytes() {
        return this.keySizeInBytes;
    }
    /**
     * @return An ISO 8601 timestamp indicating when the CA certificate&#39;s status moved from QUALIFYING to CURRENT.
     * 
     */
    public String qualificationDate() {
        return this.qualificationDate;
    }
    /**
     * @return Specifies the algorithm that secures the data exchange between the edge server and origin.
     * 
     */
    public String signatureAlgorithm() {
        return this.signatureAlgorithm;
    }
    /**
     * @return The status of the CA certificate. Possible values: QUALIFYING, CURRENT, PREVIOUS, or EXPIRED.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The public key&#39;s entity stored in the CA certificate&#39;s subject public key field.
     * 
     */
    public String subject() {
        return this.subject;
    }
    /**
     * @return The version of the CA certificate.
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMtlskeystoreAccountCaCertificatesCertificate defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private String certificate;
        private String commonName;
        private String createdBy;
        private String createdDate;
        private String expiryDate;
        private Integer id;
        private String issuedDate;
        private String keyAlgorithm;
        private Integer keySizeInBytes;
        private String qualificationDate;
        private String signatureAlgorithm;
        private String status;
        private String subject;
        private Integer version;
        public Builder() {}
        public Builder(GetMtlskeystoreAccountCaCertificatesCertificate defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.certificate = defaults.certificate;
    	      this.commonName = defaults.commonName;
    	      this.createdBy = defaults.createdBy;
    	      this.createdDate = defaults.createdDate;
    	      this.expiryDate = defaults.expiryDate;
    	      this.id = defaults.id;
    	      this.issuedDate = defaults.issuedDate;
    	      this.keyAlgorithm = defaults.keyAlgorithm;
    	      this.keySizeInBytes = defaults.keySizeInBytes;
    	      this.qualificationDate = defaults.qualificationDate;
    	      this.signatureAlgorithm = defaults.signatureAlgorithm;
    	      this.status = defaults.status;
    	      this.subject = defaults.subject;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreAccountCaCertificatesCertificate", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder certificate(String certificate) {
            if (certificate == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreAccountCaCertificatesCertificate", "certificate");
            }
            this.certificate = certificate;
            return this;
        }
        @CustomType.Setter
        public Builder commonName(String commonName) {
            if (commonName == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreAccountCaCertificatesCertificate", "commonName");
            }
            this.commonName = commonName;
            return this;
        }
        @CustomType.Setter
        public Builder createdBy(String createdBy) {
            if (createdBy == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreAccountCaCertificatesCertificate", "createdBy");
            }
            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder createdDate(String createdDate) {
            if (createdDate == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreAccountCaCertificatesCertificate", "createdDate");
            }
            this.createdDate = createdDate;
            return this;
        }
        @CustomType.Setter
        public Builder expiryDate(String expiryDate) {
            if (expiryDate == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreAccountCaCertificatesCertificate", "expiryDate");
            }
            this.expiryDate = expiryDate;
            return this;
        }
        @CustomType.Setter
        public Builder id(Integer id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreAccountCaCertificatesCertificate", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder issuedDate(String issuedDate) {
            if (issuedDate == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreAccountCaCertificatesCertificate", "issuedDate");
            }
            this.issuedDate = issuedDate;
            return this;
        }
        @CustomType.Setter
        public Builder keyAlgorithm(String keyAlgorithm) {
            if (keyAlgorithm == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreAccountCaCertificatesCertificate", "keyAlgorithm");
            }
            this.keyAlgorithm = keyAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder keySizeInBytes(Integer keySizeInBytes) {
            if (keySizeInBytes == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreAccountCaCertificatesCertificate", "keySizeInBytes");
            }
            this.keySizeInBytes = keySizeInBytes;
            return this;
        }
        @CustomType.Setter
        public Builder qualificationDate(String qualificationDate) {
            if (qualificationDate == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreAccountCaCertificatesCertificate", "qualificationDate");
            }
            this.qualificationDate = qualificationDate;
            return this;
        }
        @CustomType.Setter
        public Builder signatureAlgorithm(String signatureAlgorithm) {
            if (signatureAlgorithm == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreAccountCaCertificatesCertificate", "signatureAlgorithm");
            }
            this.signatureAlgorithm = signatureAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreAccountCaCertificatesCertificate", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder subject(String subject) {
            if (subject == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreAccountCaCertificatesCertificate", "subject");
            }
            this.subject = subject;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreAccountCaCertificatesCertificate", "version");
            }
            this.version = version;
            return this;
        }
        public GetMtlskeystoreAccountCaCertificatesCertificate build() {
            final var _resultValue = new GetMtlskeystoreAccountCaCertificatesCertificate();
            _resultValue.accountId = accountId;
            _resultValue.certificate = certificate;
            _resultValue.commonName = commonName;
            _resultValue.createdBy = createdBy;
            _resultValue.createdDate = createdDate;
            _resultValue.expiryDate = expiryDate;
            _resultValue.id = id;
            _resultValue.issuedDate = issuedDate;
            _resultValue.keyAlgorithm = keyAlgorithm;
            _resultValue.keySizeInBytes = keySizeInBytes;
            _resultValue.qualificationDate = qualificationDate;
            _resultValue.signatureAlgorithm = signatureAlgorithm;
            _resultValue.status = status;
            _resultValue.subject = subject;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
