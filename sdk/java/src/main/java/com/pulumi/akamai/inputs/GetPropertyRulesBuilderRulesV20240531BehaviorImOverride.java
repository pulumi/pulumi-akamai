// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyRulesBuilderRulesV20240531BehaviorImOverride extends com.pulumi.resources.InvokeArgs {

    public static final GetPropertyRulesBuilderRulesV20240531BehaviorImOverride Empty = new GetPropertyRulesBuilderRulesV20240531BehaviorImOverride();

    /**
     * Directly specifies the pixel density. The numeric value is a scaling factor of 1, representing normal density.
     * 
     */
    @Import(name="dpr")
    private @Nullable Double dpr;

    /**
     * @return Directly specifies the pixel density. The numeric value is a scaling factor of 1, representing normal density.
     * 
     */
    public Optional<Double> dpr() {
        return Optional.ofNullable(this.dpr);
    }

    /**
     * This selects the variable with the desired pixel density. The variable specifies the same type of data as the `dpr` option below.
     * 
     */
    @Import(name="dprvar")
    private @Nullable String dprvar;

    /**
     * @return This selects the variable with the desired pixel density. The variable specifies the same type of data as the `dpr` option below.
     * 
     */
    public Optional<String> dprvar() {
        return Optional.ofNullable(this.dprvar);
    }

    /**
     * Whether to exclude all query parameters from the Image and Video Manager cache key.
     * 
     */
    @Import(name="excludeAllQueryParameters")
    private @Nullable Boolean excludeAllQueryParameters;

    /**
     * @return Whether to exclude all query parameters from the Image and Video Manager cache key.
     * 
     */
    public Optional<Boolean> excludeAllQueryParameters() {
        return Optional.ofNullable(this.excludeAllQueryParameters);
    }

    /**
     * Specifies individual query parameters to exclude from the Image and Video Manager cache key.
     * 
     */
    @Import(name="excludedQueryParameters")
    private @Nullable List<String> excludedQueryParameters;

    /**
     * @return Specifies individual query parameters to exclude from the Image and Video Manager cache key.
     * 
     */
    public Optional<List<String>> excludedQueryParameters() {
        return Optional.ofNullable(this.excludedQueryParameters);
    }

    /**
     * Specifies the type of the browser, or the encodings passed in the `Accept` header, that you want to optimize images for.
     * 
     */
    @Import(name="format")
    private @Nullable String format;

    /**
     * @return Specifies the type of the browser, or the encodings passed in the `Accept` header, that you want to optimize images for.
     * 
     */
    public Optional<String> format() {
        return Optional.ofNullable(this.format);
    }

    /**
     * This selects the variable with the name of the browser you want to optimize images for. The variable specifies the same type of data as the `format` option below.
     * 
     */
    @Import(name="formatvar")
    private @Nullable String formatvar;

    /**
     * @return This selects the variable with the name of the browser you want to optimize images for. The variable specifies the same type of data as the `format` option below.
     * 
     */
    public Optional<String> formatvar() {
        return Optional.ofNullable(this.formatvar);
    }

    /**
     * Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    @Import(name="locked")
    private @Nullable Boolean locked;

    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Boolean> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * Selects the type of query parameter you want to set.
     * 
     */
    @Import(name="override")
    private @Nullable String override;

    /**
     * @return Selects the type of query parameter you want to set.
     * 
     */
    public Optional<String> override() {
        return Optional.ofNullable(this.override);
    }

    /**
     * This selects the desired Image and Video Manager policy name directly. If there is no policy by that name, Image and Video Manager serves the image unmodified.
     * 
     */
    @Import(name="policy")
    private @Nullable String policy;

    /**
     * @return This selects the desired Image and Video Manager policy name directly. If there is no policy by that name, Image and Video Manager serves the image unmodified.
     * 
     */
    public Optional<String> policy() {
        return Optional.ofNullable(this.policy);
    }

    /**
     * This selects the variable with the desired Image and Video Manager policy name to apply to image requests. If there is no policy by that name, Image and Video Manager serves the image unmodified.
     * 
     */
    @Import(name="policyvar")
    private @Nullable String policyvar;

    /**
     * @return This selects the variable with the desired Image and Video Manager policy name to apply to image requests. If there is no policy by that name, Image and Video Manager serves the image unmodified.
     * 
     */
    public Optional<String> policyvar() {
        return Optional.ofNullable(this.policyvar);
    }

    /**
     * This selects one of the property&#39;s rule tree variables to assign to the `policyvarName` variable within Image and Video Manager.
     * 
     */
    @Import(name="policyvarIMvar")
    private @Nullable String policyvarIMvar;

    /**
     * @return This selects one of the property&#39;s rule tree variables to assign to the `policyvarName` variable within Image and Video Manager.
     * 
     */
    public Optional<String> policyvarIMvar() {
        return Optional.ofNullable(this.policyvarIMvar);
    }

    /**
     * This selects the name of one of the variables defined in an Image and Video Manager policy that you want to replace with the property&#39;s rule tree variable.
     * 
     */
    @Import(name="policyvarName")
    private @Nullable String policyvarName;

    /**
     * @return This selects the name of one of the variables defined in an Image and Video Manager policy that you want to replace with the property&#39;s rule tree variable.
     * 
     */
    public Optional<String> policyvarName() {
        return Optional.ofNullable(this.policyvarName);
    }

    /**
     * This option is for internal usage only.
     * 
     */
    @Import(name="templateUuid")
    private @Nullable String templateUuid;

    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<String> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }

    /**
     * Specifies how to set a query parameter.
     * 
     */
    @Import(name="typesel")
    private @Nullable String typesel;

    /**
     * @return Specifies how to set a query parameter.
     * 
     */
    public Optional<String> typesel() {
        return Optional.ofNullable(this.typesel);
    }

    /**
     * A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    @Import(name="uuid")
    private @Nullable String uuid;

    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    /**
     * Sets the image&#39;s desired pixel width directly. If the Image Manager policy doesn&#39;t define that width, it serves the next largest width.
     * 
     */
    @Import(name="width")
    private @Nullable Double width;

    /**
     * @return Sets the image&#39;s desired pixel width directly. If the Image Manager policy doesn&#39;t define that width, it serves the next largest width.
     * 
     */
    public Optional<Double> width() {
        return Optional.ofNullable(this.width);
    }

    /**
     * Selects the variable with the desired width.  If the Image and Video Manager policy doesn&#39;t define that width, it serves the next largest width.
     * 
     */
    @Import(name="widthvar")
    private @Nullable String widthvar;

    /**
     * @return Selects the variable with the desired width.  If the Image and Video Manager policy doesn&#39;t define that width, it serves the next largest width.
     * 
     */
    public Optional<String> widthvar() {
        return Optional.ofNullable(this.widthvar);
    }

    private GetPropertyRulesBuilderRulesV20240531BehaviorImOverride() {}

    private GetPropertyRulesBuilderRulesV20240531BehaviorImOverride(GetPropertyRulesBuilderRulesV20240531BehaviorImOverride $) {
        this.dpr = $.dpr;
        this.dprvar = $.dprvar;
        this.excludeAllQueryParameters = $.excludeAllQueryParameters;
        this.excludedQueryParameters = $.excludedQueryParameters;
        this.format = $.format;
        this.formatvar = $.formatvar;
        this.locked = $.locked;
        this.override = $.override;
        this.policy = $.policy;
        this.policyvar = $.policyvar;
        this.policyvarIMvar = $.policyvarIMvar;
        this.policyvarName = $.policyvarName;
        this.templateUuid = $.templateUuid;
        this.typesel = $.typesel;
        this.uuid = $.uuid;
        this.width = $.width;
        this.widthvar = $.widthvar;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesBuilderRulesV20240531BehaviorImOverride defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesBuilderRulesV20240531BehaviorImOverride $;

        public Builder() {
            $ = new GetPropertyRulesBuilderRulesV20240531BehaviorImOverride();
        }

        public Builder(GetPropertyRulesBuilderRulesV20240531BehaviorImOverride defaults) {
            $ = new GetPropertyRulesBuilderRulesV20240531BehaviorImOverride(Objects.requireNonNull(defaults));
        }

        /**
         * @param dpr Directly specifies the pixel density. The numeric value is a scaling factor of 1, representing normal density.
         * 
         * @return builder
         * 
         */
        public Builder dpr(@Nullable Double dpr) {
            $.dpr = dpr;
            return this;
        }

        /**
         * @param dprvar This selects the variable with the desired pixel density. The variable specifies the same type of data as the `dpr` option below.
         * 
         * @return builder
         * 
         */
        public Builder dprvar(@Nullable String dprvar) {
            $.dprvar = dprvar;
            return this;
        }

        /**
         * @param excludeAllQueryParameters Whether to exclude all query parameters from the Image and Video Manager cache key.
         * 
         * @return builder
         * 
         */
        public Builder excludeAllQueryParameters(@Nullable Boolean excludeAllQueryParameters) {
            $.excludeAllQueryParameters = excludeAllQueryParameters;
            return this;
        }

        /**
         * @param excludedQueryParameters Specifies individual query parameters to exclude from the Image and Video Manager cache key.
         * 
         * @return builder
         * 
         */
        public Builder excludedQueryParameters(@Nullable List<String> excludedQueryParameters) {
            $.excludedQueryParameters = excludedQueryParameters;
            return this;
        }

        /**
         * @param excludedQueryParameters Specifies individual query parameters to exclude from the Image and Video Manager cache key.
         * 
         * @return builder
         * 
         */
        public Builder excludedQueryParameters(String... excludedQueryParameters) {
            return excludedQueryParameters(List.of(excludedQueryParameters));
        }

        /**
         * @param format Specifies the type of the browser, or the encodings passed in the `Accept` header, that you want to optimize images for.
         * 
         * @return builder
         * 
         */
        public Builder format(@Nullable String format) {
            $.format = format;
            return this;
        }

        /**
         * @param formatvar This selects the variable with the name of the browser you want to optimize images for. The variable specifies the same type of data as the `format` option below.
         * 
         * @return builder
         * 
         */
        public Builder formatvar(@Nullable String formatvar) {
            $.formatvar = formatvar;
            return this;
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(@Nullable Boolean locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param override Selects the type of query parameter you want to set.
         * 
         * @return builder
         * 
         */
        public Builder override(@Nullable String override) {
            $.override = override;
            return this;
        }

        /**
         * @param policy This selects the desired Image and Video Manager policy name directly. If there is no policy by that name, Image and Video Manager serves the image unmodified.
         * 
         * @return builder
         * 
         */
        public Builder policy(@Nullable String policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param policyvar This selects the variable with the desired Image and Video Manager policy name to apply to image requests. If there is no policy by that name, Image and Video Manager serves the image unmodified.
         * 
         * @return builder
         * 
         */
        public Builder policyvar(@Nullable String policyvar) {
            $.policyvar = policyvar;
            return this;
        }

        /**
         * @param policyvarIMvar This selects one of the property&#39;s rule tree variables to assign to the `policyvarName` variable within Image and Video Manager.
         * 
         * @return builder
         * 
         */
        public Builder policyvarIMvar(@Nullable String policyvarIMvar) {
            $.policyvarIMvar = policyvarIMvar;
            return this;
        }

        /**
         * @param policyvarName This selects the name of one of the variables defined in an Image and Video Manager policy that you want to replace with the property&#39;s rule tree variable.
         * 
         * @return builder
         * 
         */
        public Builder policyvarName(@Nullable String policyvarName) {
            $.policyvarName = policyvarName;
            return this;
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(@Nullable String templateUuid) {
            $.templateUuid = templateUuid;
            return this;
        }

        /**
         * @param typesel Specifies how to set a query parameter.
         * 
         * @return builder
         * 
         */
        public Builder typesel(@Nullable String typesel) {
            $.typesel = typesel;
            return this;
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable String uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param width Sets the image&#39;s desired pixel width directly. If the Image Manager policy doesn&#39;t define that width, it serves the next largest width.
         * 
         * @return builder
         * 
         */
        public Builder width(@Nullable Double width) {
            $.width = width;
            return this;
        }

        /**
         * @param widthvar Selects the variable with the desired width.  If the Image and Video Manager policy doesn&#39;t define that width, it serves the next largest width.
         * 
         * @return builder
         * 
         */
        public Builder widthvar(@Nullable String widthvar) {
            $.widthvar = widthvar;
            return this;
        }

        public GetPropertyRulesBuilderRulesV20240531BehaviorImOverride build() {
            return $;
        }
    }

}
