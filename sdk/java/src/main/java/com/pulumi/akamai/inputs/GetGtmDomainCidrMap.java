// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetGtmDomainCidrMapAssignment;
import com.pulumi.akamai.inputs.GetGtmDomainCidrMapDefaultDatacenter;
import com.pulumi.akamai.inputs.GetGtmDomainCidrMapLink;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetGtmDomainCidrMap extends com.pulumi.resources.InvokeArgs {

    public static final GetGtmDomainCidrMap Empty = new GetGtmDomainCidrMap();

    /**
     * Contains information about the CIDR zone groupings of CIDR blocks.
     * 
     */
    @Import(name="assignments")
    private @Nullable List<GetGtmDomainCidrMapAssignment> assignments;

    /**
     * @return Contains information about the CIDR zone groupings of CIDR blocks.
     * 
     */
    public Optional<List<GetGtmDomainCidrMapAssignment>> assignments() {
        return Optional.ofNullable(this.assignments);
    }

    /**
     * A placeholder for all other CIDR zones, CIDR blocks not found in these CIDR zones.
     * 
     */
    @Import(name="defaultDatacenter")
    private @Nullable GetGtmDomainCidrMapDefaultDatacenter defaultDatacenter;

    /**
     * @return A placeholder for all other CIDR zones, CIDR blocks not found in these CIDR zones.
     * 
     */
    public Optional<GetGtmDomainCidrMapDefaultDatacenter> defaultDatacenter() {
        return Optional.ofNullable(this.defaultDatacenter);
    }

    /**
     * Specifies the URL path that allows direct navigation to the CIDR map.
     * 
     */
    @Import(name="links")
    private @Nullable List<GetGtmDomainCidrMapLink> links;

    /**
     * @return Specifies the URL path that allows direct navigation to the CIDR map.
     * 
     */
    public Optional<List<GetGtmDomainCidrMapLink>> links() {
        return Optional.ofNullable(this.links);
    }

    /**
     * Unique name for the CIDR map.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Unique name for the CIDR map.
     * 
     */
    public String name() {
        return this.name;
    }

    private GetGtmDomainCidrMap() {}

    private GetGtmDomainCidrMap(GetGtmDomainCidrMap $) {
        this.assignments = $.assignments;
        this.defaultDatacenter = $.defaultDatacenter;
        this.links = $.links;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGtmDomainCidrMap defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGtmDomainCidrMap $;

        public Builder() {
            $ = new GetGtmDomainCidrMap();
        }

        public Builder(GetGtmDomainCidrMap defaults) {
            $ = new GetGtmDomainCidrMap(Objects.requireNonNull(defaults));
        }

        /**
         * @param assignments Contains information about the CIDR zone groupings of CIDR blocks.
         * 
         * @return builder
         * 
         */
        public Builder assignments(@Nullable List<GetGtmDomainCidrMapAssignment> assignments) {
            $.assignments = assignments;
            return this;
        }

        /**
         * @param assignments Contains information about the CIDR zone groupings of CIDR blocks.
         * 
         * @return builder
         * 
         */
        public Builder assignments(GetGtmDomainCidrMapAssignment... assignments) {
            return assignments(List.of(assignments));
        }

        /**
         * @param defaultDatacenter A placeholder for all other CIDR zones, CIDR blocks not found in these CIDR zones.
         * 
         * @return builder
         * 
         */
        public Builder defaultDatacenter(@Nullable GetGtmDomainCidrMapDefaultDatacenter defaultDatacenter) {
            $.defaultDatacenter = defaultDatacenter;
            return this;
        }

        /**
         * @param links Specifies the URL path that allows direct navigation to the CIDR map.
         * 
         * @return builder
         * 
         */
        public Builder links(@Nullable List<GetGtmDomainCidrMapLink> links) {
            $.links = links;
            return this;
        }

        /**
         * @param links Specifies the URL path that allows direct navigation to the CIDR map.
         * 
         * @return builder
         * 
         */
        public Builder links(GetGtmDomainCidrMapLink... links) {
            return links(List.of(links));
        }

        /**
         * @param name Unique name for the CIDR map.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public GetGtmDomainCidrMap build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainCidrMap", "name");
            }
            return $;
        }
    }

}
