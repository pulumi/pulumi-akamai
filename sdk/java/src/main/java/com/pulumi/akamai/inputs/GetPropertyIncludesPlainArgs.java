// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetPropertyIncludesParentProperty;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyIncludesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPropertyIncludesPlainArgs Empty = new GetPropertyIncludesPlainArgs();

    /**
     * (Required) A contract&#39;s unique ID, including the optional `ctr_` prefix.
     * 
     */
    @Import(name="contractId", required=true)
    private String contractId;

    /**
     * @return (Required) A contract&#39;s unique ID, including the optional `ctr_` prefix.
     * 
     */
    public String contractId() {
        return this.contractId;
    }

    /**
     * (Required) A group&#39;s unique ID, including the optional `grp_` prefix.
     * 
     */
    @Import(name="groupId", required=true)
    private String groupId;

    /**
     * @return (Required) A group&#39;s unique ID, including the optional `grp_` prefix.
     * 
     */
    public String groupId() {
        return this.groupId;
    }

    /**
     * (Optional) The property that references the includes you want to list.
     * 
     */
    @Import(name="parentProperty")
    private @Nullable GetPropertyIncludesParentProperty parentProperty;

    /**
     * @return (Optional) The property that references the includes you want to list.
     * 
     */
    public Optional<GetPropertyIncludesParentProperty> parentProperty() {
        return Optional.ofNullable(this.parentProperty);
    }

    /**
     * (Optional) Specifies the type of the include, either `MICROSERVICES` or `COMMON_SETTINGS`. Use this field for filtering. `MICROSERVICES` allow different teams to work independently on different parts of a single site. `COMMON_SETTINGS` includes are useful for configurations that share a large number of settings, often managed by a central team.
     * 
     */
    @Import(name="type")
    private @Nullable String type;

    /**
     * @return (Optional) Specifies the type of the include, either `MICROSERVICES` or `COMMON_SETTINGS`. Use this field for filtering. `MICROSERVICES` allow different teams to work independently on different parts of a single site. `COMMON_SETTINGS` includes are useful for configurations that share a large number of settings, often managed by a central team.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    private GetPropertyIncludesPlainArgs() {}

    private GetPropertyIncludesPlainArgs(GetPropertyIncludesPlainArgs $) {
        this.contractId = $.contractId;
        this.groupId = $.groupId;
        this.parentProperty = $.parentProperty;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyIncludesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyIncludesPlainArgs $;

        public Builder() {
            $ = new GetPropertyIncludesPlainArgs();
        }

        public Builder(GetPropertyIncludesPlainArgs defaults) {
            $ = new GetPropertyIncludesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contractId (Required) A contract&#39;s unique ID, including the optional `ctr_` prefix.
         * 
         * @return builder
         * 
         */
        public Builder contractId(String contractId) {
            $.contractId = contractId;
            return this;
        }

        /**
         * @param groupId (Required) A group&#39;s unique ID, including the optional `grp_` prefix.
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param parentProperty (Optional) The property that references the includes you want to list.
         * 
         * @return builder
         * 
         */
        public Builder parentProperty(@Nullable GetPropertyIncludesParentProperty parentProperty) {
            $.parentProperty = parentProperty;
            return this;
        }

        /**
         * @param type (Optional) Specifies the type of the include, either `MICROSERVICES` or `COMMON_SETTINGS`. Use this field for filtering. `MICROSERVICES` allow different teams to work independently on different parts of a single site. `COMMON_SETTINGS` includes are useful for configurations that share a large number of settings, often managed by a central team.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        public GetPropertyIncludesPlainArgs build() {
            $.contractId = Objects.requireNonNull($.contractId, "expected parameter 'contractId' to be non-null");
            $.groupId = Objects.requireNonNull($.groupId, "expected parameter 'groupId' to be non-null");
            return $;
        }
    }

}
