// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.CpsDvValidationTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CpsDvValidationState extends com.pulumi.resources.ResourceArgs {

    public static final CpsDvValidationState Empty = new CpsDvValidationState();

    /**
     * The unique identifier of enrollment
     * 
     */
    @Import(name="enrollmentId")
    private @Nullable Output<Integer> enrollmentId;

    /**
     * @return The unique identifier of enrollment
     * 
     */
    public Optional<Output<Integer>> enrollmentId() {
        return Optional.ofNullable(this.enrollmentId);
    }

    /**
     * List of SANs
     * 
     */
    @Import(name="sans")
    private @Nullable Output<List<String>> sans;

    /**
     * @return List of SANs
     * 
     */
    public Optional<Output<List<String>>> sans() {
        return Optional.ofNullable(this.sans);
    }

    /**
     * Status of validation
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of validation
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Enables to set timeout for processing
     * 
     */
    @Import(name="timeouts")
    private @Nullable Output<CpsDvValidationTimeoutsArgs> timeouts;

    /**
     * @return Enables to set timeout for processing
     * 
     */
    public Optional<Output<CpsDvValidationTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private CpsDvValidationState() {}

    private CpsDvValidationState(CpsDvValidationState $) {
        this.enrollmentId = $.enrollmentId;
        this.sans = $.sans;
        this.status = $.status;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CpsDvValidationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CpsDvValidationState $;

        public Builder() {
            $ = new CpsDvValidationState();
        }

        public Builder(CpsDvValidationState defaults) {
            $ = new CpsDvValidationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param enrollmentId The unique identifier of enrollment
         * 
         * @return builder
         * 
         */
        public Builder enrollmentId(@Nullable Output<Integer> enrollmentId) {
            $.enrollmentId = enrollmentId;
            return this;
        }

        /**
         * @param enrollmentId The unique identifier of enrollment
         * 
         * @return builder
         * 
         */
        public Builder enrollmentId(Integer enrollmentId) {
            return enrollmentId(Output.of(enrollmentId));
        }

        /**
         * @param sans List of SANs
         * 
         * @return builder
         * 
         */
        public Builder sans(@Nullable Output<List<String>> sans) {
            $.sans = sans;
            return this;
        }

        /**
         * @param sans List of SANs
         * 
         * @return builder
         * 
         */
        public Builder sans(List<String> sans) {
            return sans(Output.of(sans));
        }

        /**
         * @param sans List of SANs
         * 
         * @return builder
         * 
         */
        public Builder sans(String... sans) {
            return sans(List.of(sans));
        }

        /**
         * @param status Status of validation
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of validation
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param timeouts Enables to set timeout for processing
         * 
         * @return builder
         * 
         */
        public Builder timeouts(@Nullable Output<CpsDvValidationTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        /**
         * @param timeouts Enables to set timeout for processing
         * 
         * @return builder
         * 
         */
        public Builder timeouts(CpsDvValidationTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public CpsDvValidationState build() {
            return $;
        }
    }

}
