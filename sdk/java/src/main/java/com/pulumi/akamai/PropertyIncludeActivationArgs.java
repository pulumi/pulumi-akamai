// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai;

import com.pulumi.akamai.inputs.PropertyIncludeActivationComplianceRecordArgs;
import com.pulumi.akamai.inputs.PropertyIncludeActivationTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PropertyIncludeActivationArgs extends com.pulumi.resources.ResourceArgs {

    public static final PropertyIncludeActivationArgs Empty = new PropertyIncludeActivationArgs();

    /**
     * Automatically acknowledge all rule warnings for activation and continue
     * 
     */
    @Import(name="autoAcknowledgeRuleWarnings")
    private @Nullable Output<Boolean> autoAcknowledgeRuleWarnings;

    /**
     * @return Automatically acknowledge all rule warnings for activation and continue
     * 
     */
    public Optional<Output<Boolean>> autoAcknowledgeRuleWarnings() {
        return Optional.ofNullable(this.autoAcknowledgeRuleWarnings);
    }

    /**
     * Provides an audit record when activating on a production network
     * 
     */
    @Import(name="complianceRecord")
    private @Nullable Output<PropertyIncludeActivationComplianceRecordArgs> complianceRecord;

    /**
     * @return Provides an audit record when activating on a production network
     * 
     */
    public Optional<Output<PropertyIncludeActivationComplianceRecordArgs>> complianceRecord() {
        return Optional.ofNullable(this.complianceRecord);
    }

    /**
     * The contract under which the include is activated
     * 
     */
    @Import(name="contractId", required=true)
    private Output<String> contractId;

    /**
     * @return The contract under which the include is activated
     * 
     */
    public Output<String> contractId() {
        return this.contractId;
    }

    /**
     * The group under which the include is activated
     * 
     */
    @Import(name="groupId", required=true)
    private Output<String> groupId;

    /**
     * @return The group under which the include is activated
     * 
     */
    public Output<String> groupId() {
        return this.groupId;
    }

    /**
     * The unique identifier of the include
     * 
     */
    @Import(name="includeId", required=true)
    private Output<String> includeId;

    /**
     * @return The unique identifier of the include
     * 
     */
    public Output<String> includeId() {
        return this.includeId;
    }

    /**
     * The network for which the activation will be performed
     * 
     */
    @Import(name="network", required=true)
    private Output<String> network;

    /**
     * @return The network for which the activation will be performed
     * 
     */
    public Output<String> network() {
        return this.network;
    }

    /**
     * The note to assign to a log message of the activation request
     * 
     */
    @Import(name="note")
    private @Nullable Output<String> note;

    /**
     * @return The note to assign to a log message of the activation request
     * 
     */
    public Optional<Output<String>> note() {
        return Optional.ofNullable(this.note);
    }

    /**
     * The list of email addresses to notify about an activation status
     * 
     */
    @Import(name="notifyEmails", required=true)
    private Output<List<String>> notifyEmails;

    /**
     * @return The list of email addresses to notify about an activation status
     * 
     */
    public Output<List<String>> notifyEmails() {
        return this.notifyEmails;
    }

    /**
     * Enables to set timeout for processing
     * 
     */
    @Import(name="timeouts")
    private @Nullable Output<PropertyIncludeActivationTimeoutsArgs> timeouts;

    /**
     * @return Enables to set timeout for processing
     * 
     */
    public Optional<Output<PropertyIncludeActivationTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * The unique identifier of the include
     * 
     */
    @Import(name="version", required=true)
    private Output<Integer> version;

    /**
     * @return The unique identifier of the include
     * 
     */
    public Output<Integer> version() {
        return this.version;
    }

    private PropertyIncludeActivationArgs() {}

    private PropertyIncludeActivationArgs(PropertyIncludeActivationArgs $) {
        this.autoAcknowledgeRuleWarnings = $.autoAcknowledgeRuleWarnings;
        this.complianceRecord = $.complianceRecord;
        this.contractId = $.contractId;
        this.groupId = $.groupId;
        this.includeId = $.includeId;
        this.network = $.network;
        this.note = $.note;
        this.notifyEmails = $.notifyEmails;
        this.timeouts = $.timeouts;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PropertyIncludeActivationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PropertyIncludeActivationArgs $;

        public Builder() {
            $ = new PropertyIncludeActivationArgs();
        }

        public Builder(PropertyIncludeActivationArgs defaults) {
            $ = new PropertyIncludeActivationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoAcknowledgeRuleWarnings Automatically acknowledge all rule warnings for activation and continue
         * 
         * @return builder
         * 
         */
        public Builder autoAcknowledgeRuleWarnings(@Nullable Output<Boolean> autoAcknowledgeRuleWarnings) {
            $.autoAcknowledgeRuleWarnings = autoAcknowledgeRuleWarnings;
            return this;
        }

        /**
         * @param autoAcknowledgeRuleWarnings Automatically acknowledge all rule warnings for activation and continue
         * 
         * @return builder
         * 
         */
        public Builder autoAcknowledgeRuleWarnings(Boolean autoAcknowledgeRuleWarnings) {
            return autoAcknowledgeRuleWarnings(Output.of(autoAcknowledgeRuleWarnings));
        }

        /**
         * @param complianceRecord Provides an audit record when activating on a production network
         * 
         * @return builder
         * 
         */
        public Builder complianceRecord(@Nullable Output<PropertyIncludeActivationComplianceRecordArgs> complianceRecord) {
            $.complianceRecord = complianceRecord;
            return this;
        }

        /**
         * @param complianceRecord Provides an audit record when activating on a production network
         * 
         * @return builder
         * 
         */
        public Builder complianceRecord(PropertyIncludeActivationComplianceRecordArgs complianceRecord) {
            return complianceRecord(Output.of(complianceRecord));
        }

        /**
         * @param contractId The contract under which the include is activated
         * 
         * @return builder
         * 
         */
        public Builder contractId(Output<String> contractId) {
            $.contractId = contractId;
            return this;
        }

        /**
         * @param contractId The contract under which the include is activated
         * 
         * @return builder
         * 
         */
        public Builder contractId(String contractId) {
            return contractId(Output.of(contractId));
        }

        /**
         * @param groupId The group under which the include is activated
         * 
         * @return builder
         * 
         */
        public Builder groupId(Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId The group under which the include is activated
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param includeId The unique identifier of the include
         * 
         * @return builder
         * 
         */
        public Builder includeId(Output<String> includeId) {
            $.includeId = includeId;
            return this;
        }

        /**
         * @param includeId The unique identifier of the include
         * 
         * @return builder
         * 
         */
        public Builder includeId(String includeId) {
            return includeId(Output.of(includeId));
        }

        /**
         * @param network The network for which the activation will be performed
         * 
         * @return builder
         * 
         */
        public Builder network(Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network The network for which the activation will be performed
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param note The note to assign to a log message of the activation request
         * 
         * @return builder
         * 
         */
        public Builder note(@Nullable Output<String> note) {
            $.note = note;
            return this;
        }

        /**
         * @param note The note to assign to a log message of the activation request
         * 
         * @return builder
         * 
         */
        public Builder note(String note) {
            return note(Output.of(note));
        }

        /**
         * @param notifyEmails The list of email addresses to notify about an activation status
         * 
         * @return builder
         * 
         */
        public Builder notifyEmails(Output<List<String>> notifyEmails) {
            $.notifyEmails = notifyEmails;
            return this;
        }

        /**
         * @param notifyEmails The list of email addresses to notify about an activation status
         * 
         * @return builder
         * 
         */
        public Builder notifyEmails(List<String> notifyEmails) {
            return notifyEmails(Output.of(notifyEmails));
        }

        /**
         * @param notifyEmails The list of email addresses to notify about an activation status
         * 
         * @return builder
         * 
         */
        public Builder notifyEmails(String... notifyEmails) {
            return notifyEmails(List.of(notifyEmails));
        }

        /**
         * @param timeouts Enables to set timeout for processing
         * 
         * @return builder
         * 
         */
        public Builder timeouts(@Nullable Output<PropertyIncludeActivationTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        /**
         * @param timeouts Enables to set timeout for processing
         * 
         * @return builder
         * 
         */
        public Builder timeouts(PropertyIncludeActivationTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param version The unique identifier of the include
         * 
         * @return builder
         * 
         */
        public Builder version(Output<Integer> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The unique identifier of the include
         * 
         * @return builder
         * 
         */
        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        public PropertyIncludeActivationArgs build() {
            $.contractId = Objects.requireNonNull($.contractId, "expected parameter 'contractId' to be non-null");
            $.groupId = Objects.requireNonNull($.groupId, "expected parameter 'groupId' to be non-null");
            $.includeId = Objects.requireNonNull($.includeId, "expected parameter 'includeId' to be non-null");
            $.network = Objects.requireNonNull($.network, "expected parameter 'network' to be non-null");
            $.notifyEmails = Objects.requireNonNull($.notifyEmails, "expected parameter 'notifyEmails' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
