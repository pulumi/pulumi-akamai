// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyRulesBuilderRulesV20250218BehaviorPermissionsPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetPropertyRulesBuilderRulesV20250218BehaviorPermissionsPolicyArgs Empty = new GetPropertyRulesBuilderRulesV20250218BehaviorPermissionsPolicyArgs();

    /**
     * The features you&#39;ve set in `permissionsPolicyDirective` are enabled for domains you specify here. They&#39;ll remain disabled for all other domains. Separate multiple domains with a single space. To block the specified directives from all domains, set this to `none`. This generates an empty value in the `Permissions-Policy` header.
     * 
     */
    @Import(name="allowList")
    private @Nullable Output<String> allowList;

    /**
     * @return The features you&#39;ve set in `permissionsPolicyDirective` are enabled for domains you specify here. They&#39;ll remain disabled for all other domains. Separate multiple domains with a single space. To block the specified directives from all domains, set this to `none`. This generates an empty value in the `Permissions-Policy` header.
     * 
     */
    public Optional<Output<String>> allowList() {
        return Optional.ofNullable(this.allowList);
    }

    /**
     * Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    @Import(name="locked")
    private @Nullable Output<Boolean> locked;

    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Output<Boolean>> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * Each directive represents a browser feature. Specify the ones you want enabled in a client browser that accesses your content. You can add custom entries or provide pre-set values from the list. For more details on each value, see the `guide section` for this behavior.
     * 
     */
    @Import(name="permissionsPolicyDirectives")
    private @Nullable Output<List<String>> permissionsPolicyDirectives;

    /**
     * @return Each directive represents a browser feature. Specify the ones you want enabled in a client browser that accesses your content. You can add custom entries or provide pre-set values from the list. For more details on each value, see the `guide section` for this behavior.
     * 
     */
    public Optional<Output<List<String>>> permissionsPolicyDirectives() {
        return Optional.ofNullable(this.permissionsPolicyDirectives);
    }

    /**
     * This option is for internal usage only.
     * 
     */
    @Import(name="templateUuid")
    private @Nullable Output<String> templateUuid;

    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<Output<String>> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }

    /**
     * A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private GetPropertyRulesBuilderRulesV20250218BehaviorPermissionsPolicyArgs() {}

    private GetPropertyRulesBuilderRulesV20250218BehaviorPermissionsPolicyArgs(GetPropertyRulesBuilderRulesV20250218BehaviorPermissionsPolicyArgs $) {
        this.allowList = $.allowList;
        this.locked = $.locked;
        this.permissionsPolicyDirectives = $.permissionsPolicyDirectives;
        this.templateUuid = $.templateUuid;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesBuilderRulesV20250218BehaviorPermissionsPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesBuilderRulesV20250218BehaviorPermissionsPolicyArgs $;

        public Builder() {
            $ = new GetPropertyRulesBuilderRulesV20250218BehaviorPermissionsPolicyArgs();
        }

        public Builder(GetPropertyRulesBuilderRulesV20250218BehaviorPermissionsPolicyArgs defaults) {
            $ = new GetPropertyRulesBuilderRulesV20250218BehaviorPermissionsPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowList The features you&#39;ve set in `permissionsPolicyDirective` are enabled for domains you specify here. They&#39;ll remain disabled for all other domains. Separate multiple domains with a single space. To block the specified directives from all domains, set this to `none`. This generates an empty value in the `Permissions-Policy` header.
         * 
         * @return builder
         * 
         */
        public Builder allowList(@Nullable Output<String> allowList) {
            $.allowList = allowList;
            return this;
        }

        /**
         * @param allowList The features you&#39;ve set in `permissionsPolicyDirective` are enabled for domains you specify here. They&#39;ll remain disabled for all other domains. Separate multiple domains with a single space. To block the specified directives from all domains, set this to `none`. This generates an empty value in the `Permissions-Policy` header.
         * 
         * @return builder
         * 
         */
        public Builder allowList(String allowList) {
            return allowList(Output.of(allowList));
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(@Nullable Output<Boolean> locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(Boolean locked) {
            return locked(Output.of(locked));
        }

        /**
         * @param permissionsPolicyDirectives Each directive represents a browser feature. Specify the ones you want enabled in a client browser that accesses your content. You can add custom entries or provide pre-set values from the list. For more details on each value, see the `guide section` for this behavior.
         * 
         * @return builder
         * 
         */
        public Builder permissionsPolicyDirectives(@Nullable Output<List<String>> permissionsPolicyDirectives) {
            $.permissionsPolicyDirectives = permissionsPolicyDirectives;
            return this;
        }

        /**
         * @param permissionsPolicyDirectives Each directive represents a browser feature. Specify the ones you want enabled in a client browser that accesses your content. You can add custom entries or provide pre-set values from the list. For more details on each value, see the `guide section` for this behavior.
         * 
         * @return builder
         * 
         */
        public Builder permissionsPolicyDirectives(List<String> permissionsPolicyDirectives) {
            return permissionsPolicyDirectives(Output.of(permissionsPolicyDirectives));
        }

        /**
         * @param permissionsPolicyDirectives Each directive represents a browser feature. Specify the ones you want enabled in a client browser that accesses your content. You can add custom entries or provide pre-set values from the list. For more details on each value, see the `guide section` for this behavior.
         * 
         * @return builder
         * 
         */
        public Builder permissionsPolicyDirectives(String... permissionsPolicyDirectives) {
            return permissionsPolicyDirectives(List.of(permissionsPolicyDirectives));
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(@Nullable Output<String> templateUuid) {
            $.templateUuid = templateUuid;
            return this;
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(String templateUuid) {
            return templateUuid(Output.of(templateUuid));
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public GetPropertyRulesBuilderRulesV20250218BehaviorPermissionsPolicyArgs build() {
            return $;
        }
    }

}
