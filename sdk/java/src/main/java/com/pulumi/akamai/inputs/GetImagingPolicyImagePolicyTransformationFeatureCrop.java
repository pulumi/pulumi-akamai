// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationFeatureCrop extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyTransformationFeatureCrop Empty = new GetImagingPolicyImagePolicyTransformationFeatureCrop();

    /**
     * Controls placement of the crop if Image and Video Manager does not detect any features in the image. Directions are relative to the edges of the image being transformed.
     * 
     */
    @Import(name="failGravity")
    private @Nullable String failGravity;

    /**
     * @return Controls placement of the crop if Image and Video Manager does not detect any features in the image. Directions are relative to the edges of the image being transformed.
     * 
     */
    public Optional<String> failGravity() {
        return Optional.ofNullable(this.failGravity);
    }

    /**
     * Controls placement of the crop if Image and Video Manager does not detect any features in the image. Directions are relative to the edges of the image being transformed.
     * 
     */
    @Import(name="failGravityVar")
    private @Nullable String failGravityVar;

    /**
     * @return Controls placement of the crop if Image and Video Manager does not detect any features in the image. Directions are relative to the edges of the image being transformed.
     * 
     */
    public Optional<String> failGravityVar() {
        return Optional.ofNullable(this.failGravityVar);
    }

    /**
     * The size in pixels of the important features to search for. If identified, two features never appear closer together than this value, `8.0` by default.
     * 
     */
    @Import(name="featureRadius")
    private @Nullable String featureRadius;

    /**
     * @return The size in pixels of the important features to search for. If identified, two features never appear closer together than this value, `8.0` by default.
     * 
     */
    public Optional<String> featureRadius() {
        return Optional.ofNullable(this.featureRadius);
    }

    /**
     * The size in pixels of the important features to search for. If identified, two features never appear closer together than this value, `8.0` by default.
     * 
     */
    @Import(name="featureRadiusVar")
    private @Nullable String featureRadiusVar;

    /**
     * @return The size in pixels of the important features to search for. If identified, two features never appear closer together than this value, `8.0` by default.
     * 
     */
    public Optional<String> featureRadiusVar() {
        return Optional.ofNullable(this.featureRadiusVar);
    }

    /**
     * Controls placement of the crop. Directions are relative to the region of interest plus padding.
     * 
     */
    @Import(name="gravity")
    private @Nullable String gravity;

    /**
     * @return Controls placement of the crop. Directions are relative to the region of interest plus padding.
     * 
     */
    public Optional<String> gravity() {
        return Optional.ofNullable(this.gravity);
    }

    /**
     * Controls placement of the crop. Directions are relative to the region of interest plus padding.
     * 
     */
    @Import(name="gravityVar")
    private @Nullable String gravityVar;

    /**
     * @return Controls placement of the crop. Directions are relative to the region of interest plus padding.
     * 
     */
    public Optional<String> gravityVar() {
        return Optional.ofNullable(this.gravityVar);
    }

    /**
     * The height in pixels of the output image relative to the specified `style` value.
     * 
     */
    @Import(name="height")
    private @Nullable String height;

    /**
     * @return The height in pixels of the output image relative to the specified `style` value.
     * 
     */
    public Optional<String> height() {
        return Optional.ofNullable(this.height);
    }

    /**
     * The height in pixels of the output image relative to the specified `style` value.
     * 
     */
    @Import(name="heightVar")
    private @Nullable String heightVar;

    /**
     * @return The height in pixels of the output image relative to the specified `style` value.
     * 
     */
    public Optional<String> heightVar() {
        return Optional.ofNullable(this.heightVar);
    }

    /**
     * The maximum number of features to identify as important features, `32` by default. The strongest features are always chosen.
     * 
     */
    @Import(name="maxFeatures")
    private @Nullable String maxFeatures;

    /**
     * @return The maximum number of features to identify as important features, `32` by default. The strongest features are always chosen.
     * 
     */
    public Optional<String> maxFeatures() {
        return Optional.ofNullable(this.maxFeatures);
    }

    /**
     * The maximum number of features to identify as important features, `32` by default. The strongest features are always chosen.
     * 
     */
    @Import(name="maxFeaturesVar")
    private @Nullable String maxFeaturesVar;

    /**
     * @return The maximum number of features to identify as important features, `32` by default. The strongest features are always chosen.
     * 
     */
    public Optional<String> maxFeaturesVar() {
        return Optional.ofNullable(this.maxFeaturesVar);
    }

    /**
     * Determines the minimum quality level of the feature identified. To consider a feature important, the feature needs to surpass this value.  Image and Video Manager measures quality on a scale from `0` for the lowest quality to `1` for the highest quality, `.1` by default.
     * 
     */
    @Import(name="minFeatureQuality")
    private @Nullable String minFeatureQuality;

    /**
     * @return Determines the minimum quality level of the feature identified. To consider a feature important, the feature needs to surpass this value.  Image and Video Manager measures quality on a scale from `0` for the lowest quality to `1` for the highest quality, `.1` by default.
     * 
     */
    public Optional<String> minFeatureQuality() {
        return Optional.ofNullable(this.minFeatureQuality);
    }

    /**
     * Determines the minimum quality level of the feature identified. To consider a feature important, the feature needs to surpass this value.  Image and Video Manager measures quality on a scale from `0` for the lowest quality to `1` for the highest quality, `.1` by default.
     * 
     */
    @Import(name="minFeatureQualityVar")
    private @Nullable String minFeatureQualityVar;

    /**
     * @return Determines the minimum quality level of the feature identified. To consider a feature important, the feature needs to surpass this value.  Image and Video Manager measures quality on a scale from `0` for the lowest quality to `1` for the highest quality, `.1` by default.
     * 
     */
    public Optional<String> minFeatureQualityVar() {
        return Optional.ofNullable(this.minFeatureQualityVar);
    }

    /**
     * Adds space around the region of interest. The amount of padding added is directly related to the size of the bounding box of the selected features. Specifically, the region of interest is expanded in all directions by the largest dimension of the bounding box of the selected features multiplied by this value.
     * 
     */
    @Import(name="padding")
    private @Nullable String padding;

    /**
     * @return Adds space around the region of interest. The amount of padding added is directly related to the size of the bounding box of the selected features. Specifically, the region of interest is expanded in all directions by the largest dimension of the bounding box of the selected features multiplied by this value.
     * 
     */
    public Optional<String> padding() {
        return Optional.ofNullable(this.padding);
    }

    /**
     * Adds space around the region of interest. The amount of padding added is directly related to the size of the bounding box of the selected features. Specifically, the region of interest is expanded in all directions by the largest dimension of the bounding box of the selected features multiplied by this value.
     * 
     */
    @Import(name="paddingVar")
    private @Nullable String paddingVar;

    /**
     * @return Adds space around the region of interest. The amount of padding added is directly related to the size of the bounding box of the selected features. Specifically, the region of interest is expanded in all directions by the largest dimension of the bounding box of the selected features multiplied by this value.
     * 
     */
    public Optional<String> paddingVar() {
        return Optional.ofNullable(this.paddingVar);
    }

    /**
     * Specifies how to crop or scale a crop area for the features identified in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` performs a raw crop around the features, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and features as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the features, relative to the specified `width` and `height` values. Allows Variable substitution.
     * 
     */
    @Import(name="style")
    private @Nullable String style;

    /**
     * @return Specifies how to crop or scale a crop area for the features identified in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` performs a raw crop around the features, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and features as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the features, relative to the specified `width` and `height` values. Allows Variable substitution.
     * 
     */
    public Optional<String> style() {
        return Optional.ofNullable(this.style);
    }

    /**
     * Specifies how to crop or scale a crop area for the features identified in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` performs a raw crop around the features, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and features as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the features, relative to the specified `width` and `height` values. Allows Variable substitution.
     * 
     */
    @Import(name="styleVar")
    private @Nullable String styleVar;

    /**
     * @return Specifies how to crop or scale a crop area for the features identified in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` performs a raw crop around the features, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and features as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the features, relative to the specified `width` and `height` values. Allows Variable substitution.
     * 
     */
    public Optional<String> styleVar() {
        return Optional.ofNullable(this.styleVar);
    }

    /**
     * The width in pixels of the output image relative to the specified `style` value.
     * 
     */
    @Import(name="width")
    private @Nullable String width;

    /**
     * @return The width in pixels of the output image relative to the specified `style` value.
     * 
     */
    public Optional<String> width() {
        return Optional.ofNullable(this.width);
    }

    /**
     * The width in pixels of the output image relative to the specified `style` value.
     * 
     */
    @Import(name="widthVar")
    private @Nullable String widthVar;

    /**
     * @return The width in pixels of the output image relative to the specified `style` value.
     * 
     */
    public Optional<String> widthVar() {
        return Optional.ofNullable(this.widthVar);
    }

    private GetImagingPolicyImagePolicyTransformationFeatureCrop() {}

    private GetImagingPolicyImagePolicyTransformationFeatureCrop(GetImagingPolicyImagePolicyTransformationFeatureCrop $) {
        this.failGravity = $.failGravity;
        this.failGravityVar = $.failGravityVar;
        this.featureRadius = $.featureRadius;
        this.featureRadiusVar = $.featureRadiusVar;
        this.gravity = $.gravity;
        this.gravityVar = $.gravityVar;
        this.height = $.height;
        this.heightVar = $.heightVar;
        this.maxFeatures = $.maxFeatures;
        this.maxFeaturesVar = $.maxFeaturesVar;
        this.minFeatureQuality = $.minFeatureQuality;
        this.minFeatureQualityVar = $.minFeatureQualityVar;
        this.padding = $.padding;
        this.paddingVar = $.paddingVar;
        this.style = $.style;
        this.styleVar = $.styleVar;
        this.width = $.width;
        this.widthVar = $.widthVar;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationFeatureCrop defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationFeatureCrop $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationFeatureCrop();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationFeatureCrop defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationFeatureCrop(Objects.requireNonNull(defaults));
        }

        /**
         * @param failGravity Controls placement of the crop if Image and Video Manager does not detect any features in the image. Directions are relative to the edges of the image being transformed.
         * 
         * @return builder
         * 
         */
        public Builder failGravity(@Nullable String failGravity) {
            $.failGravity = failGravity;
            return this;
        }

        /**
         * @param failGravityVar Controls placement of the crop if Image and Video Manager does not detect any features in the image. Directions are relative to the edges of the image being transformed.
         * 
         * @return builder
         * 
         */
        public Builder failGravityVar(@Nullable String failGravityVar) {
            $.failGravityVar = failGravityVar;
            return this;
        }

        /**
         * @param featureRadius The size in pixels of the important features to search for. If identified, two features never appear closer together than this value, `8.0` by default.
         * 
         * @return builder
         * 
         */
        public Builder featureRadius(@Nullable String featureRadius) {
            $.featureRadius = featureRadius;
            return this;
        }

        /**
         * @param featureRadiusVar The size in pixels of the important features to search for. If identified, two features never appear closer together than this value, `8.0` by default.
         * 
         * @return builder
         * 
         */
        public Builder featureRadiusVar(@Nullable String featureRadiusVar) {
            $.featureRadiusVar = featureRadiusVar;
            return this;
        }

        /**
         * @param gravity Controls placement of the crop. Directions are relative to the region of interest plus padding.
         * 
         * @return builder
         * 
         */
        public Builder gravity(@Nullable String gravity) {
            $.gravity = gravity;
            return this;
        }

        /**
         * @param gravityVar Controls placement of the crop. Directions are relative to the region of interest plus padding.
         * 
         * @return builder
         * 
         */
        public Builder gravityVar(@Nullable String gravityVar) {
            $.gravityVar = gravityVar;
            return this;
        }

        /**
         * @param height The height in pixels of the output image relative to the specified `style` value.
         * 
         * @return builder
         * 
         */
        public Builder height(@Nullable String height) {
            $.height = height;
            return this;
        }

        /**
         * @param heightVar The height in pixels of the output image relative to the specified `style` value.
         * 
         * @return builder
         * 
         */
        public Builder heightVar(@Nullable String heightVar) {
            $.heightVar = heightVar;
            return this;
        }

        /**
         * @param maxFeatures The maximum number of features to identify as important features, `32` by default. The strongest features are always chosen.
         * 
         * @return builder
         * 
         */
        public Builder maxFeatures(@Nullable String maxFeatures) {
            $.maxFeatures = maxFeatures;
            return this;
        }

        /**
         * @param maxFeaturesVar The maximum number of features to identify as important features, `32` by default. The strongest features are always chosen.
         * 
         * @return builder
         * 
         */
        public Builder maxFeaturesVar(@Nullable String maxFeaturesVar) {
            $.maxFeaturesVar = maxFeaturesVar;
            return this;
        }

        /**
         * @param minFeatureQuality Determines the minimum quality level of the feature identified. To consider a feature important, the feature needs to surpass this value.  Image and Video Manager measures quality on a scale from `0` for the lowest quality to `1` for the highest quality, `.1` by default.
         * 
         * @return builder
         * 
         */
        public Builder minFeatureQuality(@Nullable String minFeatureQuality) {
            $.minFeatureQuality = minFeatureQuality;
            return this;
        }

        /**
         * @param minFeatureQualityVar Determines the minimum quality level of the feature identified. To consider a feature important, the feature needs to surpass this value.  Image and Video Manager measures quality on a scale from `0` for the lowest quality to `1` for the highest quality, `.1` by default.
         * 
         * @return builder
         * 
         */
        public Builder minFeatureQualityVar(@Nullable String minFeatureQualityVar) {
            $.minFeatureQualityVar = minFeatureQualityVar;
            return this;
        }

        /**
         * @param padding Adds space around the region of interest. The amount of padding added is directly related to the size of the bounding box of the selected features. Specifically, the region of interest is expanded in all directions by the largest dimension of the bounding box of the selected features multiplied by this value.
         * 
         * @return builder
         * 
         */
        public Builder padding(@Nullable String padding) {
            $.padding = padding;
            return this;
        }

        /**
         * @param paddingVar Adds space around the region of interest. The amount of padding added is directly related to the size of the bounding box of the selected features. Specifically, the region of interest is expanded in all directions by the largest dimension of the bounding box of the selected features multiplied by this value.
         * 
         * @return builder
         * 
         */
        public Builder paddingVar(@Nullable String paddingVar) {
            $.paddingVar = paddingVar;
            return this;
        }

        /**
         * @param style Specifies how to crop or scale a crop area for the features identified in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` performs a raw crop around the features, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and features as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the features, relative to the specified `width` and `height` values. Allows Variable substitution.
         * 
         * @return builder
         * 
         */
        public Builder style(@Nullable String style) {
            $.style = style;
            return this;
        }

        /**
         * @param styleVar Specifies how to crop or scale a crop area for the features identified in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` performs a raw crop around the features, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and features as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the features, relative to the specified `width` and `height` values. Allows Variable substitution.
         * 
         * @return builder
         * 
         */
        public Builder styleVar(@Nullable String styleVar) {
            $.styleVar = styleVar;
            return this;
        }

        /**
         * @param width The width in pixels of the output image relative to the specified `style` value.
         * 
         * @return builder
         * 
         */
        public Builder width(@Nullable String width) {
            $.width = width;
            return this;
        }

        /**
         * @param widthVar The width in pixels of the output image relative to the specified `style` value.
         * 
         * @return builder
         * 
         */
        public Builder widthVar(@Nullable String widthVar) {
            $.widthVar = widthVar;
            return this;
        }

        public GetImagingPolicyImagePolicyTransformationFeatureCrop build() {
            return $;
        }
    }

}
