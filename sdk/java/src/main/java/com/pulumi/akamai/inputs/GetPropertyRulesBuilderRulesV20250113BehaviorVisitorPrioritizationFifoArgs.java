// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyRulesBuilderRulesV20250113BehaviorVisitorPrioritizationFifoArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetPropertyRulesBuilderRulesV20250113BehaviorVisitorPrioritizationFifoArgs Empty = new GetPropertyRulesBuilderRulesV20250113BehaviorVisitorPrioritizationFifoArgs();

    /**
     * This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    @Import(name="accessTitle")
    private @Nullable Output<String> accessTitle;

    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<Output<String>> accessTitle() {
        return Optional.ofNullable(this.accessTitle);
    }

    /**
     * This identifies the Visitor Prioritization FIFO shared policy to use with this behavior. You can list available shared policies with the `Cloudlets API`.
     * 
     */
    @Import(name="cloudletSharedPolicy")
    private @Nullable Output<Integer> cloudletSharedPolicy;

    /**
     * @return This identifies the Visitor Prioritization FIFO shared policy to use with this behavior. You can list available shared policies with the `Cloudlets API`.
     * 
     */
    public Optional<Output<Integer>> cloudletSharedPolicy() {
        return Optional.ofNullable(this.cloudletSharedPolicy);
    }

    /**
     * This specifies a domain for all session cookies. In case you configure many property hostnames, this may be their common domain. Make sure the user agent accepts the custom domain for any request matching the `visitorPrioritizationFifo` behavior. Don&#39;t use top level domains (TLDs).
     * 
     */
    @Import(name="customCookieDomain")
    private @Nullable Output<String> customCookieDomain;

    /**
     * @return This specifies a domain for all session cookies. In case you configure many property hostnames, this may be their common domain. Make sure the user agent accepts the custom domain for any request matching the `visitorPrioritizationFifo` behavior. Don&#39;t use top level domains (TLDs).
     * 
     */
    public Optional<Output<String>> customCookieDomain() {
        return Optional.ofNullable(this.customCookieDomain);
    }

    /**
     * This specifies how to set the domain used to establish a session with the visitor.
     * 
     */
    @Import(name="domainConfig")
    private @Nullable Output<String> domainConfig;

    /**
     * @return This specifies how to set the domain used to establish a session with the visitor.
     * 
     */
    public Optional<Output<String>> domainConfig() {
        return Optional.ofNullable(this.domainConfig);
    }

    /**
     * Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    @Import(name="locked")
    private @Nullable Output<Boolean> locked;

    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Output<Boolean>> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * Whether the queue session should prolong automatically when the `sessionDuration` expires  and the visitor remains active.
     * 
     */
    @Import(name="sessionAutoProlong")
    private @Nullable Output<Boolean> sessionAutoProlong;

    /**
     * @return Whether the queue session should prolong automatically when the `sessionDuration` expires  and the visitor remains active.
     * 
     */
    public Optional<Output<Boolean>> sessionAutoProlong() {
        return Optional.ofNullable(this.sessionAutoProlong);
    }

    /**
     * Specifies the number of seconds users remain in the waiting room queue.
     * 
     */
    @Import(name="sessionDuration")
    private @Nullable Output<Integer> sessionDuration;

    /**
     * @return Specifies the number of seconds users remain in the waiting room queue.
     * 
     */
    public Optional<Output<Integer>> sessionDuration() {
        return Optional.ofNullable(this.sessionDuration);
    }

    /**
     * This option is for internal usage only.
     * 
     */
    @Import(name="templateUuid")
    private @Nullable Output<String> templateUuid;

    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<Output<String>> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }

    /**
     * A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    /**
     * This specifies the base paths to static resources such as `JavaScript`, `CSS`, or image files for the `Waiting Room Main Page` requests. The option supports the `*` wildcard wildcard that matches zero or more characters. Requests matching any of these paths aren&#39;t blocked, but marked as Waiting Room Assets and passed through to the origin. See the `visitorPrioritizationRequest` match criteria to further customize these requests.
     * 
     */
    @Import(name="waitingRoomAssetsPaths")
    private @Nullable Output<List<String>> waitingRoomAssetsPaths;

    /**
     * @return This specifies the base paths to static resources such as `JavaScript`, `CSS`, or image files for the `Waiting Room Main Page` requests. The option supports the `*` wildcard wildcard that matches zero or more characters. Requests matching any of these paths aren&#39;t blocked, but marked as Waiting Room Assets and passed through to the origin. See the `visitorPrioritizationRequest` match criteria to further customize these requests.
     * 
     */
    public Optional<Output<List<String>>> waitingRoomAssetsPaths() {
        return Optional.ofNullable(this.waitingRoomAssetsPaths);
    }

    /**
     * This specifies the path to the waiting room main page on the origin server, for example `/vp/waiting-room.html`. When the request is marked as `Waiting Room Main Page` and blocked, the visitor enters the waiting room. The behavior sets the outgoing request path to the `waitingRoomPath` and modifies the cache key accordingly. See the `visitorPrioritizationRequest` match criteria to further customize these requests.
     * 
     */
    @Import(name="waitingRoomPath")
    private @Nullable Output<String> waitingRoomPath;

    /**
     * @return This specifies the path to the waiting room main page on the origin server, for example `/vp/waiting-room.html`. When the request is marked as `Waiting Room Main Page` and blocked, the visitor enters the waiting room. The behavior sets the outgoing request path to the `waitingRoomPath` and modifies the cache key accordingly. See the `visitorPrioritizationRequest` match criteria to further customize these requests.
     * 
     */
    public Optional<Output<String>> waitingRoomPath() {
        return Optional.ofNullable(this.waitingRoomPath);
    }

    /**
     * This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    @Import(name="waitingRoomTitle")
    private @Nullable Output<String> waitingRoomTitle;

    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<Output<String>> waitingRoomTitle() {
        return Optional.ofNullable(this.waitingRoomTitle);
    }

    private GetPropertyRulesBuilderRulesV20250113BehaviorVisitorPrioritizationFifoArgs() {}

    private GetPropertyRulesBuilderRulesV20250113BehaviorVisitorPrioritizationFifoArgs(GetPropertyRulesBuilderRulesV20250113BehaviorVisitorPrioritizationFifoArgs $) {
        this.accessTitle = $.accessTitle;
        this.cloudletSharedPolicy = $.cloudletSharedPolicy;
        this.customCookieDomain = $.customCookieDomain;
        this.domainConfig = $.domainConfig;
        this.locked = $.locked;
        this.sessionAutoProlong = $.sessionAutoProlong;
        this.sessionDuration = $.sessionDuration;
        this.templateUuid = $.templateUuid;
        this.uuid = $.uuid;
        this.waitingRoomAssetsPaths = $.waitingRoomAssetsPaths;
        this.waitingRoomPath = $.waitingRoomPath;
        this.waitingRoomTitle = $.waitingRoomTitle;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesBuilderRulesV20250113BehaviorVisitorPrioritizationFifoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesBuilderRulesV20250113BehaviorVisitorPrioritizationFifoArgs $;

        public Builder() {
            $ = new GetPropertyRulesBuilderRulesV20250113BehaviorVisitorPrioritizationFifoArgs();
        }

        public Builder(GetPropertyRulesBuilderRulesV20250113BehaviorVisitorPrioritizationFifoArgs defaults) {
            $ = new GetPropertyRulesBuilderRulesV20250113BehaviorVisitorPrioritizationFifoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessTitle This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder accessTitle(@Nullable Output<String> accessTitle) {
            $.accessTitle = accessTitle;
            return this;
        }

        /**
         * @param accessTitle This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder accessTitle(String accessTitle) {
            return accessTitle(Output.of(accessTitle));
        }

        /**
         * @param cloudletSharedPolicy This identifies the Visitor Prioritization FIFO shared policy to use with this behavior. You can list available shared policies with the `Cloudlets API`.
         * 
         * @return builder
         * 
         */
        public Builder cloudletSharedPolicy(@Nullable Output<Integer> cloudletSharedPolicy) {
            $.cloudletSharedPolicy = cloudletSharedPolicy;
            return this;
        }

        /**
         * @param cloudletSharedPolicy This identifies the Visitor Prioritization FIFO shared policy to use with this behavior. You can list available shared policies with the `Cloudlets API`.
         * 
         * @return builder
         * 
         */
        public Builder cloudletSharedPolicy(Integer cloudletSharedPolicy) {
            return cloudletSharedPolicy(Output.of(cloudletSharedPolicy));
        }

        /**
         * @param customCookieDomain This specifies a domain for all session cookies. In case you configure many property hostnames, this may be their common domain. Make sure the user agent accepts the custom domain for any request matching the `visitorPrioritizationFifo` behavior. Don&#39;t use top level domains (TLDs).
         * 
         * @return builder
         * 
         */
        public Builder customCookieDomain(@Nullable Output<String> customCookieDomain) {
            $.customCookieDomain = customCookieDomain;
            return this;
        }

        /**
         * @param customCookieDomain This specifies a domain for all session cookies. In case you configure many property hostnames, this may be their common domain. Make sure the user agent accepts the custom domain for any request matching the `visitorPrioritizationFifo` behavior. Don&#39;t use top level domains (TLDs).
         * 
         * @return builder
         * 
         */
        public Builder customCookieDomain(String customCookieDomain) {
            return customCookieDomain(Output.of(customCookieDomain));
        }

        /**
         * @param domainConfig This specifies how to set the domain used to establish a session with the visitor.
         * 
         * @return builder
         * 
         */
        public Builder domainConfig(@Nullable Output<String> domainConfig) {
            $.domainConfig = domainConfig;
            return this;
        }

        /**
         * @param domainConfig This specifies how to set the domain used to establish a session with the visitor.
         * 
         * @return builder
         * 
         */
        public Builder domainConfig(String domainConfig) {
            return domainConfig(Output.of(domainConfig));
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(@Nullable Output<Boolean> locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(Boolean locked) {
            return locked(Output.of(locked));
        }

        /**
         * @param sessionAutoProlong Whether the queue session should prolong automatically when the `sessionDuration` expires  and the visitor remains active.
         * 
         * @return builder
         * 
         */
        public Builder sessionAutoProlong(@Nullable Output<Boolean> sessionAutoProlong) {
            $.sessionAutoProlong = sessionAutoProlong;
            return this;
        }

        /**
         * @param sessionAutoProlong Whether the queue session should prolong automatically when the `sessionDuration` expires  and the visitor remains active.
         * 
         * @return builder
         * 
         */
        public Builder sessionAutoProlong(Boolean sessionAutoProlong) {
            return sessionAutoProlong(Output.of(sessionAutoProlong));
        }

        /**
         * @param sessionDuration Specifies the number of seconds users remain in the waiting room queue.
         * 
         * @return builder
         * 
         */
        public Builder sessionDuration(@Nullable Output<Integer> sessionDuration) {
            $.sessionDuration = sessionDuration;
            return this;
        }

        /**
         * @param sessionDuration Specifies the number of seconds users remain in the waiting room queue.
         * 
         * @return builder
         * 
         */
        public Builder sessionDuration(Integer sessionDuration) {
            return sessionDuration(Output.of(sessionDuration));
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(@Nullable Output<String> templateUuid) {
            $.templateUuid = templateUuid;
            return this;
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(String templateUuid) {
            return templateUuid(Output.of(templateUuid));
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        /**
         * @param waitingRoomAssetsPaths This specifies the base paths to static resources such as `JavaScript`, `CSS`, or image files for the `Waiting Room Main Page` requests. The option supports the `*` wildcard wildcard that matches zero or more characters. Requests matching any of these paths aren&#39;t blocked, but marked as Waiting Room Assets and passed through to the origin. See the `visitorPrioritizationRequest` match criteria to further customize these requests.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomAssetsPaths(@Nullable Output<List<String>> waitingRoomAssetsPaths) {
            $.waitingRoomAssetsPaths = waitingRoomAssetsPaths;
            return this;
        }

        /**
         * @param waitingRoomAssetsPaths This specifies the base paths to static resources such as `JavaScript`, `CSS`, or image files for the `Waiting Room Main Page` requests. The option supports the `*` wildcard wildcard that matches zero or more characters. Requests matching any of these paths aren&#39;t blocked, but marked as Waiting Room Assets and passed through to the origin. See the `visitorPrioritizationRequest` match criteria to further customize these requests.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomAssetsPaths(List<String> waitingRoomAssetsPaths) {
            return waitingRoomAssetsPaths(Output.of(waitingRoomAssetsPaths));
        }

        /**
         * @param waitingRoomAssetsPaths This specifies the base paths to static resources such as `JavaScript`, `CSS`, or image files for the `Waiting Room Main Page` requests. The option supports the `*` wildcard wildcard that matches zero or more characters. Requests matching any of these paths aren&#39;t blocked, but marked as Waiting Room Assets and passed through to the origin. See the `visitorPrioritizationRequest` match criteria to further customize these requests.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomAssetsPaths(String... waitingRoomAssetsPaths) {
            return waitingRoomAssetsPaths(List.of(waitingRoomAssetsPaths));
        }

        /**
         * @param waitingRoomPath This specifies the path to the waiting room main page on the origin server, for example `/vp/waiting-room.html`. When the request is marked as `Waiting Room Main Page` and blocked, the visitor enters the waiting room. The behavior sets the outgoing request path to the `waitingRoomPath` and modifies the cache key accordingly. See the `visitorPrioritizationRequest` match criteria to further customize these requests.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomPath(@Nullable Output<String> waitingRoomPath) {
            $.waitingRoomPath = waitingRoomPath;
            return this;
        }

        /**
         * @param waitingRoomPath This specifies the path to the waiting room main page on the origin server, for example `/vp/waiting-room.html`. When the request is marked as `Waiting Room Main Page` and blocked, the visitor enters the waiting room. The behavior sets the outgoing request path to the `waitingRoomPath` and modifies the cache key accordingly. See the `visitorPrioritizationRequest` match criteria to further customize these requests.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomPath(String waitingRoomPath) {
            return waitingRoomPath(Output.of(waitingRoomPath));
        }

        /**
         * @param waitingRoomTitle This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomTitle(@Nullable Output<String> waitingRoomTitle) {
            $.waitingRoomTitle = waitingRoomTitle;
            return this;
        }

        /**
         * @param waitingRoomTitle This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomTitle(String waitingRoomTitle) {
            return waitingRoomTitle(Output.of(waitingRoomTitle));
        }

        public GetPropertyRulesBuilderRulesV20250113BehaviorVisitorPrioritizationFifoArgs build() {
            return $;
        }
    }

}
