// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultOpacityArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultOpacityArgs Empty = new GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultOpacityArgs();

    @Import(name="opacity")
    private @Nullable Output<String> opacity;

    public Optional<Output<String>> opacity() {
        return Optional.ofNullable(this.opacity);
    }

    @Import(name="opacityVar")
    private @Nullable Output<String> opacityVar;

    public Optional<Output<String>> opacityVar() {
        return Optional.ofNullable(this.opacityVar);
    }

    private GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultOpacityArgs() {}

    private GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultOpacityArgs(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultOpacityArgs $) {
        this.opacity = $.opacity;
        this.opacityVar = $.opacityVar;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultOpacityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultOpacityArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultOpacityArgs();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultOpacityArgs defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultOpacityArgs(Objects.requireNonNull(defaults));
        }

        public Builder opacity(@Nullable Output<String> opacity) {
            $.opacity = opacity;
            return this;
        }

        public Builder opacity(String opacity) {
            return opacity(Output.of(opacity));
        }

        public Builder opacityVar(@Nullable Output<String> opacityVar) {
            $.opacityVar = opacityVar;
            return this;
        }

        public Builder opacityVar(String opacityVar) {
            return opacityVar(Output.of(opacityVar));
        }

        public GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultOpacityArgs build() {
            return $;
        }
    }

}
