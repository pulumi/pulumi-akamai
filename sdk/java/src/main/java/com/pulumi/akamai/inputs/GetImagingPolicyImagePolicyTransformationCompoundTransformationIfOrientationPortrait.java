// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitAppend;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitAspectCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitBackgroundColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitBlur;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitChromaKey;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitComposite;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitCompound;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitContrast;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFaceCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFeatureCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFitAndFill;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitGoop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitGrayscale;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitHsl;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitHsv;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfDimension;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfOrientation;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitImQuery;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitMaxColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitMirror;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitMonoHue;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitOpacity;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRegionOfInterestCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRelativeCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRemoveColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitResize;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRotate;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitScale;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitShears;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitTrim;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitUnsharpMask;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortrait extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortrait Empty = new GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortrait();

    @Import(name="appends")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitAppend> appends;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitAppend>> appends() {
        return Optional.ofNullable(this.appends);
    }

    @Import(name="aspectCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitAspectCrop> aspectCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitAspectCrop>> aspectCrops() {
        return Optional.ofNullable(this.aspectCrops);
    }

    @Import(name="backgroundColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitBackgroundColor> backgroundColors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitBackgroundColor>> backgroundColors() {
        return Optional.ofNullable(this.backgroundColors);
    }

    @Import(name="blurs")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitBlur> blurs;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitBlur>> blurs() {
        return Optional.ofNullable(this.blurs);
    }

    @Import(name="chromaKeys")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitChromaKey> chromaKeys;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitChromaKey>> chromaKeys() {
        return Optional.ofNullable(this.chromaKeys);
    }

    @Import(name="composites")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitComposite> composites;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitComposite>> composites() {
        return Optional.ofNullable(this.composites);
    }

    @Import(name="compounds")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitCompound> compounds;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitCompound>> compounds() {
        return Optional.ofNullable(this.compounds);
    }

    @Import(name="contrasts")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitContrast> contrasts;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitContrast>> contrasts() {
        return Optional.ofNullable(this.contrasts);
    }

    @Import(name="crops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitCrop> crops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitCrop>> crops() {
        return Optional.ofNullable(this.crops);
    }

    @Import(name="faceCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFaceCrop> faceCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFaceCrop>> faceCrops() {
        return Optional.ofNullable(this.faceCrops);
    }

    @Import(name="featureCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFeatureCrop> featureCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFeatureCrop>> featureCrops() {
        return Optional.ofNullable(this.featureCrops);
    }

    @Import(name="fitAndFills")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFitAndFill> fitAndFills;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFitAndFill>> fitAndFills() {
        return Optional.ofNullable(this.fitAndFills);
    }

    @Import(name="goops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitGoop> goops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitGoop>> goops() {
        return Optional.ofNullable(this.goops);
    }

    @Import(name="grayscales")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitGrayscale> grayscales;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitGrayscale>> grayscales() {
        return Optional.ofNullable(this.grayscales);
    }

    @Import(name="hsls")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitHsl> hsls;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitHsl>> hsls() {
        return Optional.ofNullable(this.hsls);
    }

    @Import(name="hsvs")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitHsv> hsvs;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitHsv>> hsvs() {
        return Optional.ofNullable(this.hsvs);
    }

    @Import(name="ifDimensions")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfDimension> ifDimensions;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfDimension>> ifDimensions() {
        return Optional.ofNullable(this.ifDimensions);
    }

    @Import(name="ifOrientations")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfOrientation> ifOrientations;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfOrientation>> ifOrientations() {
        return Optional.ofNullable(this.ifOrientations);
    }

    @Import(name="imQueries")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitImQuery> imQueries;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitImQuery>> imQueries() {
        return Optional.ofNullable(this.imQueries);
    }

    @Import(name="maxColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitMaxColor> maxColors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitMaxColor>> maxColors() {
        return Optional.ofNullable(this.maxColors);
    }

    @Import(name="mirrors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitMirror> mirrors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitMirror>> mirrors() {
        return Optional.ofNullable(this.mirrors);
    }

    @Import(name="monoHues")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitMonoHue> monoHues;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitMonoHue>> monoHues() {
        return Optional.ofNullable(this.monoHues);
    }

    @Import(name="opacities")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitOpacity> opacities;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitOpacity>> opacities() {
        return Optional.ofNullable(this.opacities);
    }

    @Import(name="regionOfInterestCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRegionOfInterestCrop> regionOfInterestCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRegionOfInterestCrop>> regionOfInterestCrops() {
        return Optional.ofNullable(this.regionOfInterestCrops);
    }

    @Import(name="relativeCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRelativeCrop> relativeCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRelativeCrop>> relativeCrops() {
        return Optional.ofNullable(this.relativeCrops);
    }

    @Import(name="removeColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRemoveColor> removeColors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRemoveColor>> removeColors() {
        return Optional.ofNullable(this.removeColors);
    }

    @Import(name="resizes")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitResize> resizes;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitResize>> resizes() {
        return Optional.ofNullable(this.resizes);
    }

    @Import(name="rotates")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRotate> rotates;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRotate>> rotates() {
        return Optional.ofNullable(this.rotates);
    }

    @Import(name="scales")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitScale> scales;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitScale>> scales() {
        return Optional.ofNullable(this.scales);
    }

    @Import(name="shears")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitShears> shears;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitShears>> shears() {
        return Optional.ofNullable(this.shears);
    }

    @Import(name="trims")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitTrim> trims;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitTrim>> trims() {
        return Optional.ofNullable(this.trims);
    }

    @Import(name="unsharpMasks")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitUnsharpMask> unsharpMasks;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitUnsharpMask>> unsharpMasks() {
        return Optional.ofNullable(this.unsharpMasks);
    }

    private GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortrait() {}

    private GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortrait(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortrait $) {
        this.appends = $.appends;
        this.aspectCrops = $.aspectCrops;
        this.backgroundColors = $.backgroundColors;
        this.blurs = $.blurs;
        this.chromaKeys = $.chromaKeys;
        this.composites = $.composites;
        this.compounds = $.compounds;
        this.contrasts = $.contrasts;
        this.crops = $.crops;
        this.faceCrops = $.faceCrops;
        this.featureCrops = $.featureCrops;
        this.fitAndFills = $.fitAndFills;
        this.goops = $.goops;
        this.grayscales = $.grayscales;
        this.hsls = $.hsls;
        this.hsvs = $.hsvs;
        this.ifDimensions = $.ifDimensions;
        this.ifOrientations = $.ifOrientations;
        this.imQueries = $.imQueries;
        this.maxColors = $.maxColors;
        this.mirrors = $.mirrors;
        this.monoHues = $.monoHues;
        this.opacities = $.opacities;
        this.regionOfInterestCrops = $.regionOfInterestCrops;
        this.relativeCrops = $.relativeCrops;
        this.removeColors = $.removeColors;
        this.resizes = $.resizes;
        this.rotates = $.rotates;
        this.scales = $.scales;
        this.shears = $.shears;
        this.trims = $.trims;
        this.unsharpMasks = $.unsharpMasks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortrait defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortrait $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortrait();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortrait defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortrait(Objects.requireNonNull(defaults));
        }

        public Builder appends(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitAppend> appends) {
            $.appends = appends;
            return this;
        }

        public Builder appends(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitAppend... appends) {
            return appends(List.of(appends));
        }

        public Builder aspectCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitAspectCrop> aspectCrops) {
            $.aspectCrops = aspectCrops;
            return this;
        }

        public Builder aspectCrops(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitAspectCrop... aspectCrops) {
            return aspectCrops(List.of(aspectCrops));
        }

        public Builder backgroundColors(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitBackgroundColor> backgroundColors) {
            $.backgroundColors = backgroundColors;
            return this;
        }

        public Builder backgroundColors(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitBackgroundColor... backgroundColors) {
            return backgroundColors(List.of(backgroundColors));
        }

        public Builder blurs(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitBlur> blurs) {
            $.blurs = blurs;
            return this;
        }

        public Builder blurs(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitBlur... blurs) {
            return blurs(List.of(blurs));
        }

        public Builder chromaKeys(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitChromaKey> chromaKeys) {
            $.chromaKeys = chromaKeys;
            return this;
        }

        public Builder chromaKeys(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitChromaKey... chromaKeys) {
            return chromaKeys(List.of(chromaKeys));
        }

        public Builder composites(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitComposite> composites) {
            $.composites = composites;
            return this;
        }

        public Builder composites(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitComposite... composites) {
            return composites(List.of(composites));
        }

        public Builder compounds(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitCompound> compounds) {
            $.compounds = compounds;
            return this;
        }

        public Builder compounds(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitCompound... compounds) {
            return compounds(List.of(compounds));
        }

        public Builder contrasts(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitContrast> contrasts) {
            $.contrasts = contrasts;
            return this;
        }

        public Builder contrasts(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitContrast... contrasts) {
            return contrasts(List.of(contrasts));
        }

        public Builder crops(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitCrop> crops) {
            $.crops = crops;
            return this;
        }

        public Builder crops(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitCrop... crops) {
            return crops(List.of(crops));
        }

        public Builder faceCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFaceCrop> faceCrops) {
            $.faceCrops = faceCrops;
            return this;
        }

        public Builder faceCrops(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFaceCrop... faceCrops) {
            return faceCrops(List.of(faceCrops));
        }

        public Builder featureCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFeatureCrop> featureCrops) {
            $.featureCrops = featureCrops;
            return this;
        }

        public Builder featureCrops(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFeatureCrop... featureCrops) {
            return featureCrops(List.of(featureCrops));
        }

        public Builder fitAndFills(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFitAndFill> fitAndFills) {
            $.fitAndFills = fitAndFills;
            return this;
        }

        public Builder fitAndFills(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFitAndFill... fitAndFills) {
            return fitAndFills(List.of(fitAndFills));
        }

        public Builder goops(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitGoop> goops) {
            $.goops = goops;
            return this;
        }

        public Builder goops(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitGoop... goops) {
            return goops(List.of(goops));
        }

        public Builder grayscales(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitGrayscale> grayscales) {
            $.grayscales = grayscales;
            return this;
        }

        public Builder grayscales(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitGrayscale... grayscales) {
            return grayscales(List.of(grayscales));
        }

        public Builder hsls(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitHsl> hsls) {
            $.hsls = hsls;
            return this;
        }

        public Builder hsls(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitHsl... hsls) {
            return hsls(List.of(hsls));
        }

        public Builder hsvs(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitHsv> hsvs) {
            $.hsvs = hsvs;
            return this;
        }

        public Builder hsvs(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitHsv... hsvs) {
            return hsvs(List.of(hsvs));
        }

        public Builder ifDimensions(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfDimension> ifDimensions) {
            $.ifDimensions = ifDimensions;
            return this;
        }

        public Builder ifDimensions(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfDimension... ifDimensions) {
            return ifDimensions(List.of(ifDimensions));
        }

        public Builder ifOrientations(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfOrientation> ifOrientations) {
            $.ifOrientations = ifOrientations;
            return this;
        }

        public Builder ifOrientations(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfOrientation... ifOrientations) {
            return ifOrientations(List.of(ifOrientations));
        }

        public Builder imQueries(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitImQuery> imQueries) {
            $.imQueries = imQueries;
            return this;
        }

        public Builder imQueries(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitImQuery... imQueries) {
            return imQueries(List.of(imQueries));
        }

        public Builder maxColors(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitMaxColor> maxColors) {
            $.maxColors = maxColors;
            return this;
        }

        public Builder maxColors(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitMaxColor... maxColors) {
            return maxColors(List.of(maxColors));
        }

        public Builder mirrors(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitMirror> mirrors) {
            $.mirrors = mirrors;
            return this;
        }

        public Builder mirrors(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitMirror... mirrors) {
            return mirrors(List.of(mirrors));
        }

        public Builder monoHues(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitMonoHue> monoHues) {
            $.monoHues = monoHues;
            return this;
        }

        public Builder monoHues(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitMonoHue... monoHues) {
            return monoHues(List.of(monoHues));
        }

        public Builder opacities(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitOpacity> opacities) {
            $.opacities = opacities;
            return this;
        }

        public Builder opacities(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitOpacity... opacities) {
            return opacities(List.of(opacities));
        }

        public Builder regionOfInterestCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRegionOfInterestCrop> regionOfInterestCrops) {
            $.regionOfInterestCrops = regionOfInterestCrops;
            return this;
        }

        public Builder regionOfInterestCrops(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRegionOfInterestCrop... regionOfInterestCrops) {
            return regionOfInterestCrops(List.of(regionOfInterestCrops));
        }

        public Builder relativeCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRelativeCrop> relativeCrops) {
            $.relativeCrops = relativeCrops;
            return this;
        }

        public Builder relativeCrops(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRelativeCrop... relativeCrops) {
            return relativeCrops(List.of(relativeCrops));
        }

        public Builder removeColors(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRemoveColor> removeColors) {
            $.removeColors = removeColors;
            return this;
        }

        public Builder removeColors(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRemoveColor... removeColors) {
            return removeColors(List.of(removeColors));
        }

        public Builder resizes(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitResize> resizes) {
            $.resizes = resizes;
            return this;
        }

        public Builder resizes(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitResize... resizes) {
            return resizes(List.of(resizes));
        }

        public Builder rotates(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRotate> rotates) {
            $.rotates = rotates;
            return this;
        }

        public Builder rotates(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRotate... rotates) {
            return rotates(List.of(rotates));
        }

        public Builder scales(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitScale> scales) {
            $.scales = scales;
            return this;
        }

        public Builder scales(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitScale... scales) {
            return scales(List.of(scales));
        }

        public Builder shears(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitShears> shears) {
            $.shears = shears;
            return this;
        }

        public Builder shears(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitShears... shears) {
            return shears(List.of(shears));
        }

        public Builder trims(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitTrim> trims) {
            $.trims = trims;
            return this;
        }

        public Builder trims(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitTrim... trims) {
            return trims(List.of(trims));
        }

        public Builder unsharpMasks(@Nullable List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitUnsharpMask> unsharpMasks) {
            $.unsharpMasks = unsharpMasks;
            return this;
        }

        public Builder unsharpMasks(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitUnsharpMask... unsharpMasks) {
            return unsharpMasks(List.of(unsharpMasks));
        }

        public GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortrait build() {
            return $;
        }
    }

}
