// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCloudletsApplicationLoadBalancerDataCenter {
    /**
     * @return The city in which the data center is located.
     * 
     */
    private String city;
    /**
     * @return Describes if cloud server host header is overridden
     * 
     */
    private Boolean cloudServerHostHeaderOverride;
    /**
     * @return Describes if this datacenter is a cloud service
     * 
     */
    private Boolean cloudService;
    /**
     * @return The continent on which the data center is located
     * 
     */
    private String continent;
    /**
     * @return The country in which the data center is located
     * 
     */
    private String country;
    /**
     * @return This should match the &#39;hostname&#39; value defined for this datacenter in Property Manager
     * 
     */
    private String hostname;
    /**
     * @return The latitude value for the data center. This member supports six decimal places of precision.
     * 
     */
    private Double latitude;
    /**
     * @return An array of strings that represent the origin servers used to poll the data centers in an application load balancer configuration. These servers support basic HTTP polling.
     * 
     */
    private List<String> livenessHosts;
    /**
     * @return The longitude value for the data center. This member supports six decimal places of precision.
     * 
     */
    private Double longitude;
    /**
     * @return The id of an origin that represents the data center. The conditional origin, which is defined in the Property Manager API, must have an originType of either CUSTOMER or NET_STORAGE
     * 
     */
    private String originId;
    /**
     * @return The percent of traffic that is sent to the data center. The total for all data centers must equal 100%.
     * 
     */
    private Double percent;
    /**
     * @return The state, province, or region where the data center is located
     * 
     */
    private String stateOrProvince;

    private GetCloudletsApplicationLoadBalancerDataCenter() {}
    /**
     * @return The city in which the data center is located.
     * 
     */
    public String city() {
        return this.city;
    }
    /**
     * @return Describes if cloud server host header is overridden
     * 
     */
    public Boolean cloudServerHostHeaderOverride() {
        return this.cloudServerHostHeaderOverride;
    }
    /**
     * @return Describes if this datacenter is a cloud service
     * 
     */
    public Boolean cloudService() {
        return this.cloudService;
    }
    /**
     * @return The continent on which the data center is located
     * 
     */
    public String continent() {
        return this.continent;
    }
    /**
     * @return The country in which the data center is located
     * 
     */
    public String country() {
        return this.country;
    }
    /**
     * @return This should match the &#39;hostname&#39; value defined for this datacenter in Property Manager
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return The latitude value for the data center. This member supports six decimal places of precision.
     * 
     */
    public Double latitude() {
        return this.latitude;
    }
    /**
     * @return An array of strings that represent the origin servers used to poll the data centers in an application load balancer configuration. These servers support basic HTTP polling.
     * 
     */
    public List<String> livenessHosts() {
        return this.livenessHosts;
    }
    /**
     * @return The longitude value for the data center. This member supports six decimal places of precision.
     * 
     */
    public Double longitude() {
        return this.longitude;
    }
    /**
     * @return The id of an origin that represents the data center. The conditional origin, which is defined in the Property Manager API, must have an originType of either CUSTOMER or NET_STORAGE
     * 
     */
    public String originId() {
        return this.originId;
    }
    /**
     * @return The percent of traffic that is sent to the data center. The total for all data centers must equal 100%.
     * 
     */
    public Double percent() {
        return this.percent;
    }
    /**
     * @return The state, province, or region where the data center is located
     * 
     */
    public String stateOrProvince() {
        return this.stateOrProvince;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCloudletsApplicationLoadBalancerDataCenter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String city;
        private Boolean cloudServerHostHeaderOverride;
        private Boolean cloudService;
        private String continent;
        private String country;
        private String hostname;
        private Double latitude;
        private List<String> livenessHosts;
        private Double longitude;
        private String originId;
        private Double percent;
        private String stateOrProvince;
        public Builder() {}
        public Builder(GetCloudletsApplicationLoadBalancerDataCenter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.city = defaults.city;
    	      this.cloudServerHostHeaderOverride = defaults.cloudServerHostHeaderOverride;
    	      this.cloudService = defaults.cloudService;
    	      this.continent = defaults.continent;
    	      this.country = defaults.country;
    	      this.hostname = defaults.hostname;
    	      this.latitude = defaults.latitude;
    	      this.livenessHosts = defaults.livenessHosts;
    	      this.longitude = defaults.longitude;
    	      this.originId = defaults.originId;
    	      this.percent = defaults.percent;
    	      this.stateOrProvince = defaults.stateOrProvince;
        }

        @CustomType.Setter
        public Builder city(String city) {
            if (city == null) {
              throw new MissingRequiredPropertyException("GetCloudletsApplicationLoadBalancerDataCenter", "city");
            }
            this.city = city;
            return this;
        }
        @CustomType.Setter
        public Builder cloudServerHostHeaderOverride(Boolean cloudServerHostHeaderOverride) {
            if (cloudServerHostHeaderOverride == null) {
              throw new MissingRequiredPropertyException("GetCloudletsApplicationLoadBalancerDataCenter", "cloudServerHostHeaderOverride");
            }
            this.cloudServerHostHeaderOverride = cloudServerHostHeaderOverride;
            return this;
        }
        @CustomType.Setter
        public Builder cloudService(Boolean cloudService) {
            if (cloudService == null) {
              throw new MissingRequiredPropertyException("GetCloudletsApplicationLoadBalancerDataCenter", "cloudService");
            }
            this.cloudService = cloudService;
            return this;
        }
        @CustomType.Setter
        public Builder continent(String continent) {
            if (continent == null) {
              throw new MissingRequiredPropertyException("GetCloudletsApplicationLoadBalancerDataCenter", "continent");
            }
            this.continent = continent;
            return this;
        }
        @CustomType.Setter
        public Builder country(String country) {
            if (country == null) {
              throw new MissingRequiredPropertyException("GetCloudletsApplicationLoadBalancerDataCenter", "country");
            }
            this.country = country;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("GetCloudletsApplicationLoadBalancerDataCenter", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder latitude(Double latitude) {
            if (latitude == null) {
              throw new MissingRequiredPropertyException("GetCloudletsApplicationLoadBalancerDataCenter", "latitude");
            }
            this.latitude = latitude;
            return this;
        }
        @CustomType.Setter
        public Builder livenessHosts(List<String> livenessHosts) {
            if (livenessHosts == null) {
              throw new MissingRequiredPropertyException("GetCloudletsApplicationLoadBalancerDataCenter", "livenessHosts");
            }
            this.livenessHosts = livenessHosts;
            return this;
        }
        public Builder livenessHosts(String... livenessHosts) {
            return livenessHosts(List.of(livenessHosts));
        }
        @CustomType.Setter
        public Builder longitude(Double longitude) {
            if (longitude == null) {
              throw new MissingRequiredPropertyException("GetCloudletsApplicationLoadBalancerDataCenter", "longitude");
            }
            this.longitude = longitude;
            return this;
        }
        @CustomType.Setter
        public Builder originId(String originId) {
            if (originId == null) {
              throw new MissingRequiredPropertyException("GetCloudletsApplicationLoadBalancerDataCenter", "originId");
            }
            this.originId = originId;
            return this;
        }
        @CustomType.Setter
        public Builder percent(Double percent) {
            if (percent == null) {
              throw new MissingRequiredPropertyException("GetCloudletsApplicationLoadBalancerDataCenter", "percent");
            }
            this.percent = percent;
            return this;
        }
        @CustomType.Setter
        public Builder stateOrProvince(String stateOrProvince) {
            if (stateOrProvince == null) {
              throw new MissingRequiredPropertyException("GetCloudletsApplicationLoadBalancerDataCenter", "stateOrProvince");
            }
            this.stateOrProvince = stateOrProvince;
            return this;
        }
        public GetCloudletsApplicationLoadBalancerDataCenter build() {
            final var _resultValue = new GetCloudletsApplicationLoadBalancerDataCenter();
            _resultValue.city = city;
            _resultValue.cloudServerHostHeaderOverride = cloudServerHostHeaderOverride;
            _resultValue.cloudService = cloudService;
            _resultValue.continent = continent;
            _resultValue.country = country;
            _resultValue.hostname = hostname;
            _resultValue.latitude = latitude;
            _resultValue.livenessHosts = livenessHosts;
            _resultValue.longitude = longitude;
            _resultValue.originId = originId;
            _resultValue.percent = percent;
            _resultValue.stateOrProvince = stateOrProvince;
            return _resultValue;
        }
    }
}
