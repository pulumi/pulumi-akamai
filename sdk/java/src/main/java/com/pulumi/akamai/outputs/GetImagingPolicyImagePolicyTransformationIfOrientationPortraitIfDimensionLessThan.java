// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanAppend;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanAspectCrop;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanBackgroundColor;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanBlur;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanChromaKey;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanComposite;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanCompound;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanContrast;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanCrop;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFaceCrop;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFeatureCrop;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFitAndFill;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanGoop;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanGrayscale;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanHsl;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanHsv;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfDimension;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfOrientation;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanImQuery;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMaxColor;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMirror;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMonoHue;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanOpacity;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRegionOfInterestCrop;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRelativeCrop;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRemoveColor;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanResize;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRotate;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanScale;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanShears;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanTrim;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanUnsharpMask;
import com.pulumi.core.annotations.CustomType;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThan {
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanAppend> appends;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanAspectCrop> aspectCrops;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanBackgroundColor> backgroundColors;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanBlur> blurs;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanChromaKey> chromaKeys;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanComposite> composites;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanCompound> compounds;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanContrast> contrasts;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanCrop> crops;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFaceCrop> faceCrops;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFeatureCrop> featureCrops;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFitAndFill> fitAndFills;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanGoop> goops;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanGrayscale> grayscales;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanHsl> hsls;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanHsv> hsvs;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfDimension> ifDimensions;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfOrientation> ifOrientations;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanImQuery> imQueries;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMaxColor> maxColors;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMirror> mirrors;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMonoHue> monoHues;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanOpacity> opacities;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRegionOfInterestCrop> regionOfInterestCrops;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRelativeCrop> relativeCrops;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRemoveColor> removeColors;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanResize> resizes;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRotate> rotates;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanScale> scales;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanShears> shears;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanTrim> trims;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanUnsharpMask> unsharpMasks;

    private GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThan() {}
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanAppend> appends() {
        return this.appends == null ? List.of() : this.appends;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanAspectCrop> aspectCrops() {
        return this.aspectCrops == null ? List.of() : this.aspectCrops;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanBackgroundColor> backgroundColors() {
        return this.backgroundColors == null ? List.of() : this.backgroundColors;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanBlur> blurs() {
        return this.blurs == null ? List.of() : this.blurs;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanChromaKey> chromaKeys() {
        return this.chromaKeys == null ? List.of() : this.chromaKeys;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanComposite> composites() {
        return this.composites == null ? List.of() : this.composites;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanCompound> compounds() {
        return this.compounds == null ? List.of() : this.compounds;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanContrast> contrasts() {
        return this.contrasts == null ? List.of() : this.contrasts;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanCrop> crops() {
        return this.crops == null ? List.of() : this.crops;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFaceCrop> faceCrops() {
        return this.faceCrops == null ? List.of() : this.faceCrops;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFeatureCrop> featureCrops() {
        return this.featureCrops == null ? List.of() : this.featureCrops;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFitAndFill> fitAndFills() {
        return this.fitAndFills == null ? List.of() : this.fitAndFills;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanGoop> goops() {
        return this.goops == null ? List.of() : this.goops;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanGrayscale> grayscales() {
        return this.grayscales == null ? List.of() : this.grayscales;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanHsl> hsls() {
        return this.hsls == null ? List.of() : this.hsls;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanHsv> hsvs() {
        return this.hsvs == null ? List.of() : this.hsvs;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfDimension> ifDimensions() {
        return this.ifDimensions == null ? List.of() : this.ifDimensions;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfOrientation> ifOrientations() {
        return this.ifOrientations == null ? List.of() : this.ifOrientations;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanImQuery> imQueries() {
        return this.imQueries == null ? List.of() : this.imQueries;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMaxColor> maxColors() {
        return this.maxColors == null ? List.of() : this.maxColors;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMirror> mirrors() {
        return this.mirrors == null ? List.of() : this.mirrors;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMonoHue> monoHues() {
        return this.monoHues == null ? List.of() : this.monoHues;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanOpacity> opacities() {
        return this.opacities == null ? List.of() : this.opacities;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRegionOfInterestCrop> regionOfInterestCrops() {
        return this.regionOfInterestCrops == null ? List.of() : this.regionOfInterestCrops;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRelativeCrop> relativeCrops() {
        return this.relativeCrops == null ? List.of() : this.relativeCrops;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRemoveColor> removeColors() {
        return this.removeColors == null ? List.of() : this.removeColors;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanResize> resizes() {
        return this.resizes == null ? List.of() : this.resizes;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRotate> rotates() {
        return this.rotates == null ? List.of() : this.rotates;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanScale> scales() {
        return this.scales == null ? List.of() : this.scales;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanShears> shears() {
        return this.shears == null ? List.of() : this.shears;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanTrim> trims() {
        return this.trims == null ? List.of() : this.trims;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanUnsharpMask> unsharpMasks() {
        return this.unsharpMasks == null ? List.of() : this.unsharpMasks;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThan defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanAppend> appends;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanAspectCrop> aspectCrops;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanBackgroundColor> backgroundColors;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanBlur> blurs;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanChromaKey> chromaKeys;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanComposite> composites;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanCompound> compounds;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanContrast> contrasts;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanCrop> crops;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFaceCrop> faceCrops;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFeatureCrop> featureCrops;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFitAndFill> fitAndFills;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanGoop> goops;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanGrayscale> grayscales;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanHsl> hsls;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanHsv> hsvs;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfDimension> ifDimensions;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfOrientation> ifOrientations;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanImQuery> imQueries;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMaxColor> maxColors;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMirror> mirrors;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMonoHue> monoHues;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanOpacity> opacities;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRegionOfInterestCrop> regionOfInterestCrops;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRelativeCrop> relativeCrops;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRemoveColor> removeColors;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanResize> resizes;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRotate> rotates;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanScale> scales;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanShears> shears;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanTrim> trims;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanUnsharpMask> unsharpMasks;
        public Builder() {}
        public Builder(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThan defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appends = defaults.appends;
    	      this.aspectCrops = defaults.aspectCrops;
    	      this.backgroundColors = defaults.backgroundColors;
    	      this.blurs = defaults.blurs;
    	      this.chromaKeys = defaults.chromaKeys;
    	      this.composites = defaults.composites;
    	      this.compounds = defaults.compounds;
    	      this.contrasts = defaults.contrasts;
    	      this.crops = defaults.crops;
    	      this.faceCrops = defaults.faceCrops;
    	      this.featureCrops = defaults.featureCrops;
    	      this.fitAndFills = defaults.fitAndFills;
    	      this.goops = defaults.goops;
    	      this.grayscales = defaults.grayscales;
    	      this.hsls = defaults.hsls;
    	      this.hsvs = defaults.hsvs;
    	      this.ifDimensions = defaults.ifDimensions;
    	      this.ifOrientations = defaults.ifOrientations;
    	      this.imQueries = defaults.imQueries;
    	      this.maxColors = defaults.maxColors;
    	      this.mirrors = defaults.mirrors;
    	      this.monoHues = defaults.monoHues;
    	      this.opacities = defaults.opacities;
    	      this.regionOfInterestCrops = defaults.regionOfInterestCrops;
    	      this.relativeCrops = defaults.relativeCrops;
    	      this.removeColors = defaults.removeColors;
    	      this.resizes = defaults.resizes;
    	      this.rotates = defaults.rotates;
    	      this.scales = defaults.scales;
    	      this.shears = defaults.shears;
    	      this.trims = defaults.trims;
    	      this.unsharpMasks = defaults.unsharpMasks;
        }

        @CustomType.Setter
        public Builder appends(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanAppend> appends) {
            this.appends = appends;
            return this;
        }
        public Builder appends(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanAppend... appends) {
            return appends(List.of(appends));
        }
        @CustomType.Setter
        public Builder aspectCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanAspectCrop> aspectCrops) {
            this.aspectCrops = aspectCrops;
            return this;
        }
        public Builder aspectCrops(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanAspectCrop... aspectCrops) {
            return aspectCrops(List.of(aspectCrops));
        }
        @CustomType.Setter
        public Builder backgroundColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanBackgroundColor> backgroundColors) {
            this.backgroundColors = backgroundColors;
            return this;
        }
        public Builder backgroundColors(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanBackgroundColor... backgroundColors) {
            return backgroundColors(List.of(backgroundColors));
        }
        @CustomType.Setter
        public Builder blurs(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanBlur> blurs) {
            this.blurs = blurs;
            return this;
        }
        public Builder blurs(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanBlur... blurs) {
            return blurs(List.of(blurs));
        }
        @CustomType.Setter
        public Builder chromaKeys(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanChromaKey> chromaKeys) {
            this.chromaKeys = chromaKeys;
            return this;
        }
        public Builder chromaKeys(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanChromaKey... chromaKeys) {
            return chromaKeys(List.of(chromaKeys));
        }
        @CustomType.Setter
        public Builder composites(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanComposite> composites) {
            this.composites = composites;
            return this;
        }
        public Builder composites(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanComposite... composites) {
            return composites(List.of(composites));
        }
        @CustomType.Setter
        public Builder compounds(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanCompound> compounds) {
            this.compounds = compounds;
            return this;
        }
        public Builder compounds(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanCompound... compounds) {
            return compounds(List.of(compounds));
        }
        @CustomType.Setter
        public Builder contrasts(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanContrast> contrasts) {
            this.contrasts = contrasts;
            return this;
        }
        public Builder contrasts(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanContrast... contrasts) {
            return contrasts(List.of(contrasts));
        }
        @CustomType.Setter
        public Builder crops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanCrop> crops) {
            this.crops = crops;
            return this;
        }
        public Builder crops(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanCrop... crops) {
            return crops(List.of(crops));
        }
        @CustomType.Setter
        public Builder faceCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFaceCrop> faceCrops) {
            this.faceCrops = faceCrops;
            return this;
        }
        public Builder faceCrops(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFaceCrop... faceCrops) {
            return faceCrops(List.of(faceCrops));
        }
        @CustomType.Setter
        public Builder featureCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFeatureCrop> featureCrops) {
            this.featureCrops = featureCrops;
            return this;
        }
        public Builder featureCrops(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFeatureCrop... featureCrops) {
            return featureCrops(List.of(featureCrops));
        }
        @CustomType.Setter
        public Builder fitAndFills(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFitAndFill> fitAndFills) {
            this.fitAndFills = fitAndFills;
            return this;
        }
        public Builder fitAndFills(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFitAndFill... fitAndFills) {
            return fitAndFills(List.of(fitAndFills));
        }
        @CustomType.Setter
        public Builder goops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanGoop> goops) {
            this.goops = goops;
            return this;
        }
        public Builder goops(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanGoop... goops) {
            return goops(List.of(goops));
        }
        @CustomType.Setter
        public Builder grayscales(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanGrayscale> grayscales) {
            this.grayscales = grayscales;
            return this;
        }
        public Builder grayscales(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanGrayscale... grayscales) {
            return grayscales(List.of(grayscales));
        }
        @CustomType.Setter
        public Builder hsls(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanHsl> hsls) {
            this.hsls = hsls;
            return this;
        }
        public Builder hsls(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanHsl... hsls) {
            return hsls(List.of(hsls));
        }
        @CustomType.Setter
        public Builder hsvs(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanHsv> hsvs) {
            this.hsvs = hsvs;
            return this;
        }
        public Builder hsvs(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanHsv... hsvs) {
            return hsvs(List.of(hsvs));
        }
        @CustomType.Setter
        public Builder ifDimensions(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfDimension> ifDimensions) {
            this.ifDimensions = ifDimensions;
            return this;
        }
        public Builder ifDimensions(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfDimension... ifDimensions) {
            return ifDimensions(List.of(ifDimensions));
        }
        @CustomType.Setter
        public Builder ifOrientations(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfOrientation> ifOrientations) {
            this.ifOrientations = ifOrientations;
            return this;
        }
        public Builder ifOrientations(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfOrientation... ifOrientations) {
            return ifOrientations(List.of(ifOrientations));
        }
        @CustomType.Setter
        public Builder imQueries(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanImQuery> imQueries) {
            this.imQueries = imQueries;
            return this;
        }
        public Builder imQueries(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanImQuery... imQueries) {
            return imQueries(List.of(imQueries));
        }
        @CustomType.Setter
        public Builder maxColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMaxColor> maxColors) {
            this.maxColors = maxColors;
            return this;
        }
        public Builder maxColors(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMaxColor... maxColors) {
            return maxColors(List.of(maxColors));
        }
        @CustomType.Setter
        public Builder mirrors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMirror> mirrors) {
            this.mirrors = mirrors;
            return this;
        }
        public Builder mirrors(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMirror... mirrors) {
            return mirrors(List.of(mirrors));
        }
        @CustomType.Setter
        public Builder monoHues(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMonoHue> monoHues) {
            this.monoHues = monoHues;
            return this;
        }
        public Builder monoHues(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMonoHue... monoHues) {
            return monoHues(List.of(monoHues));
        }
        @CustomType.Setter
        public Builder opacities(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanOpacity> opacities) {
            this.opacities = opacities;
            return this;
        }
        public Builder opacities(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanOpacity... opacities) {
            return opacities(List.of(opacities));
        }
        @CustomType.Setter
        public Builder regionOfInterestCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRegionOfInterestCrop> regionOfInterestCrops) {
            this.regionOfInterestCrops = regionOfInterestCrops;
            return this;
        }
        public Builder regionOfInterestCrops(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRegionOfInterestCrop... regionOfInterestCrops) {
            return regionOfInterestCrops(List.of(regionOfInterestCrops));
        }
        @CustomType.Setter
        public Builder relativeCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRelativeCrop> relativeCrops) {
            this.relativeCrops = relativeCrops;
            return this;
        }
        public Builder relativeCrops(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRelativeCrop... relativeCrops) {
            return relativeCrops(List.of(relativeCrops));
        }
        @CustomType.Setter
        public Builder removeColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRemoveColor> removeColors) {
            this.removeColors = removeColors;
            return this;
        }
        public Builder removeColors(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRemoveColor... removeColors) {
            return removeColors(List.of(removeColors));
        }
        @CustomType.Setter
        public Builder resizes(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanResize> resizes) {
            this.resizes = resizes;
            return this;
        }
        public Builder resizes(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanResize... resizes) {
            return resizes(List.of(resizes));
        }
        @CustomType.Setter
        public Builder rotates(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRotate> rotates) {
            this.rotates = rotates;
            return this;
        }
        public Builder rotates(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRotate... rotates) {
            return rotates(List.of(rotates));
        }
        @CustomType.Setter
        public Builder scales(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanScale> scales) {
            this.scales = scales;
            return this;
        }
        public Builder scales(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanScale... scales) {
            return scales(List.of(scales));
        }
        @CustomType.Setter
        public Builder shears(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanShears> shears) {
            this.shears = shears;
            return this;
        }
        public Builder shears(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanShears... shears) {
            return shears(List.of(shears));
        }
        @CustomType.Setter
        public Builder trims(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanTrim> trims) {
            this.trims = trims;
            return this;
        }
        public Builder trims(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanTrim... trims) {
            return trims(List.of(trims));
        }
        @CustomType.Setter
        public Builder unsharpMasks(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanUnsharpMask> unsharpMasks) {
            this.unsharpMasks = unsharpMasks;
            return this;
        }
        public Builder unsharpMasks(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanUnsharpMask... unsharpMasks) {
            return unsharpMasks(List.of(unsharpMasks));
        }
        public GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThan build() {
            final var o = new GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThan();
            o.appends = appends;
            o.aspectCrops = aspectCrops;
            o.backgroundColors = backgroundColors;
            o.blurs = blurs;
            o.chromaKeys = chromaKeys;
            o.composites = composites;
            o.compounds = compounds;
            o.contrasts = contrasts;
            o.crops = crops;
            o.faceCrops = faceCrops;
            o.featureCrops = featureCrops;
            o.fitAndFills = fitAndFills;
            o.goops = goops;
            o.grayscales = grayscales;
            o.hsls = hsls;
            o.hsvs = hsvs;
            o.ifDimensions = ifDimensions;
            o.ifOrientations = ifOrientations;
            o.imQueries = imQueries;
            o.maxColors = maxColors;
            o.mirrors = mirrors;
            o.monoHues = monoHues;
            o.opacities = opacities;
            o.regionOfInterestCrops = regionOfInterestCrops;
            o.relativeCrops = relativeCrops;
            o.removeColors = removeColors;
            o.resizes = resizes;
            o.rotates = rotates;
            o.scales = scales;
            o.shears = shears;
            o.trims = trims;
            o.unsharpMasks = unsharpMasks;
            return o;
        }
    }
}
