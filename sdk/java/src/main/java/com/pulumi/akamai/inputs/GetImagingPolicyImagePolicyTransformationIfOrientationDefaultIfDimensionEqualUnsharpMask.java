// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualUnsharpMask extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualUnsharpMask Empty = new GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualUnsharpMask();

    @Import(name="gain")
    private @Nullable String gain;

    public Optional<String> gain() {
        return Optional.ofNullable(this.gain);
    }

    @Import(name="gainVar")
    private @Nullable String gainVar;

    public Optional<String> gainVar() {
        return Optional.ofNullable(this.gainVar);
    }

    @Import(name="sigma")
    private @Nullable String sigma;

    public Optional<String> sigma() {
        return Optional.ofNullable(this.sigma);
    }

    @Import(name="sigmaVar")
    private @Nullable String sigmaVar;

    public Optional<String> sigmaVar() {
        return Optional.ofNullable(this.sigmaVar);
    }

    @Import(name="threshold")
    private @Nullable String threshold;

    public Optional<String> threshold() {
        return Optional.ofNullable(this.threshold);
    }

    @Import(name="thresholdVar")
    private @Nullable String thresholdVar;

    public Optional<String> thresholdVar() {
        return Optional.ofNullable(this.thresholdVar);
    }

    private GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualUnsharpMask() {}

    private GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualUnsharpMask(GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualUnsharpMask $) {
        this.gain = $.gain;
        this.gainVar = $.gainVar;
        this.sigma = $.sigma;
        this.sigmaVar = $.sigmaVar;
        this.threshold = $.threshold;
        this.thresholdVar = $.thresholdVar;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualUnsharpMask defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualUnsharpMask $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualUnsharpMask();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualUnsharpMask defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualUnsharpMask(Objects.requireNonNull(defaults));
        }

        public Builder gain(@Nullable String gain) {
            $.gain = gain;
            return this;
        }

        public Builder gainVar(@Nullable String gainVar) {
            $.gainVar = gainVar;
            return this;
        }

        public Builder sigma(@Nullable String sigma) {
            $.sigma = sigma;
            return this;
        }

        public Builder sigmaVar(@Nullable String sigmaVar) {
            $.sigmaVar = sigmaVar;
            return this;
        }

        public Builder threshold(@Nullable String threshold) {
            $.threshold = threshold;
            return this;
        }

        public Builder thresholdVar(@Nullable String thresholdVar) {
            $.thresholdVar = thresholdVar;
            return this;
        }

        public GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualUnsharpMask build() {
            return $;
        }
    }

}
