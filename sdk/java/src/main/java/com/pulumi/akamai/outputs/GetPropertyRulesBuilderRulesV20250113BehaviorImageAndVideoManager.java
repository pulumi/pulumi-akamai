// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.akamai.outputs.GetPropertyRulesBuilderRulesV20250113BehaviorImageAndVideoManagerCpCodeOriginal;
import com.pulumi.akamai.outputs.GetPropertyRulesBuilderRulesV20250113BehaviorImageAndVideoManagerCpCodeTransformed;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPropertyRulesBuilderRulesV20250113BehaviorImageAndVideoManager {
    private @Nullable Boolean applyBestFileType;
    private @Nullable GetPropertyRulesBuilderRulesV20250113BehaviorImageAndVideoManagerCpCodeOriginal cpCodeOriginal;
    private @Nullable GetPropertyRulesBuilderRulesV20250113BehaviorImageAndVideoManagerCpCodeTransformed cpCodeTransformed;
    private @Nullable Boolean enabled;
    private @Nullable String imageSet;
    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    private @Nullable Boolean locked;
    private @Nullable String policySetType;
    private @Nullable Boolean resize;
    /**
     * @return This option is for internal usage only.
     * 
     */
    private @Nullable String templateUuid;
    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    private @Nullable String uuid;
    private @Nullable String videoSet;

    private GetPropertyRulesBuilderRulesV20250113BehaviorImageAndVideoManager() {}
    public Optional<Boolean> applyBestFileType() {
        return Optional.ofNullable(this.applyBestFileType);
    }
    public Optional<GetPropertyRulesBuilderRulesV20250113BehaviorImageAndVideoManagerCpCodeOriginal> cpCodeOriginal() {
        return Optional.ofNullable(this.cpCodeOriginal);
    }
    public Optional<GetPropertyRulesBuilderRulesV20250113BehaviorImageAndVideoManagerCpCodeTransformed> cpCodeTransformed() {
        return Optional.ofNullable(this.cpCodeTransformed);
    }
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    public Optional<String> imageSet() {
        return Optional.ofNullable(this.imageSet);
    }
    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Boolean> locked() {
        return Optional.ofNullable(this.locked);
    }
    public Optional<String> policySetType() {
        return Optional.ofNullable(this.policySetType);
    }
    public Optional<Boolean> resize() {
        return Optional.ofNullable(this.resize);
    }
    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<String> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }
    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }
    public Optional<String> videoSet() {
        return Optional.ofNullable(this.videoSet);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPropertyRulesBuilderRulesV20250113BehaviorImageAndVideoManager defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean applyBestFileType;
        private @Nullable GetPropertyRulesBuilderRulesV20250113BehaviorImageAndVideoManagerCpCodeOriginal cpCodeOriginal;
        private @Nullable GetPropertyRulesBuilderRulesV20250113BehaviorImageAndVideoManagerCpCodeTransformed cpCodeTransformed;
        private @Nullable Boolean enabled;
        private @Nullable String imageSet;
        private @Nullable Boolean locked;
        private @Nullable String policySetType;
        private @Nullable Boolean resize;
        private @Nullable String templateUuid;
        private @Nullable String uuid;
        private @Nullable String videoSet;
        public Builder() {}
        public Builder(GetPropertyRulesBuilderRulesV20250113BehaviorImageAndVideoManager defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applyBestFileType = defaults.applyBestFileType;
    	      this.cpCodeOriginal = defaults.cpCodeOriginal;
    	      this.cpCodeTransformed = defaults.cpCodeTransformed;
    	      this.enabled = defaults.enabled;
    	      this.imageSet = defaults.imageSet;
    	      this.locked = defaults.locked;
    	      this.policySetType = defaults.policySetType;
    	      this.resize = defaults.resize;
    	      this.templateUuid = defaults.templateUuid;
    	      this.uuid = defaults.uuid;
    	      this.videoSet = defaults.videoSet;
        }

        @CustomType.Setter
        public Builder applyBestFileType(@Nullable Boolean applyBestFileType) {

            this.applyBestFileType = applyBestFileType;
            return this;
        }
        @CustomType.Setter
        public Builder cpCodeOriginal(@Nullable GetPropertyRulesBuilderRulesV20250113BehaviorImageAndVideoManagerCpCodeOriginal cpCodeOriginal) {

            this.cpCodeOriginal = cpCodeOriginal;
            return this;
        }
        @CustomType.Setter
        public Builder cpCodeTransformed(@Nullable GetPropertyRulesBuilderRulesV20250113BehaviorImageAndVideoManagerCpCodeTransformed cpCodeTransformed) {

            this.cpCodeTransformed = cpCodeTransformed;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder imageSet(@Nullable String imageSet) {

            this.imageSet = imageSet;
            return this;
        }
        @CustomType.Setter
        public Builder locked(@Nullable Boolean locked) {

            this.locked = locked;
            return this;
        }
        @CustomType.Setter
        public Builder policySetType(@Nullable String policySetType) {

            this.policySetType = policySetType;
            return this;
        }
        @CustomType.Setter
        public Builder resize(@Nullable Boolean resize) {

            this.resize = resize;
            return this;
        }
        @CustomType.Setter
        public Builder templateUuid(@Nullable String templateUuid) {

            this.templateUuid = templateUuid;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(@Nullable String uuid) {

            this.uuid = uuid;
            return this;
        }
        @CustomType.Setter
        public Builder videoSet(@Nullable String videoSet) {

            this.videoSet = videoSet;
            return this;
        }
        public GetPropertyRulesBuilderRulesV20250113BehaviorImageAndVideoManager build() {
            final var _resultValue = new GetPropertyRulesBuilderRulesV20250113BehaviorImageAndVideoManager();
            _resultValue.applyBestFileType = applyBestFileType;
            _resultValue.cpCodeOriginal = cpCodeOriginal;
            _resultValue.cpCodeTransformed = cpCodeTransformed;
            _resultValue.enabled = enabled;
            _resultValue.imageSet = imageSet;
            _resultValue.locked = locked;
            _resultValue.policySetType = policySetType;
            _resultValue.resize = resize;
            _resultValue.templateUuid = templateUuid;
            _resultValue.uuid = uuid;
            _resultValue.videoSet = videoSet;
            return _resultValue;
        }
    }
}
