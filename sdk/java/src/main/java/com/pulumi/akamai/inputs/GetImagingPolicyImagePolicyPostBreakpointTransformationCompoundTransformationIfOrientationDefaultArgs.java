// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultBackgroundColorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultBlurArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultChromaKeyArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultCompositeArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultCompoundArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultContrastArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultGoopArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultGrayscaleArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultHslArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultHsvArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfDimensionArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfOrientationArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultMaxColorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultMirrorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultMonoHueArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultOpacityArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultRemoveColorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultUnsharpMaskArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultArgs Empty = new GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultArgs();

    @Import(name="backgroundColors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultBackgroundColorArgs>> backgroundColors;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultBackgroundColorArgs>>> backgroundColors() {
        return Optional.ofNullable(this.backgroundColors);
    }

    @Import(name="blurs")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultBlurArgs>> blurs;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultBlurArgs>>> blurs() {
        return Optional.ofNullable(this.blurs);
    }

    @Import(name="chromaKeys")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultChromaKeyArgs>> chromaKeys;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultChromaKeyArgs>>> chromaKeys() {
        return Optional.ofNullable(this.chromaKeys);
    }

    @Import(name="composites")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultCompositeArgs>> composites;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultCompositeArgs>>> composites() {
        return Optional.ofNullable(this.composites);
    }

    @Import(name="compounds")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultCompoundArgs>> compounds;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultCompoundArgs>>> compounds() {
        return Optional.ofNullable(this.compounds);
    }

    @Import(name="contrasts")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultContrastArgs>> contrasts;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultContrastArgs>>> contrasts() {
        return Optional.ofNullable(this.contrasts);
    }

    @Import(name="goops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultGoopArgs>> goops;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultGoopArgs>>> goops() {
        return Optional.ofNullable(this.goops);
    }

    @Import(name="grayscales")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultGrayscaleArgs>> grayscales;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultGrayscaleArgs>>> grayscales() {
        return Optional.ofNullable(this.grayscales);
    }

    @Import(name="hsls")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultHslArgs>> hsls;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultHslArgs>>> hsls() {
        return Optional.ofNullable(this.hsls);
    }

    @Import(name="hsvs")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultHsvArgs>> hsvs;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultHsvArgs>>> hsvs() {
        return Optional.ofNullable(this.hsvs);
    }

    @Import(name="ifDimensions")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfDimensionArgs>> ifDimensions;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfDimensionArgs>>> ifDimensions() {
        return Optional.ofNullable(this.ifDimensions);
    }

    @Import(name="ifOrientations")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfOrientationArgs>> ifOrientations;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfOrientationArgs>>> ifOrientations() {
        return Optional.ofNullable(this.ifOrientations);
    }

    @Import(name="maxColors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultMaxColorArgs>> maxColors;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultMaxColorArgs>>> maxColors() {
        return Optional.ofNullable(this.maxColors);
    }

    @Import(name="mirrors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultMirrorArgs>> mirrors;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultMirrorArgs>>> mirrors() {
        return Optional.ofNullable(this.mirrors);
    }

    @Import(name="monoHues")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultMonoHueArgs>> monoHues;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultMonoHueArgs>>> monoHues() {
        return Optional.ofNullable(this.monoHues);
    }

    @Import(name="opacities")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultOpacityArgs>> opacities;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultOpacityArgs>>> opacities() {
        return Optional.ofNullable(this.opacities);
    }

    @Import(name="removeColors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultRemoveColorArgs>> removeColors;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultRemoveColorArgs>>> removeColors() {
        return Optional.ofNullable(this.removeColors);
    }

    @Import(name="unsharpMasks")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultUnsharpMaskArgs>> unsharpMasks;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultUnsharpMaskArgs>>> unsharpMasks() {
        return Optional.ofNullable(this.unsharpMasks);
    }

    private GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultArgs() {}

    private GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultArgs(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultArgs $) {
        this.backgroundColors = $.backgroundColors;
        this.blurs = $.blurs;
        this.chromaKeys = $.chromaKeys;
        this.composites = $.composites;
        this.compounds = $.compounds;
        this.contrasts = $.contrasts;
        this.goops = $.goops;
        this.grayscales = $.grayscales;
        this.hsls = $.hsls;
        this.hsvs = $.hsvs;
        this.ifDimensions = $.ifDimensions;
        this.ifOrientations = $.ifOrientations;
        this.maxColors = $.maxColors;
        this.mirrors = $.mirrors;
        this.monoHues = $.monoHues;
        this.opacities = $.opacities;
        this.removeColors = $.removeColors;
        this.unsharpMasks = $.unsharpMasks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultArgs();
        }

        public Builder(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultArgs defaults) {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultArgs(Objects.requireNonNull(defaults));
        }

        public Builder backgroundColors(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultBackgroundColorArgs>> backgroundColors) {
            $.backgroundColors = backgroundColors;
            return this;
        }

        public Builder backgroundColors(List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultBackgroundColorArgs> backgroundColors) {
            return backgroundColors(Output.of(backgroundColors));
        }

        public Builder backgroundColors(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultBackgroundColorArgs... backgroundColors) {
            return backgroundColors(List.of(backgroundColors));
        }

        public Builder blurs(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultBlurArgs>> blurs) {
            $.blurs = blurs;
            return this;
        }

        public Builder blurs(List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultBlurArgs> blurs) {
            return blurs(Output.of(blurs));
        }

        public Builder blurs(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultBlurArgs... blurs) {
            return blurs(List.of(blurs));
        }

        public Builder chromaKeys(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultChromaKeyArgs>> chromaKeys) {
            $.chromaKeys = chromaKeys;
            return this;
        }

        public Builder chromaKeys(List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultChromaKeyArgs> chromaKeys) {
            return chromaKeys(Output.of(chromaKeys));
        }

        public Builder chromaKeys(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultChromaKeyArgs... chromaKeys) {
            return chromaKeys(List.of(chromaKeys));
        }

        public Builder composites(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultCompositeArgs>> composites) {
            $.composites = composites;
            return this;
        }

        public Builder composites(List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultCompositeArgs> composites) {
            return composites(Output.of(composites));
        }

        public Builder composites(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultCompositeArgs... composites) {
            return composites(List.of(composites));
        }

        public Builder compounds(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultCompoundArgs>> compounds) {
            $.compounds = compounds;
            return this;
        }

        public Builder compounds(List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultCompoundArgs> compounds) {
            return compounds(Output.of(compounds));
        }

        public Builder compounds(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultCompoundArgs... compounds) {
            return compounds(List.of(compounds));
        }

        public Builder contrasts(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultContrastArgs>> contrasts) {
            $.contrasts = contrasts;
            return this;
        }

        public Builder contrasts(List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultContrastArgs> contrasts) {
            return contrasts(Output.of(contrasts));
        }

        public Builder contrasts(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultContrastArgs... contrasts) {
            return contrasts(List.of(contrasts));
        }

        public Builder goops(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultGoopArgs>> goops) {
            $.goops = goops;
            return this;
        }

        public Builder goops(List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultGoopArgs> goops) {
            return goops(Output.of(goops));
        }

        public Builder goops(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultGoopArgs... goops) {
            return goops(List.of(goops));
        }

        public Builder grayscales(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultGrayscaleArgs>> grayscales) {
            $.grayscales = grayscales;
            return this;
        }

        public Builder grayscales(List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultGrayscaleArgs> grayscales) {
            return grayscales(Output.of(grayscales));
        }

        public Builder grayscales(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultGrayscaleArgs... grayscales) {
            return grayscales(List.of(grayscales));
        }

        public Builder hsls(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultHslArgs>> hsls) {
            $.hsls = hsls;
            return this;
        }

        public Builder hsls(List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultHslArgs> hsls) {
            return hsls(Output.of(hsls));
        }

        public Builder hsls(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultHslArgs... hsls) {
            return hsls(List.of(hsls));
        }

        public Builder hsvs(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultHsvArgs>> hsvs) {
            $.hsvs = hsvs;
            return this;
        }

        public Builder hsvs(List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultHsvArgs> hsvs) {
            return hsvs(Output.of(hsvs));
        }

        public Builder hsvs(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultHsvArgs... hsvs) {
            return hsvs(List.of(hsvs));
        }

        public Builder ifDimensions(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfDimensionArgs>> ifDimensions) {
            $.ifDimensions = ifDimensions;
            return this;
        }

        public Builder ifDimensions(List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfDimensionArgs> ifDimensions) {
            return ifDimensions(Output.of(ifDimensions));
        }

        public Builder ifDimensions(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfDimensionArgs... ifDimensions) {
            return ifDimensions(List.of(ifDimensions));
        }

        public Builder ifOrientations(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfOrientationArgs>> ifOrientations) {
            $.ifOrientations = ifOrientations;
            return this;
        }

        public Builder ifOrientations(List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfOrientationArgs> ifOrientations) {
            return ifOrientations(Output.of(ifOrientations));
        }

        public Builder ifOrientations(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfOrientationArgs... ifOrientations) {
            return ifOrientations(List.of(ifOrientations));
        }

        public Builder maxColors(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultMaxColorArgs>> maxColors) {
            $.maxColors = maxColors;
            return this;
        }

        public Builder maxColors(List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultMaxColorArgs> maxColors) {
            return maxColors(Output.of(maxColors));
        }

        public Builder maxColors(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultMaxColorArgs... maxColors) {
            return maxColors(List.of(maxColors));
        }

        public Builder mirrors(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultMirrorArgs>> mirrors) {
            $.mirrors = mirrors;
            return this;
        }

        public Builder mirrors(List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultMirrorArgs> mirrors) {
            return mirrors(Output.of(mirrors));
        }

        public Builder mirrors(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultMirrorArgs... mirrors) {
            return mirrors(List.of(mirrors));
        }

        public Builder monoHues(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultMonoHueArgs>> monoHues) {
            $.monoHues = monoHues;
            return this;
        }

        public Builder monoHues(List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultMonoHueArgs> monoHues) {
            return monoHues(Output.of(monoHues));
        }

        public Builder monoHues(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultMonoHueArgs... monoHues) {
            return monoHues(List.of(monoHues));
        }

        public Builder opacities(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultOpacityArgs>> opacities) {
            $.opacities = opacities;
            return this;
        }

        public Builder opacities(List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultOpacityArgs> opacities) {
            return opacities(Output.of(opacities));
        }

        public Builder opacities(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultOpacityArgs... opacities) {
            return opacities(List.of(opacities));
        }

        public Builder removeColors(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultRemoveColorArgs>> removeColors) {
            $.removeColors = removeColors;
            return this;
        }

        public Builder removeColors(List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultRemoveColorArgs> removeColors) {
            return removeColors(Output.of(removeColors));
        }

        public Builder removeColors(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultRemoveColorArgs... removeColors) {
            return removeColors(List.of(removeColors));
        }

        public Builder unsharpMasks(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultUnsharpMaskArgs>> unsharpMasks) {
            $.unsharpMasks = unsharpMasks;
            return this;
        }

        public Builder unsharpMasks(List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultUnsharpMaskArgs> unsharpMasks) {
            return unsharpMasks(Output.of(unsharpMasks));
        }

        public Builder unsharpMasks(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultUnsharpMaskArgs... unsharpMasks) {
            return unsharpMasks(List.of(unsharpMasks));
        }

        public GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultArgs build() {
            return $;
        }
    }

}
