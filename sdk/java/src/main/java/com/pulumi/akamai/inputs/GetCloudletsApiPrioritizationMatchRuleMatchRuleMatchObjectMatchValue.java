// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptions;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValue extends com.pulumi.resources.InvokeArgs {

    public static final GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValue Empty = new GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValue();

    /**
     * If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Set to true if the entry for the name property should be evaluated based on case sensitivity
     * 
     */
    @Import(name="nameCaseSensitive")
    private @Nullable Boolean nameCaseSensitive;

    /**
     * @return Set to true if the entry for the name property should be evaluated based on case sensitivity
     * 
     */
    public Optional<Boolean> nameCaseSensitive() {
        return Optional.ofNullable(this.nameCaseSensitive);
    }

    /**
     * Set to true if the entry for the name property includes wildcards
     * 
     */
    @Import(name="nameHasWildcard")
    private @Nullable Boolean nameHasWildcard;

    /**
     * @return Set to true if the entry for the name property includes wildcards
     * 
     */
    public Optional<Boolean> nameHasWildcard() {
        return Optional.ofNullable(this.nameHasWildcard);
    }

    /**
     * If using the object type, use this set to list the values to match on (use only with the object type)
     * 
     */
    @Import(name="options")
    private @Nullable GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptions options;

    /**
     * @return If using the object type, use this set to list the values to match on (use only with the object type)
     * 
     */
    public Optional<GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptions> options() {
        return Optional.ofNullable(this.options);
    }

    /**
     * The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
     * 
     */
    public String type() {
        return this.type;
    }

    /**
     * The value attributes in the incoming request to match on (use only with simple type)
     * 
     */
    @Import(name="values")
    private @Nullable List<String> values;

    /**
     * @return The value attributes in the incoming request to match on (use only with simple type)
     * 
     */
    public Optional<List<String>> values() {
        return Optional.ofNullable(this.values);
    }

    private GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValue() {}

    private GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValue(GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValue $) {
        this.name = $.name;
        this.nameCaseSensitive = $.nameCaseSensitive;
        this.nameHasWildcard = $.nameHasWildcard;
        this.options = $.options;
        this.type = $.type;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValue defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValue $;

        public Builder() {
            $ = new GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValue();
        }

        public Builder(GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValue defaults) {
            $ = new GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValue(Objects.requireNonNull(defaults));
        }

        /**
         * @param name If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param nameCaseSensitive Set to true if the entry for the name property should be evaluated based on case sensitivity
         * 
         * @return builder
         * 
         */
        public Builder nameCaseSensitive(@Nullable Boolean nameCaseSensitive) {
            $.nameCaseSensitive = nameCaseSensitive;
            return this;
        }

        /**
         * @param nameHasWildcard Set to true if the entry for the name property includes wildcards
         * 
         * @return builder
         * 
         */
        public Builder nameHasWildcard(@Nullable Boolean nameHasWildcard) {
            $.nameHasWildcard = nameHasWildcard;
            return this;
        }

        /**
         * @param options If using the object type, use this set to list the values to match on (use only with the object type)
         * 
         * @return builder
         * 
         */
        public Builder options(@Nullable GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptions options) {
            $.options = options;
            return this;
        }

        /**
         * @param type The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        /**
         * @param values The value attributes in the incoming request to match on (use only with simple type)
         * 
         * @return builder
         * 
         */
        public Builder values(@Nullable List<String> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values The value attributes in the incoming request to match on (use only with simple type)
         * 
         * @return builder
         * 
         */
        public Builder values(String... values) {
            return values(List.of(values));
        }

        public GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValue build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValue", "type");
            }
            return $;
        }
    }

}
