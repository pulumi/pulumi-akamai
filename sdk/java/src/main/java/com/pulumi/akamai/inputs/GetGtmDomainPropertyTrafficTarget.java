// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetGtmDomainPropertyTrafficTarget extends com.pulumi.resources.InvokeArgs {

    public static final GetGtmDomainPropertyTrafficTarget Empty = new GetGtmDomainPropertyTrafficTarget();

    /**
     * A unique identifier for an existing data center in the domain.
     * 
     */
    @Import(name="datacenterId", required=true)
    private Integer datacenterId;

    /**
     * @return A unique identifier for an existing data center in the domain.
     * 
     */
    public Integer datacenterId() {
        return this.datacenterId;
    }

    /**
     * Indicates whether the traffic target is used.
     * 
     */
    @Import(name="enabled", required=true)
    private Boolean enabled;

    /**
     * @return Indicates whether the traffic target is used.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Specifies an optional data center for the property.
     * 
     */
    @Import(name="handoutCname", required=true)
    private String handoutCname;

    /**
     * @return Specifies an optional data center for the property.
     * 
     */
    public String handoutCname() {
        return this.handoutCname;
    }

    /**
     * An alternative label for the traffic target.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return An alternative label for the traffic target.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Identifies the IP address or the hostnames of the servers.
     * 
     */
    @Import(name="servers", required=true)
    private List<String> servers;

    /**
     * @return Identifies the IP address or the hostnames of the servers.
     * 
     */
    public List<String> servers() {
        return this.servers;
    }

    /**
     * Specifies the traffic target weight for the target.
     * 
     */
    @Import(name="weight", required=true)
    private Double weight;

    /**
     * @return Specifies the traffic target weight for the target.
     * 
     */
    public Double weight() {
        return this.weight;
    }

    private GetGtmDomainPropertyTrafficTarget() {}

    private GetGtmDomainPropertyTrafficTarget(GetGtmDomainPropertyTrafficTarget $) {
        this.datacenterId = $.datacenterId;
        this.enabled = $.enabled;
        this.handoutCname = $.handoutCname;
        this.name = $.name;
        this.servers = $.servers;
        this.weight = $.weight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGtmDomainPropertyTrafficTarget defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGtmDomainPropertyTrafficTarget $;

        public Builder() {
            $ = new GetGtmDomainPropertyTrafficTarget();
        }

        public Builder(GetGtmDomainPropertyTrafficTarget defaults) {
            $ = new GetGtmDomainPropertyTrafficTarget(Objects.requireNonNull(defaults));
        }

        /**
         * @param datacenterId A unique identifier for an existing data center in the domain.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(Integer datacenterId) {
            $.datacenterId = datacenterId;
            return this;
        }

        /**
         * @param enabled Indicates whether the traffic target is used.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param handoutCname Specifies an optional data center for the property.
         * 
         * @return builder
         * 
         */
        public Builder handoutCname(String handoutCname) {
            $.handoutCname = handoutCname;
            return this;
        }

        /**
         * @param name An alternative label for the traffic target.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param servers Identifies the IP address or the hostnames of the servers.
         * 
         * @return builder
         * 
         */
        public Builder servers(List<String> servers) {
            $.servers = servers;
            return this;
        }

        /**
         * @param servers Identifies the IP address or the hostnames of the servers.
         * 
         * @return builder
         * 
         */
        public Builder servers(String... servers) {
            return servers(List.of(servers));
        }

        /**
         * @param weight Specifies the traffic target weight for the target.
         * 
         * @return builder
         * 
         */
        public Builder weight(Double weight) {
            $.weight = weight;
            return this;
        }

        public GetGtmDomainPropertyTrafficTarget build() {
            if ($.datacenterId == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainPropertyTrafficTarget", "datacenterId");
            }
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainPropertyTrafficTarget", "enabled");
            }
            if ($.handoutCname == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainPropertyTrafficTarget", "handoutCname");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainPropertyTrafficTarget", "name");
            }
            if ($.servers == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainPropertyTrafficTarget", "servers");
            }
            if ($.weight == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainPropertyTrafficTarget", "weight");
            }
            return $;
        }
    }

}
