// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationDefaultArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationLandscapeArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationPortraitArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationSquareArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationArgs Empty = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationArgs();

    @Import(name="default")
    private @Nullable Output<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationDefaultArgs> default_;

    public Optional<Output<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationDefaultArgs>> default_() {
        return Optional.ofNullable(this.default_);
    }

    @Import(name="landscape")
    private @Nullable Output<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationLandscapeArgs> landscape;

    public Optional<Output<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationLandscapeArgs>> landscape() {
        return Optional.ofNullable(this.landscape);
    }

    @Import(name="portrait")
    private @Nullable Output<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationPortraitArgs> portrait;

    public Optional<Output<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationPortraitArgs>> portrait() {
        return Optional.ofNullable(this.portrait);
    }

    @Import(name="square")
    private @Nullable Output<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationSquareArgs> square;

    public Optional<Output<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationSquareArgs>> square() {
        return Optional.ofNullable(this.square);
    }

    private GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationArgs() {}

    private GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationArgs(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationArgs $) {
        this.default_ = $.default_;
        this.landscape = $.landscape;
        this.portrait = $.portrait;
        this.square = $.square;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationArgs();
        }

        public Builder(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationArgs defaults) {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationArgs(Objects.requireNonNull(defaults));
        }

        public Builder default_(@Nullable Output<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationDefaultArgs> default_) {
            $.default_ = default_;
            return this;
        }

        public Builder default_(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationDefaultArgs default_) {
            return default_(Output.of(default_));
        }

        public Builder landscape(@Nullable Output<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationLandscapeArgs> landscape) {
            $.landscape = landscape;
            return this;
        }

        public Builder landscape(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationLandscapeArgs landscape) {
            return landscape(Output.of(landscape));
        }

        public Builder portrait(@Nullable Output<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationPortraitArgs> portrait) {
            $.portrait = portrait;
            return this;
        }

        public Builder portrait(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationPortraitArgs portrait) {
            return portrait(Output.of(portrait));
        }

        public Builder square(@Nullable Output<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationSquareArgs> square) {
            $.square = square;
            return this;
        }

        public Builder square(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationSquareArgs square) {
            return square(Output.of(square));
        }

        public GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationArgs build() {
            return $;
        }
    }

}
