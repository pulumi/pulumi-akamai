// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationDefaultArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationLandscapeArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationPortraitArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationSquareArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationArgs Empty = new GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationArgs();

    @Import(name="default")
    private @Nullable Output<GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationDefaultArgs> default_;

    public Optional<Output<GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationDefaultArgs>> default_() {
        return Optional.ofNullable(this.default_);
    }

    @Import(name="landscape")
    private @Nullable Output<GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationLandscapeArgs> landscape;

    public Optional<Output<GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationLandscapeArgs>> landscape() {
        return Optional.ofNullable(this.landscape);
    }

    @Import(name="portrait")
    private @Nullable Output<GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationPortraitArgs> portrait;

    public Optional<Output<GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationPortraitArgs>> portrait() {
        return Optional.ofNullable(this.portrait);
    }

    @Import(name="square")
    private @Nullable Output<GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationSquareArgs> square;

    public Optional<Output<GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationSquareArgs>> square() {
        return Optional.ofNullable(this.square);
    }

    private GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationArgs() {}

    private GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationArgs(GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationArgs $) {
        this.default_ = $.default_;
        this.landscape = $.landscape;
        this.portrait = $.portrait;
        this.square = $.square;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationArgs();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationArgs defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationArgs(Objects.requireNonNull(defaults));
        }

        public Builder default_(@Nullable Output<GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationDefaultArgs> default_) {
            $.default_ = default_;
            return this;
        }

        public Builder default_(GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationDefaultArgs default_) {
            return default_(Output.of(default_));
        }

        public Builder landscape(@Nullable Output<GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationLandscapeArgs> landscape) {
            $.landscape = landscape;
            return this;
        }

        public Builder landscape(GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationLandscapeArgs landscape) {
            return landscape(Output.of(landscape));
        }

        public Builder portrait(@Nullable Output<GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationPortraitArgs> portrait) {
            $.portrait = portrait;
            return this;
        }

        public Builder portrait(GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationPortraitArgs portrait) {
            return portrait(Output.of(portrait));
        }

        public Builder square(@Nullable Output<GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationSquareArgs> square) {
            $.square = square;
            return this;
        }

        public Builder square(GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationSquareArgs square) {
            return square(Output.of(square));
        }

        public GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationArgs build() {
            return $;
        }
    }

}
