// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyRulesBuilderRulesV20241021CriterionMatchVariable extends com.pulumi.resources.InvokeArgs {

    public static final GetPropertyRulesBuilderRulesV20241021CriterionMatchVariable Empty = new GetPropertyRulesBuilderRulesV20241021CriterionMatchVariable();

    /**
     * Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    @Import(name="locked")
    private @Nullable Boolean locked;

    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Boolean> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * Specifies the range&#39;s numeric minimum value.
     * 
     */
    @Import(name="lowerBound")
    private @Nullable String lowerBound;

    /**
     * @return Specifies the range&#39;s numeric minimum value.
     * 
     */
    public Optional<String> lowerBound() {
        return Optional.ofNullable(this.lowerBound);
    }

    /**
     * When matching string expressions, enabling this performs a case-sensitive match.
     * 
     */
    @Import(name="matchCaseSensitive")
    private @Nullable Boolean matchCaseSensitive;

    /**
     * @return When matching string expressions, enabling this performs a case-sensitive match.
     * 
     */
    public Optional<Boolean> matchCaseSensitive() {
        return Optional.ofNullable(this.matchCaseSensitive);
    }

    /**
     * The type of match, based on which you use different options to specify the match criteria.
     * 
     */
    @Import(name="matchOperator")
    private @Nullable String matchOperator;

    /**
     * @return The type of match, based on which you use different options to specify the match criteria.
     * 
     */
    public Optional<String> matchOperator() {
        return Optional.ofNullable(this.matchOperator);
    }

    /**
     * When matching string expressions, enabling this allows wildcards, where `?` matches a single character and `*` matches zero or more characters.
     * 
     */
    @Import(name="matchWildcard")
    private @Nullable Boolean matchWildcard;

    /**
     * @return When matching string expressions, enabling this allows wildcards, where `?` matches a single character and `*` matches zero or more characters.
     * 
     */
    public Optional<Boolean> matchWildcard() {
        return Optional.ofNullable(this.matchWildcard);
    }

    /**
     * This option is for internal usage only.
     * 
     */
    @Import(name="templateUuid")
    private @Nullable String templateUuid;

    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<String> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }

    /**
     * Specifies the range&#39;s numeric maximum value.
     * 
     */
    @Import(name="upperBound")
    private @Nullable String upperBound;

    /**
     * @return Specifies the range&#39;s numeric maximum value.
     * 
     */
    public Optional<String> upperBound() {
        return Optional.ofNullable(this.upperBound);
    }

    /**
     * A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    @Import(name="uuid")
    private @Nullable String uuid;

    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    /**
     * Specifies a single matching string.
     * 
     */
    @Import(name="variableExpression")
    private @Nullable String variableExpression;

    /**
     * @return Specifies a single matching string.
     * 
     */
    public Optional<String> variableExpression() {
        return Optional.ofNullable(this.variableExpression);
    }

    /**
     * The name of the variable to match.
     * 
     */
    @Import(name="variableName")
    private @Nullable String variableName;

    /**
     * @return The name of the variable to match.
     * 
     */
    public Optional<String> variableName() {
        return Optional.ofNullable(this.variableName);
    }

    /**
     * Specifies an array of matching strings.
     * 
     */
    @Import(name="variableValues")
    private @Nullable List<String> variableValues;

    /**
     * @return Specifies an array of matching strings.
     * 
     */
    public Optional<List<String>> variableValues() {
        return Optional.ofNullable(this.variableValues);
    }

    private GetPropertyRulesBuilderRulesV20241021CriterionMatchVariable() {}

    private GetPropertyRulesBuilderRulesV20241021CriterionMatchVariable(GetPropertyRulesBuilderRulesV20241021CriterionMatchVariable $) {
        this.locked = $.locked;
        this.lowerBound = $.lowerBound;
        this.matchCaseSensitive = $.matchCaseSensitive;
        this.matchOperator = $.matchOperator;
        this.matchWildcard = $.matchWildcard;
        this.templateUuid = $.templateUuid;
        this.upperBound = $.upperBound;
        this.uuid = $.uuid;
        this.variableExpression = $.variableExpression;
        this.variableName = $.variableName;
        this.variableValues = $.variableValues;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesBuilderRulesV20241021CriterionMatchVariable defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesBuilderRulesV20241021CriterionMatchVariable $;

        public Builder() {
            $ = new GetPropertyRulesBuilderRulesV20241021CriterionMatchVariable();
        }

        public Builder(GetPropertyRulesBuilderRulesV20241021CriterionMatchVariable defaults) {
            $ = new GetPropertyRulesBuilderRulesV20241021CriterionMatchVariable(Objects.requireNonNull(defaults));
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(@Nullable Boolean locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param lowerBound Specifies the range&#39;s numeric minimum value.
         * 
         * @return builder
         * 
         */
        public Builder lowerBound(@Nullable String lowerBound) {
            $.lowerBound = lowerBound;
            return this;
        }

        /**
         * @param matchCaseSensitive When matching string expressions, enabling this performs a case-sensitive match.
         * 
         * @return builder
         * 
         */
        public Builder matchCaseSensitive(@Nullable Boolean matchCaseSensitive) {
            $.matchCaseSensitive = matchCaseSensitive;
            return this;
        }

        /**
         * @param matchOperator The type of match, based on which you use different options to specify the match criteria.
         * 
         * @return builder
         * 
         */
        public Builder matchOperator(@Nullable String matchOperator) {
            $.matchOperator = matchOperator;
            return this;
        }

        /**
         * @param matchWildcard When matching string expressions, enabling this allows wildcards, where `?` matches a single character and `*` matches zero or more characters.
         * 
         * @return builder
         * 
         */
        public Builder matchWildcard(@Nullable Boolean matchWildcard) {
            $.matchWildcard = matchWildcard;
            return this;
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(@Nullable String templateUuid) {
            $.templateUuid = templateUuid;
            return this;
        }

        /**
         * @param upperBound Specifies the range&#39;s numeric maximum value.
         * 
         * @return builder
         * 
         */
        public Builder upperBound(@Nullable String upperBound) {
            $.upperBound = upperBound;
            return this;
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable String uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param variableExpression Specifies a single matching string.
         * 
         * @return builder
         * 
         */
        public Builder variableExpression(@Nullable String variableExpression) {
            $.variableExpression = variableExpression;
            return this;
        }

        /**
         * @param variableName The name of the variable to match.
         * 
         * @return builder
         * 
         */
        public Builder variableName(@Nullable String variableName) {
            $.variableName = variableName;
            return this;
        }

        /**
         * @param variableValues Specifies an array of matching strings.
         * 
         * @return builder
         * 
         */
        public Builder variableValues(@Nullable List<String> variableValues) {
            $.variableValues = variableValues;
            return this;
        }

        /**
         * @param variableValues Specifies an array of matching strings.
         * 
         * @return builder
         * 
         */
        public Builder variableValues(String... variableValues) {
            return variableValues(List.of(variableValues));
        }

        public GetPropertyRulesBuilderRulesV20241021CriterionMatchVariable build() {
            return $;
        }
    }

}
