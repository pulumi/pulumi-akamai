// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenter;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShape extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShape Empty = new GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShape();

    /**
     * Defines coordinates for a single point, to help define polygons and rectangles. Each point may be an object with `x`and `y` members, or a two-element array.
     * 
     */
    @Import(name="center", required=true)
    private GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenter center;

    /**
     * @return Defines coordinates for a single point, to help define polygons and rectangles. Each point may be an object with `x`and `y` members, or a two-element array.
     * 
     */
    public GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenter center() {
        return this.center;
    }

    /**
     * The radius of the circle measured in pixels.
     * 
     */
    @Import(name="radius")
    private @Nullable String radius;

    /**
     * @return The radius of the circle measured in pixels.
     * 
     */
    public Optional<String> radius() {
        return Optional.ofNullable(this.radius);
    }

    /**
     * The radius of the circle measured in pixels.
     * 
     */
    @Import(name="radiusVar")
    private @Nullable String radiusVar;

    /**
     * @return The radius of the circle measured in pixels.
     * 
     */
    public Optional<String> radiusVar() {
        return Optional.ofNullable(this.radiusVar);
    }

    private GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShape() {}

    private GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShape(GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShape $) {
        this.center = $.center;
        this.radius = $.radius;
        this.radiusVar = $.radiusVar;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShape defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShape $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShape();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShape defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShape(Objects.requireNonNull(defaults));
        }

        /**
         * @param center Defines coordinates for a single point, to help define polygons and rectangles. Each point may be an object with `x`and `y` members, or a two-element array.
         * 
         * @return builder
         * 
         */
        public Builder center(GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenter center) {
            $.center = center;
            return this;
        }

        /**
         * @param radius The radius of the circle measured in pixels.
         * 
         * @return builder
         * 
         */
        public Builder radius(@Nullable String radius) {
            $.radius = radius;
            return this;
        }

        /**
         * @param radiusVar The radius of the circle measured in pixels.
         * 
         * @return builder
         * 
         */
        public Builder radiusVar(@Nullable String radiusVar) {
            $.radiusVar = radiusVar;
            return this;
        }

        public GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShape build() {
            if ($.center == null) {
                throw new MissingRequiredPropertyException("GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShape", "center");
            }
            return $;
        }
    }

}
