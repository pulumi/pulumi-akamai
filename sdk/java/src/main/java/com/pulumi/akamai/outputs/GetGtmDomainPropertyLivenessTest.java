// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.akamai.outputs.GetGtmDomainPropertyLivenessTestHttpHeader;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetGtmDomainPropertyLivenessTest {
    /**
     * @return List of alternate trust anchors (CA certificates)
     * 
     */
    private List<String> alternateCaCertificates;
    /**
     * @return If testObjectProtocol is DNS, DOH or DOT, requires an answer to the DNS query to be considered a success.
     * 
     */
    private Boolean answersRequired;
    /**
     * @return Disables warnings when non-standard ports are used.
     * 
     */
    private Boolean disableNonstandardPortWarning;
    /**
     * @return Disables the liveness test.
     * 
     */
    private Boolean disabled;
    /**
     * @return Specifies the score that&#39;s reported if the liveness test encounters an error other than timeout, such as connection refused, and 404.
     * 
     */
    private Double errorPenalty;
    /**
     * @return Treats a 3xx HTTP response as a failure if the testObjectProtocol is http, https or ftp.
     * 
     */
    private Boolean httpError3xx;
    /**
     * @return Treats a 4xx HTTP response as a failure if the testObjectProtocol is http, https or ftp.
     * 
     */
    private Boolean httpError4xx;
    /**
     * @return Treats a 5xx HTTP response as a failure if the testObjectProtocol is http, https or ftp.
     * 
     */
    private Boolean httpError5xx;
    /**
     * @return List of HTTP headers for the liveness test.
     * 
     */
    private @Nullable List<GetGtmDomainPropertyLivenessTestHttpHeader> httpHeaders;
    /**
     * @return Contains HTTP method to send if the `testObjectProtocol` is `http` or `https`. Supported values are `TRACE`, `HEAD`, `OPTIONS`, `GET`, `PUT`, `POST`, `PATCH`, `DELETE`. When omitted or `null`, this value defaults to `GET`.
     * 
     */
    private String httpMethod;
    /**
     * @return Contains Base64-encoded HTTP request body to send if the `testObjectProtocol` is `http` or `https`. When omitted or `null`, omits the request body from the request.
     * 
     */
    private String httpRequestBody;
    /**
     * @return A descriptive name for the liveness test.
     * 
     */
    private String name;
    /**
     * @return Validates the origin certificate. Applies only to tests with testObjectProtocol of https.
     * 
     */
    private Boolean peerCertificateVerification;
    /**
     * @return Whether to enable backwards compatibility for liveness endpoints that use older TLS protocols
     * 
     */
    private Boolean pre2023SecurityPosture;
    /**
     * @return Indicates that if testObjectProtocol is DNS, DOH or DOT, the DNS query is recursive.
     * 
     */
    private Boolean recursionRequested;
    /**
     * @return Specifies a request string.
     * 
     */
    private String requestString;
    /**
     * @return Specifies the query type, if testObjectProtocol is DNS.
     * 
     */
    private String resourceType;
    /**
     * @return Specifies a response string.
     * 
     */
    private String responseString;
    /**
     * @return Indicates a base64-encoded certificate.
     * 
     */
    private String sslClientCertificate;
    /**
     * @return Indicates a base64-encoded private key.
     * 
     */
    private String sslClientPrivateKey;
    /**
     * @return Indicates the interval at which the liveness test is run, in seconds.
     * 
     */
    private Integer testInterval;
    /**
     * @return Specifies the static text that acts as a stand-in for the data that you&#39;re sending on the network.
     * 
     */
    private String testObject;
    /**
     * @return Specifies the test object&#39;s password.
     * 
     */
    private String testObjectPassword;
    /**
     * @return Specifies the port number for the testObject.
     * 
     */
    private Integer testObjectPort;
    /**
     * @return Specifies the test protocol.
     * 
     */
    private String testObjectProtocol;
    /**
     * @return A descriptive name for the testObject.
     * 
     */
    private String testObjectUsername;
    /**
     * @return Specifies the duration of the liveness test before it fails.
     * 
     */
    private Double testTimeout;
    /**
     * @return Specifies the timeout penalty score.
     * 
     */
    private Double timeoutPenalty;

    private GetGtmDomainPropertyLivenessTest() {}
    /**
     * @return List of alternate trust anchors (CA certificates)
     * 
     */
    public List<String> alternateCaCertificates() {
        return this.alternateCaCertificates;
    }
    /**
     * @return If testObjectProtocol is DNS, DOH or DOT, requires an answer to the DNS query to be considered a success.
     * 
     */
    public Boolean answersRequired() {
        return this.answersRequired;
    }
    /**
     * @return Disables warnings when non-standard ports are used.
     * 
     */
    public Boolean disableNonstandardPortWarning() {
        return this.disableNonstandardPortWarning;
    }
    /**
     * @return Disables the liveness test.
     * 
     */
    public Boolean disabled() {
        return this.disabled;
    }
    /**
     * @return Specifies the score that&#39;s reported if the liveness test encounters an error other than timeout, such as connection refused, and 404.
     * 
     */
    public Double errorPenalty() {
        return this.errorPenalty;
    }
    /**
     * @return Treats a 3xx HTTP response as a failure if the testObjectProtocol is http, https or ftp.
     * 
     */
    public Boolean httpError3xx() {
        return this.httpError3xx;
    }
    /**
     * @return Treats a 4xx HTTP response as a failure if the testObjectProtocol is http, https or ftp.
     * 
     */
    public Boolean httpError4xx() {
        return this.httpError4xx;
    }
    /**
     * @return Treats a 5xx HTTP response as a failure if the testObjectProtocol is http, https or ftp.
     * 
     */
    public Boolean httpError5xx() {
        return this.httpError5xx;
    }
    /**
     * @return List of HTTP headers for the liveness test.
     * 
     */
    public List<GetGtmDomainPropertyLivenessTestHttpHeader> httpHeaders() {
        return this.httpHeaders == null ? List.of() : this.httpHeaders;
    }
    /**
     * @return Contains HTTP method to send if the `testObjectProtocol` is `http` or `https`. Supported values are `TRACE`, `HEAD`, `OPTIONS`, `GET`, `PUT`, `POST`, `PATCH`, `DELETE`. When omitted or `null`, this value defaults to `GET`.
     * 
     */
    public String httpMethod() {
        return this.httpMethod;
    }
    /**
     * @return Contains Base64-encoded HTTP request body to send if the `testObjectProtocol` is `http` or `https`. When omitted or `null`, omits the request body from the request.
     * 
     */
    public String httpRequestBody() {
        return this.httpRequestBody;
    }
    /**
     * @return A descriptive name for the liveness test.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Validates the origin certificate. Applies only to tests with testObjectProtocol of https.
     * 
     */
    public Boolean peerCertificateVerification() {
        return this.peerCertificateVerification;
    }
    /**
     * @return Whether to enable backwards compatibility for liveness endpoints that use older TLS protocols
     * 
     */
    public Boolean pre2023SecurityPosture() {
        return this.pre2023SecurityPosture;
    }
    /**
     * @return Indicates that if testObjectProtocol is DNS, DOH or DOT, the DNS query is recursive.
     * 
     */
    public Boolean recursionRequested() {
        return this.recursionRequested;
    }
    /**
     * @return Specifies a request string.
     * 
     */
    public String requestString() {
        return this.requestString;
    }
    /**
     * @return Specifies the query type, if testObjectProtocol is DNS.
     * 
     */
    public String resourceType() {
        return this.resourceType;
    }
    /**
     * @return Specifies a response string.
     * 
     */
    public String responseString() {
        return this.responseString;
    }
    /**
     * @return Indicates a base64-encoded certificate.
     * 
     */
    public String sslClientCertificate() {
        return this.sslClientCertificate;
    }
    /**
     * @return Indicates a base64-encoded private key.
     * 
     */
    public String sslClientPrivateKey() {
        return this.sslClientPrivateKey;
    }
    /**
     * @return Indicates the interval at which the liveness test is run, in seconds.
     * 
     */
    public Integer testInterval() {
        return this.testInterval;
    }
    /**
     * @return Specifies the static text that acts as a stand-in for the data that you&#39;re sending on the network.
     * 
     */
    public String testObject() {
        return this.testObject;
    }
    /**
     * @return Specifies the test object&#39;s password.
     * 
     */
    public String testObjectPassword() {
        return this.testObjectPassword;
    }
    /**
     * @return Specifies the port number for the testObject.
     * 
     */
    public Integer testObjectPort() {
        return this.testObjectPort;
    }
    /**
     * @return Specifies the test protocol.
     * 
     */
    public String testObjectProtocol() {
        return this.testObjectProtocol;
    }
    /**
     * @return A descriptive name for the testObject.
     * 
     */
    public String testObjectUsername() {
        return this.testObjectUsername;
    }
    /**
     * @return Specifies the duration of the liveness test before it fails.
     * 
     */
    public Double testTimeout() {
        return this.testTimeout;
    }
    /**
     * @return Specifies the timeout penalty score.
     * 
     */
    public Double timeoutPenalty() {
        return this.timeoutPenalty;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGtmDomainPropertyLivenessTest defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> alternateCaCertificates;
        private Boolean answersRequired;
        private Boolean disableNonstandardPortWarning;
        private Boolean disabled;
        private Double errorPenalty;
        private Boolean httpError3xx;
        private Boolean httpError4xx;
        private Boolean httpError5xx;
        private @Nullable List<GetGtmDomainPropertyLivenessTestHttpHeader> httpHeaders;
        private String httpMethod;
        private String httpRequestBody;
        private String name;
        private Boolean peerCertificateVerification;
        private Boolean pre2023SecurityPosture;
        private Boolean recursionRequested;
        private String requestString;
        private String resourceType;
        private String responseString;
        private String sslClientCertificate;
        private String sslClientPrivateKey;
        private Integer testInterval;
        private String testObject;
        private String testObjectPassword;
        private Integer testObjectPort;
        private String testObjectProtocol;
        private String testObjectUsername;
        private Double testTimeout;
        private Double timeoutPenalty;
        public Builder() {}
        public Builder(GetGtmDomainPropertyLivenessTest defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alternateCaCertificates = defaults.alternateCaCertificates;
    	      this.answersRequired = defaults.answersRequired;
    	      this.disableNonstandardPortWarning = defaults.disableNonstandardPortWarning;
    	      this.disabled = defaults.disabled;
    	      this.errorPenalty = defaults.errorPenalty;
    	      this.httpError3xx = defaults.httpError3xx;
    	      this.httpError4xx = defaults.httpError4xx;
    	      this.httpError5xx = defaults.httpError5xx;
    	      this.httpHeaders = defaults.httpHeaders;
    	      this.httpMethod = defaults.httpMethod;
    	      this.httpRequestBody = defaults.httpRequestBody;
    	      this.name = defaults.name;
    	      this.peerCertificateVerification = defaults.peerCertificateVerification;
    	      this.pre2023SecurityPosture = defaults.pre2023SecurityPosture;
    	      this.recursionRequested = defaults.recursionRequested;
    	      this.requestString = defaults.requestString;
    	      this.resourceType = defaults.resourceType;
    	      this.responseString = defaults.responseString;
    	      this.sslClientCertificate = defaults.sslClientCertificate;
    	      this.sslClientPrivateKey = defaults.sslClientPrivateKey;
    	      this.testInterval = defaults.testInterval;
    	      this.testObject = defaults.testObject;
    	      this.testObjectPassword = defaults.testObjectPassword;
    	      this.testObjectPort = defaults.testObjectPort;
    	      this.testObjectProtocol = defaults.testObjectProtocol;
    	      this.testObjectUsername = defaults.testObjectUsername;
    	      this.testTimeout = defaults.testTimeout;
    	      this.timeoutPenalty = defaults.timeoutPenalty;
        }

        @CustomType.Setter
        public Builder alternateCaCertificates(List<String> alternateCaCertificates) {
            if (alternateCaCertificates == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyLivenessTest", "alternateCaCertificates");
            }
            this.alternateCaCertificates = alternateCaCertificates;
            return this;
        }
        public Builder alternateCaCertificates(String... alternateCaCertificates) {
            return alternateCaCertificates(List.of(alternateCaCertificates));
        }
        @CustomType.Setter
        public Builder answersRequired(Boolean answersRequired) {
            if (answersRequired == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyLivenessTest", "answersRequired");
            }
            this.answersRequired = answersRequired;
            return this;
        }
        @CustomType.Setter
        public Builder disableNonstandardPortWarning(Boolean disableNonstandardPortWarning) {
            if (disableNonstandardPortWarning == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyLivenessTest", "disableNonstandardPortWarning");
            }
            this.disableNonstandardPortWarning = disableNonstandardPortWarning;
            return this;
        }
        @CustomType.Setter
        public Builder disabled(Boolean disabled) {
            if (disabled == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyLivenessTest", "disabled");
            }
            this.disabled = disabled;
            return this;
        }
        @CustomType.Setter
        public Builder errorPenalty(Double errorPenalty) {
            if (errorPenalty == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyLivenessTest", "errorPenalty");
            }
            this.errorPenalty = errorPenalty;
            return this;
        }
        @CustomType.Setter
        public Builder httpError3xx(Boolean httpError3xx) {
            if (httpError3xx == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyLivenessTest", "httpError3xx");
            }
            this.httpError3xx = httpError3xx;
            return this;
        }
        @CustomType.Setter
        public Builder httpError4xx(Boolean httpError4xx) {
            if (httpError4xx == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyLivenessTest", "httpError4xx");
            }
            this.httpError4xx = httpError4xx;
            return this;
        }
        @CustomType.Setter
        public Builder httpError5xx(Boolean httpError5xx) {
            if (httpError5xx == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyLivenessTest", "httpError5xx");
            }
            this.httpError5xx = httpError5xx;
            return this;
        }
        @CustomType.Setter
        public Builder httpHeaders(@Nullable List<GetGtmDomainPropertyLivenessTestHttpHeader> httpHeaders) {

            this.httpHeaders = httpHeaders;
            return this;
        }
        public Builder httpHeaders(GetGtmDomainPropertyLivenessTestHttpHeader... httpHeaders) {
            return httpHeaders(List.of(httpHeaders));
        }
        @CustomType.Setter
        public Builder httpMethod(String httpMethod) {
            if (httpMethod == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyLivenessTest", "httpMethod");
            }
            this.httpMethod = httpMethod;
            return this;
        }
        @CustomType.Setter
        public Builder httpRequestBody(String httpRequestBody) {
            if (httpRequestBody == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyLivenessTest", "httpRequestBody");
            }
            this.httpRequestBody = httpRequestBody;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyLivenessTest", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder peerCertificateVerification(Boolean peerCertificateVerification) {
            if (peerCertificateVerification == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyLivenessTest", "peerCertificateVerification");
            }
            this.peerCertificateVerification = peerCertificateVerification;
            return this;
        }
        @CustomType.Setter
        public Builder pre2023SecurityPosture(Boolean pre2023SecurityPosture) {
            if (pre2023SecurityPosture == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyLivenessTest", "pre2023SecurityPosture");
            }
            this.pre2023SecurityPosture = pre2023SecurityPosture;
            return this;
        }
        @CustomType.Setter
        public Builder recursionRequested(Boolean recursionRequested) {
            if (recursionRequested == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyLivenessTest", "recursionRequested");
            }
            this.recursionRequested = recursionRequested;
            return this;
        }
        @CustomType.Setter
        public Builder requestString(String requestString) {
            if (requestString == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyLivenessTest", "requestString");
            }
            this.requestString = requestString;
            return this;
        }
        @CustomType.Setter
        public Builder resourceType(String resourceType) {
            if (resourceType == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyLivenessTest", "resourceType");
            }
            this.resourceType = resourceType;
            return this;
        }
        @CustomType.Setter
        public Builder responseString(String responseString) {
            if (responseString == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyLivenessTest", "responseString");
            }
            this.responseString = responseString;
            return this;
        }
        @CustomType.Setter
        public Builder sslClientCertificate(String sslClientCertificate) {
            if (sslClientCertificate == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyLivenessTest", "sslClientCertificate");
            }
            this.sslClientCertificate = sslClientCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder sslClientPrivateKey(String sslClientPrivateKey) {
            if (sslClientPrivateKey == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyLivenessTest", "sslClientPrivateKey");
            }
            this.sslClientPrivateKey = sslClientPrivateKey;
            return this;
        }
        @CustomType.Setter
        public Builder testInterval(Integer testInterval) {
            if (testInterval == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyLivenessTest", "testInterval");
            }
            this.testInterval = testInterval;
            return this;
        }
        @CustomType.Setter
        public Builder testObject(String testObject) {
            if (testObject == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyLivenessTest", "testObject");
            }
            this.testObject = testObject;
            return this;
        }
        @CustomType.Setter
        public Builder testObjectPassword(String testObjectPassword) {
            if (testObjectPassword == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyLivenessTest", "testObjectPassword");
            }
            this.testObjectPassword = testObjectPassword;
            return this;
        }
        @CustomType.Setter
        public Builder testObjectPort(Integer testObjectPort) {
            if (testObjectPort == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyLivenessTest", "testObjectPort");
            }
            this.testObjectPort = testObjectPort;
            return this;
        }
        @CustomType.Setter
        public Builder testObjectProtocol(String testObjectProtocol) {
            if (testObjectProtocol == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyLivenessTest", "testObjectProtocol");
            }
            this.testObjectProtocol = testObjectProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder testObjectUsername(String testObjectUsername) {
            if (testObjectUsername == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyLivenessTest", "testObjectUsername");
            }
            this.testObjectUsername = testObjectUsername;
            return this;
        }
        @CustomType.Setter
        public Builder testTimeout(Double testTimeout) {
            if (testTimeout == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyLivenessTest", "testTimeout");
            }
            this.testTimeout = testTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder timeoutPenalty(Double timeoutPenalty) {
            if (timeoutPenalty == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyLivenessTest", "timeoutPenalty");
            }
            this.timeoutPenalty = timeoutPenalty;
            return this;
        }
        public GetGtmDomainPropertyLivenessTest build() {
            final var _resultValue = new GetGtmDomainPropertyLivenessTest();
            _resultValue.alternateCaCertificates = alternateCaCertificates;
            _resultValue.answersRequired = answersRequired;
            _resultValue.disableNonstandardPortWarning = disableNonstandardPortWarning;
            _resultValue.disabled = disabled;
            _resultValue.errorPenalty = errorPenalty;
            _resultValue.httpError3xx = httpError3xx;
            _resultValue.httpError4xx = httpError4xx;
            _resultValue.httpError5xx = httpError5xx;
            _resultValue.httpHeaders = httpHeaders;
            _resultValue.httpMethod = httpMethod;
            _resultValue.httpRequestBody = httpRequestBody;
            _resultValue.name = name;
            _resultValue.peerCertificateVerification = peerCertificateVerification;
            _resultValue.pre2023SecurityPosture = pre2023SecurityPosture;
            _resultValue.recursionRequested = recursionRequested;
            _resultValue.requestString = requestString;
            _resultValue.resourceType = resourceType;
            _resultValue.responseString = responseString;
            _resultValue.sslClientCertificate = sslClientCertificate;
            _resultValue.sslClientPrivateKey = sslClientPrivateKey;
            _resultValue.testInterval = testInterval;
            _resultValue.testObject = testObject;
            _resultValue.testObjectPassword = testObjectPassword;
            _resultValue.testObjectPort = testObjectPort;
            _resultValue.testObjectProtocol = testObjectProtocol;
            _resultValue.testObjectUsername = testObjectUsername;
            _resultValue.testTimeout = testTimeout;
            _resultValue.timeoutPenalty = timeoutPenalty;
            return _resultValue;
        }
    }
}
