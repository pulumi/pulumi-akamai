// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai;

import com.pulumi.akamai.inputs.CloudletsPolicyTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CloudletsPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final CloudletsPolicyArgs Empty = new CloudletsPolicyArgs();

    /**
     * Code for the type of Cloudlet (ALB, AP, AS, CD, ER, FR, IG, or VP)
     * 
     */
    @Import(name="cloudletCode", required=true)
    private Output<String> cloudletCode;

    /**
     * @return Code for the type of Cloudlet (ALB, AP, AS, CD, ER, FR, IG, or VP)
     * 
     */
    public Output<String> cloudletCode() {
        return this.cloudletCode;
    }

    /**
     * The description of this specific policy
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of this specific policy
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Defines the group association for the policy. You must have edit privileges for the group
     * 
     */
    @Import(name="groupId", required=true)
    private Output<String> groupId;

    /**
     * @return Defines the group association for the policy. You must have edit privileges for the group
     * 
     */
    public Output<String> groupId() {
        return this.groupId;
    }

    /**
     * The version of the Cloudlet specific matchRules
     * 
     */
    @Import(name="matchRuleFormat")
    private @Nullable Output<String> matchRuleFormat;

    /**
     * @return The version of the Cloudlet specific matchRules
     * 
     */
    public Optional<Output<String>> matchRuleFormat() {
        return Optional.ofNullable(this.matchRuleFormat);
    }

    /**
     * A JSON structure that defines the rules for this policy
     * 
     */
    @Import(name="matchRules")
    private @Nullable Output<String> matchRules;

    /**
     * @return A JSON structure that defines the rules for this policy
     * 
     */
    public Optional<Output<String>> matchRules() {
        return Optional.ofNullable(this.matchRules);
    }

    /**
     * The name of the policy. The name must be unique
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the policy. The name must be unique
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Enables to set timeout for processing
     * 
     */
    @Import(name="timeouts")
    private @Nullable Output<CloudletsPolicyTimeoutsArgs> timeouts;

    /**
     * @return Enables to set timeout for processing
     * 
     */
    public Optional<Output<CloudletsPolicyTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private CloudletsPolicyArgs() {}

    private CloudletsPolicyArgs(CloudletsPolicyArgs $) {
        this.cloudletCode = $.cloudletCode;
        this.description = $.description;
        this.groupId = $.groupId;
        this.matchRuleFormat = $.matchRuleFormat;
        this.matchRules = $.matchRules;
        this.name = $.name;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CloudletsPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CloudletsPolicyArgs $;

        public Builder() {
            $ = new CloudletsPolicyArgs();
        }

        public Builder(CloudletsPolicyArgs defaults) {
            $ = new CloudletsPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cloudletCode Code for the type of Cloudlet (ALB, AP, AS, CD, ER, FR, IG, or VP)
         * 
         * @return builder
         * 
         */
        public Builder cloudletCode(Output<String> cloudletCode) {
            $.cloudletCode = cloudletCode;
            return this;
        }

        /**
         * @param cloudletCode Code for the type of Cloudlet (ALB, AP, AS, CD, ER, FR, IG, or VP)
         * 
         * @return builder
         * 
         */
        public Builder cloudletCode(String cloudletCode) {
            return cloudletCode(Output.of(cloudletCode));
        }

        /**
         * @param description The description of this specific policy
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of this specific policy
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param groupId Defines the group association for the policy. You must have edit privileges for the group
         * 
         * @return builder
         * 
         */
        public Builder groupId(Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId Defines the group association for the policy. You must have edit privileges for the group
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param matchRuleFormat The version of the Cloudlet specific matchRules
         * 
         * @return builder
         * 
         */
        public Builder matchRuleFormat(@Nullable Output<String> matchRuleFormat) {
            $.matchRuleFormat = matchRuleFormat;
            return this;
        }

        /**
         * @param matchRuleFormat The version of the Cloudlet specific matchRules
         * 
         * @return builder
         * 
         */
        public Builder matchRuleFormat(String matchRuleFormat) {
            return matchRuleFormat(Output.of(matchRuleFormat));
        }

        /**
         * @param matchRules A JSON structure that defines the rules for this policy
         * 
         * @return builder
         * 
         */
        public Builder matchRules(@Nullable Output<String> matchRules) {
            $.matchRules = matchRules;
            return this;
        }

        /**
         * @param matchRules A JSON structure that defines the rules for this policy
         * 
         * @return builder
         * 
         */
        public Builder matchRules(String matchRules) {
            return matchRules(Output.of(matchRules));
        }

        /**
         * @param name The name of the policy. The name must be unique
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the policy. The name must be unique
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param timeouts Enables to set timeout for processing
         * 
         * @return builder
         * 
         */
        public Builder timeouts(@Nullable Output<CloudletsPolicyTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        /**
         * @param timeouts Enables to set timeout for processing
         * 
         * @return builder
         * 
         */
        public Builder timeouts(CloudletsPolicyTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public CloudletsPolicyArgs build() {
            $.cloudletCode = Objects.requireNonNull($.cloudletCode, "expected parameter 'cloudletCode' to be non-null");
            $.groupId = Objects.requireNonNull($.groupId, "expected parameter 'groupId' to be non-null");
            return $;
        }
    }

}
