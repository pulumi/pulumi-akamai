// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeBackgroundColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeBlur;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeChromaKey;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeComposite;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeCompound;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeContrast;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeGoop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeGrayscale;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeHsl;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeHsv;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfDimension;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientation;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeMaxColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeMirror;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeMonoHue;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeOpacity;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeRemoveColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeUnsharpMask;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscape extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscape Empty = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscape();

    @Import(name="backgroundColors")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeBackgroundColor> backgroundColors;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeBackgroundColor>> backgroundColors() {
        return Optional.ofNullable(this.backgroundColors);
    }

    @Import(name="blurs")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeBlur> blurs;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeBlur>> blurs() {
        return Optional.ofNullable(this.blurs);
    }

    @Import(name="chromaKeys")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeChromaKey> chromaKeys;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeChromaKey>> chromaKeys() {
        return Optional.ofNullable(this.chromaKeys);
    }

    @Import(name="composites")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeComposite> composites;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeComposite>> composites() {
        return Optional.ofNullable(this.composites);
    }

    @Import(name="compounds")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeCompound> compounds;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeCompound>> compounds() {
        return Optional.ofNullable(this.compounds);
    }

    @Import(name="contrasts")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeContrast> contrasts;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeContrast>> contrasts() {
        return Optional.ofNullable(this.contrasts);
    }

    @Import(name="goops")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeGoop> goops;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeGoop>> goops() {
        return Optional.ofNullable(this.goops);
    }

    @Import(name="grayscales")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeGrayscale> grayscales;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeGrayscale>> grayscales() {
        return Optional.ofNullable(this.grayscales);
    }

    @Import(name="hsls")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeHsl> hsls;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeHsl>> hsls() {
        return Optional.ofNullable(this.hsls);
    }

    @Import(name="hsvs")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeHsv> hsvs;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeHsv>> hsvs() {
        return Optional.ofNullable(this.hsvs);
    }

    @Import(name="ifDimensions")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfDimension> ifDimensions;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfDimension>> ifDimensions() {
        return Optional.ofNullable(this.ifDimensions);
    }

    @Import(name="ifOrientations")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientation> ifOrientations;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientation>> ifOrientations() {
        return Optional.ofNullable(this.ifOrientations);
    }

    @Import(name="maxColors")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeMaxColor> maxColors;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeMaxColor>> maxColors() {
        return Optional.ofNullable(this.maxColors);
    }

    @Import(name="mirrors")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeMirror> mirrors;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeMirror>> mirrors() {
        return Optional.ofNullable(this.mirrors);
    }

    @Import(name="monoHues")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeMonoHue> monoHues;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeMonoHue>> monoHues() {
        return Optional.ofNullable(this.monoHues);
    }

    @Import(name="opacities")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeOpacity> opacities;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeOpacity>> opacities() {
        return Optional.ofNullable(this.opacities);
    }

    @Import(name="removeColors")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeRemoveColor> removeColors;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeRemoveColor>> removeColors() {
        return Optional.ofNullable(this.removeColors);
    }

    @Import(name="unsharpMasks")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeUnsharpMask> unsharpMasks;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeUnsharpMask>> unsharpMasks() {
        return Optional.ofNullable(this.unsharpMasks);
    }

    private GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscape() {}

    private GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscape(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscape $) {
        this.backgroundColors = $.backgroundColors;
        this.blurs = $.blurs;
        this.chromaKeys = $.chromaKeys;
        this.composites = $.composites;
        this.compounds = $.compounds;
        this.contrasts = $.contrasts;
        this.goops = $.goops;
        this.grayscales = $.grayscales;
        this.hsls = $.hsls;
        this.hsvs = $.hsvs;
        this.ifDimensions = $.ifDimensions;
        this.ifOrientations = $.ifOrientations;
        this.maxColors = $.maxColors;
        this.mirrors = $.mirrors;
        this.monoHues = $.monoHues;
        this.opacities = $.opacities;
        this.removeColors = $.removeColors;
        this.unsharpMasks = $.unsharpMasks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscape defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscape $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscape();
        }

        public Builder(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscape defaults) {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscape(Objects.requireNonNull(defaults));
        }

        public Builder backgroundColors(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeBackgroundColor> backgroundColors) {
            $.backgroundColors = backgroundColors;
            return this;
        }

        public Builder backgroundColors(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeBackgroundColor... backgroundColors) {
            return backgroundColors(List.of(backgroundColors));
        }

        public Builder blurs(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeBlur> blurs) {
            $.blurs = blurs;
            return this;
        }

        public Builder blurs(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeBlur... blurs) {
            return blurs(List.of(blurs));
        }

        public Builder chromaKeys(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeChromaKey> chromaKeys) {
            $.chromaKeys = chromaKeys;
            return this;
        }

        public Builder chromaKeys(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeChromaKey... chromaKeys) {
            return chromaKeys(List.of(chromaKeys));
        }

        public Builder composites(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeComposite> composites) {
            $.composites = composites;
            return this;
        }

        public Builder composites(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeComposite... composites) {
            return composites(List.of(composites));
        }

        public Builder compounds(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeCompound> compounds) {
            $.compounds = compounds;
            return this;
        }

        public Builder compounds(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeCompound... compounds) {
            return compounds(List.of(compounds));
        }

        public Builder contrasts(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeContrast> contrasts) {
            $.contrasts = contrasts;
            return this;
        }

        public Builder contrasts(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeContrast... contrasts) {
            return contrasts(List.of(contrasts));
        }

        public Builder goops(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeGoop> goops) {
            $.goops = goops;
            return this;
        }

        public Builder goops(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeGoop... goops) {
            return goops(List.of(goops));
        }

        public Builder grayscales(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeGrayscale> grayscales) {
            $.grayscales = grayscales;
            return this;
        }

        public Builder grayscales(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeGrayscale... grayscales) {
            return grayscales(List.of(grayscales));
        }

        public Builder hsls(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeHsl> hsls) {
            $.hsls = hsls;
            return this;
        }

        public Builder hsls(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeHsl... hsls) {
            return hsls(List.of(hsls));
        }

        public Builder hsvs(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeHsv> hsvs) {
            $.hsvs = hsvs;
            return this;
        }

        public Builder hsvs(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeHsv... hsvs) {
            return hsvs(List.of(hsvs));
        }

        public Builder ifDimensions(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfDimension> ifDimensions) {
            $.ifDimensions = ifDimensions;
            return this;
        }

        public Builder ifDimensions(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfDimension... ifDimensions) {
            return ifDimensions(List.of(ifDimensions));
        }

        public Builder ifOrientations(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientation> ifOrientations) {
            $.ifOrientations = ifOrientations;
            return this;
        }

        public Builder ifOrientations(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientation... ifOrientations) {
            return ifOrientations(List.of(ifOrientations));
        }

        public Builder maxColors(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeMaxColor> maxColors) {
            $.maxColors = maxColors;
            return this;
        }

        public Builder maxColors(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeMaxColor... maxColors) {
            return maxColors(List.of(maxColors));
        }

        public Builder mirrors(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeMirror> mirrors) {
            $.mirrors = mirrors;
            return this;
        }

        public Builder mirrors(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeMirror... mirrors) {
            return mirrors(List.of(mirrors));
        }

        public Builder monoHues(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeMonoHue> monoHues) {
            $.monoHues = monoHues;
            return this;
        }

        public Builder monoHues(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeMonoHue... monoHues) {
            return monoHues(List.of(monoHues));
        }

        public Builder opacities(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeOpacity> opacities) {
            $.opacities = opacities;
            return this;
        }

        public Builder opacities(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeOpacity... opacities) {
            return opacities(List.of(opacities));
        }

        public Builder removeColors(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeRemoveColor> removeColors) {
            $.removeColors = removeColors;
            return this;
        }

        public Builder removeColors(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeRemoveColor... removeColors) {
            return removeColors(List.of(removeColors));
        }

        public Builder unsharpMasks(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeUnsharpMask> unsharpMasks) {
            $.unsharpMasks = unsharpMasks;
            return this;
        }

        public Builder unsharpMasks(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeUnsharpMask... unsharpMasks) {
            return unsharpMasks(List.of(unsharpMasks));
        }

        public GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscape build() {
            return $;
        }
    }

}
