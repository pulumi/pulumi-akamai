// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKey;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdn extends com.pulumi.resources.InvokeArgs {

    public static final GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdn Empty = new GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdn();

    /**
     * List of auth keys configured for the CDN.
     * 
     */
    @Import(name="cdnAuthKeys")
    private @Nullable List<GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKey> cdnAuthKeys;

    /**
     * @return List of auth keys configured for the CDN.
     * 
     */
    public Optional<List<GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKey>> cdnAuthKeys() {
        return Optional.ofNullable(this.cdnAuthKeys);
    }

    /**
     * Unique identifier for the CDN.
     * 
     */
    @Import(name="cdnCode", required=true)
    private String cdnCode;

    /**
     * @return Unique identifier for the CDN.
     * 
     */
    public String cdnCode() {
        return this.cdnCode;
    }

    /**
     * Enable CDN.
     * 
     */
    @Import(name="enabled", required=true)
    private Boolean enabled;

    /**
     * @return Enable CDN.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Specify whether CDN communication is HTTPS only.
     * 
     */
    @Import(name="httpsOnly", required=true)
    private Boolean httpsOnly;

    /**
     * @return Specify whether CDN communication is HTTPS only.
     * 
     */
    public Boolean httpsOnly() {
        return this.httpsOnly;
    }

    /**
     * Configure an access control list using IP addresses in CIDR notation.
     * 
     */
    @Import(name="ipAclCidrs", required=true)
    private List<String> ipAclCidrs;

    /**
     * @return Configure an access control list using IP addresses in CIDR notation.
     * 
     */
    public List<String> ipAclCidrs() {
        return this.ipAclCidrs;
    }

    private GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdn() {}

    private GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdn(GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdn $) {
        this.cdnAuthKeys = $.cdnAuthKeys;
        this.cdnCode = $.cdnCode;
        this.enabled = $.enabled;
        this.httpsOnly = $.httpsOnly;
        this.ipAclCidrs = $.ipAclCidrs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdn defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdn $;

        public Builder() {
            $ = new GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdn();
        }

        public Builder(GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdn defaults) {
            $ = new GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdn(Objects.requireNonNull(defaults));
        }

        /**
         * @param cdnAuthKeys List of auth keys configured for the CDN.
         * 
         * @return builder
         * 
         */
        public Builder cdnAuthKeys(@Nullable List<GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKey> cdnAuthKeys) {
            $.cdnAuthKeys = cdnAuthKeys;
            return this;
        }

        /**
         * @param cdnAuthKeys List of auth keys configured for the CDN.
         * 
         * @return builder
         * 
         */
        public Builder cdnAuthKeys(GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKey... cdnAuthKeys) {
            return cdnAuthKeys(List.of(cdnAuthKeys));
        }

        /**
         * @param cdnCode Unique identifier for the CDN.
         * 
         * @return builder
         * 
         */
        public Builder cdnCode(String cdnCode) {
            $.cdnCode = cdnCode;
            return this;
        }

        /**
         * @param enabled Enable CDN.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param httpsOnly Specify whether CDN communication is HTTPS only.
         * 
         * @return builder
         * 
         */
        public Builder httpsOnly(Boolean httpsOnly) {
            $.httpsOnly = httpsOnly;
            return this;
        }

        /**
         * @param ipAclCidrs Configure an access control list using IP addresses in CIDR notation.
         * 
         * @return builder
         * 
         */
        public Builder ipAclCidrs(List<String> ipAclCidrs) {
            $.ipAclCidrs = ipAclCidrs;
            return this;
        }

        /**
         * @param ipAclCidrs Configure an access control list using IP addresses in CIDR notation.
         * 
         * @return builder
         * 
         */
        public Builder ipAclCidrs(String... ipAclCidrs) {
            return ipAclCidrs(List.of(ipAclCidrs));
        }

        public GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdn build() {
            if ($.cdnCode == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdn", "cdnCode");
            }
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdn", "enabled");
            }
            if ($.httpsOnly == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdn", "httpsOnly");
            }
            if ($.ipAclCidrs == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdn", "ipAclCidrs");
            }
            return $;
        }
    }

}
