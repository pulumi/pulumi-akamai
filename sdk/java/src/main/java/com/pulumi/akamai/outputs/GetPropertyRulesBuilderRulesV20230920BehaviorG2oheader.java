// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPropertyRulesBuilderRulesV20230920BehaviorG2oheader {
    private @Nullable List<String> customSignStrings;
    private @Nullable String dataHeader;
    private @Nullable Boolean enabled;
    private @Nullable Integer encodingVersion;
    private @Nullable Boolean locked;
    private @Nullable String nonce;
    private @Nullable String secretKey;
    private @Nullable String signedHeader;
    private @Nullable String templateUuid;
    private @Nullable Boolean useCustomSignString;
    private @Nullable String uuid;

    private GetPropertyRulesBuilderRulesV20230920BehaviorG2oheader() {}
    public List<String> customSignStrings() {
        return this.customSignStrings == null ? List.of() : this.customSignStrings;
    }
    public Optional<String> dataHeader() {
        return Optional.ofNullable(this.dataHeader);
    }
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    public Optional<Integer> encodingVersion() {
        return Optional.ofNullable(this.encodingVersion);
    }
    public Optional<Boolean> locked() {
        return Optional.ofNullable(this.locked);
    }
    public Optional<String> nonce() {
        return Optional.ofNullable(this.nonce);
    }
    public Optional<String> secretKey() {
        return Optional.ofNullable(this.secretKey);
    }
    public Optional<String> signedHeader() {
        return Optional.ofNullable(this.signedHeader);
    }
    public Optional<String> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }
    public Optional<Boolean> useCustomSignString() {
        return Optional.ofNullable(this.useCustomSignString);
    }
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPropertyRulesBuilderRulesV20230920BehaviorG2oheader defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> customSignStrings;
        private @Nullable String dataHeader;
        private @Nullable Boolean enabled;
        private @Nullable Integer encodingVersion;
        private @Nullable Boolean locked;
        private @Nullable String nonce;
        private @Nullable String secretKey;
        private @Nullable String signedHeader;
        private @Nullable String templateUuid;
        private @Nullable Boolean useCustomSignString;
        private @Nullable String uuid;
        public Builder() {}
        public Builder(GetPropertyRulesBuilderRulesV20230920BehaviorG2oheader defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customSignStrings = defaults.customSignStrings;
    	      this.dataHeader = defaults.dataHeader;
    	      this.enabled = defaults.enabled;
    	      this.encodingVersion = defaults.encodingVersion;
    	      this.locked = defaults.locked;
    	      this.nonce = defaults.nonce;
    	      this.secretKey = defaults.secretKey;
    	      this.signedHeader = defaults.signedHeader;
    	      this.templateUuid = defaults.templateUuid;
    	      this.useCustomSignString = defaults.useCustomSignString;
    	      this.uuid = defaults.uuid;
        }

        @CustomType.Setter
        public Builder customSignStrings(@Nullable List<String> customSignStrings) {
            this.customSignStrings = customSignStrings;
            return this;
        }
        public Builder customSignStrings(String... customSignStrings) {
            return customSignStrings(List.of(customSignStrings));
        }
        @CustomType.Setter
        public Builder dataHeader(@Nullable String dataHeader) {
            this.dataHeader = dataHeader;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder encodingVersion(@Nullable Integer encodingVersion) {
            this.encodingVersion = encodingVersion;
            return this;
        }
        @CustomType.Setter
        public Builder locked(@Nullable Boolean locked) {
            this.locked = locked;
            return this;
        }
        @CustomType.Setter
        public Builder nonce(@Nullable String nonce) {
            this.nonce = nonce;
            return this;
        }
        @CustomType.Setter
        public Builder secretKey(@Nullable String secretKey) {
            this.secretKey = secretKey;
            return this;
        }
        @CustomType.Setter
        public Builder signedHeader(@Nullable String signedHeader) {
            this.signedHeader = signedHeader;
            return this;
        }
        @CustomType.Setter
        public Builder templateUuid(@Nullable String templateUuid) {
            this.templateUuid = templateUuid;
            return this;
        }
        @CustomType.Setter
        public Builder useCustomSignString(@Nullable Boolean useCustomSignString) {
            this.useCustomSignString = useCustomSignString;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(@Nullable String uuid) {
            this.uuid = uuid;
            return this;
        }
        public GetPropertyRulesBuilderRulesV20230920BehaviorG2oheader build() {
            final var _resultValue = new GetPropertyRulesBuilderRulesV20230920BehaviorG2oheader();
            _resultValue.customSignStrings = customSignStrings;
            _resultValue.dataHeader = dataHeader;
            _resultValue.enabled = enabled;
            _resultValue.encodingVersion = encodingVersion;
            _resultValue.locked = locked;
            _resultValue.nonce = nonce;
            _resultValue.secretKey = secretKey;
            _resultValue.signedHeader = signedHeader;
            _resultValue.templateUuid = templateUuid;
            _resultValue.useCustomSignString = useCustomSignString;
            _resultValue.uuid = uuid;
            return _resultValue;
        }
    }
}
