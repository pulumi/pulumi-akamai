// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IamApiClientPurgeOptionsCpCodeAccessArgs extends com.pulumi.resources.ResourceArgs {

    public static final IamApiClientPurgeOptionsCpCodeAccessArgs Empty = new IamApiClientPurgeOptionsCpCodeAccessArgs();

    /**
     * Whether the API can purge content by all current and new CP codes.
     * 
     */
    @Import(name="allCurrentAndNewCpCodes", required=true)
    private Output<Boolean> allCurrentAndNewCpCodes;

    /**
     * @return Whether the API can purge content by all current and new CP codes.
     * 
     */
    public Output<Boolean> allCurrentAndNewCpCodes() {
        return this.allCurrentAndNewCpCodes;
    }

    /**
     * CP codes the API client can purge.
     * 
     */
    @Import(name="cpCodes")
    private @Nullable Output<List<Integer>> cpCodes;

    /**
     * @return CP codes the API client can purge.
     * 
     */
    public Optional<Output<List<Integer>>> cpCodes() {
        return Optional.ofNullable(this.cpCodes);
    }

    private IamApiClientPurgeOptionsCpCodeAccessArgs() {}

    private IamApiClientPurgeOptionsCpCodeAccessArgs(IamApiClientPurgeOptionsCpCodeAccessArgs $) {
        this.allCurrentAndNewCpCodes = $.allCurrentAndNewCpCodes;
        this.cpCodes = $.cpCodes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IamApiClientPurgeOptionsCpCodeAccessArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IamApiClientPurgeOptionsCpCodeAccessArgs $;

        public Builder() {
            $ = new IamApiClientPurgeOptionsCpCodeAccessArgs();
        }

        public Builder(IamApiClientPurgeOptionsCpCodeAccessArgs defaults) {
            $ = new IamApiClientPurgeOptionsCpCodeAccessArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allCurrentAndNewCpCodes Whether the API can purge content by all current and new CP codes.
         * 
         * @return builder
         * 
         */
        public Builder allCurrentAndNewCpCodes(Output<Boolean> allCurrentAndNewCpCodes) {
            $.allCurrentAndNewCpCodes = allCurrentAndNewCpCodes;
            return this;
        }

        /**
         * @param allCurrentAndNewCpCodes Whether the API can purge content by all current and new CP codes.
         * 
         * @return builder
         * 
         */
        public Builder allCurrentAndNewCpCodes(Boolean allCurrentAndNewCpCodes) {
            return allCurrentAndNewCpCodes(Output.of(allCurrentAndNewCpCodes));
        }

        /**
         * @param cpCodes CP codes the API client can purge.
         * 
         * @return builder
         * 
         */
        public Builder cpCodes(@Nullable Output<List<Integer>> cpCodes) {
            $.cpCodes = cpCodes;
            return this;
        }

        /**
         * @param cpCodes CP codes the API client can purge.
         * 
         * @return builder
         * 
         */
        public Builder cpCodes(List<Integer> cpCodes) {
            return cpCodes(Output.of(cpCodes));
        }

        /**
         * @param cpCodes CP codes the API client can purge.
         * 
         * @return builder
         * 
         */
        public Builder cpCodes(Integer... cpCodes) {
            return cpCodes(List.of(cpCodes));
        }

        public IamApiClientPurgeOptionsCpCodeAccessArgs build() {
            if ($.allCurrentAndNewCpCodes == null) {
                throw new MissingRequiredPropertyException("IamApiClientPurgeOptionsCpCodeAccessArgs", "allCurrentAndNewCpCodes");
            }
            return $;
        }
    }

}
