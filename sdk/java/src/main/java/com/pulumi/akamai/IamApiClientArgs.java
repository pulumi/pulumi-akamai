// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai;

import com.pulumi.akamai.inputs.IamApiClientApiAccessArgs;
import com.pulumi.akamai.inputs.IamApiClientCredentialArgs;
import com.pulumi.akamai.inputs.IamApiClientGroupAccessArgs;
import com.pulumi.akamai.inputs.IamApiClientIpAclArgs;
import com.pulumi.akamai.inputs.IamApiClientPurgeOptionsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IamApiClientArgs extends com.pulumi.resources.ResourceArgs {

    public static final IamApiClientArgs Empty = new IamApiClientArgs();

    /**
     * Enables the API client to manage more than one account.
     * 
     */
    @Import(name="allowAccountSwitch")
    private @Nullable Output<Boolean> allowAccountSwitch;

    /**
     * @return Enables the API client to manage more than one account.
     * 
     */
    public Optional<Output<Boolean>> allowAccountSwitch() {
        return Optional.ofNullable(this.allowAccountSwitch);
    }

    /**
     * The APIs the API client can access.
     * 
     */
    @Import(name="apiAccess", required=true)
    private Output<IamApiClientApiAccessArgs> apiAccess;

    /**
     * @return The APIs the API client can access.
     * 
     */
    public Output<IamApiClientApiAccessArgs> apiAccess() {
        return this.apiAccess;
    }

    /**
     * The API client&#39;s valid users. When the &#39;client_type&#39; is either &#39;CLIENT&#39; or &#39;USER_CLIENT&#39;, you need to specify a single
     * username in an array.
     * 
     */
    @Import(name="authorizedUsers", required=true)
    private Output<List<String>> authorizedUsers;

    /**
     * @return The API client&#39;s valid users. When the &#39;client_type&#39; is either &#39;CLIENT&#39; or &#39;USER_CLIENT&#39;, you need to specify a single
     * username in an array.
     * 
     */
    public Output<List<String>> authorizedUsers() {
        return this.authorizedUsers;
    }

    /**
     * Whether the API client can create a credential for a new API client. The default is false.
     * 
     */
    @Import(name="canAutoCreateCredential")
    private @Nullable Output<Boolean> canAutoCreateCredential;

    /**
     * @return Whether the API client can create a credential for a new API client. The default is false.
     * 
     */
    public Optional<Output<Boolean>> canAutoCreateCredential() {
        return Optional.ofNullable(this.canAutoCreateCredential);
    }

    /**
     * A human-readable description of the API client.
     * 
     */
    @Import(name="clientDescription")
    private @Nullable Output<String> clientDescription;

    /**
     * @return A human-readable description of the API client.
     * 
     */
    public Optional<Output<String>> clientDescription() {
        return Optional.ofNullable(this.clientDescription);
    }

    /**
     * A human-readable name for the API client.
     * 
     */
    @Import(name="clientName", required=true)
    private Output<String> clientName;

    /**
     * @return A human-readable name for the API client.
     * 
     */
    public Output<String> clientName() {
        return this.clientName;
    }

    /**
     * Specifies the API client&#39;s ownership and credential management. &#39;CLIENT&#39; indicates the creator owns and manages the
     * credentials. &#39;USER_CLIENT&#39; indicates another user owns the client and manages the credentials.
     * 
     */
    @Import(name="clientType", required=true)
    private Output<String> clientType;

    /**
     * @return Specifies the API client&#39;s ownership and credential management. &#39;CLIENT&#39; indicates the creator owns and manages the
     * credentials. &#39;USER_CLIENT&#39; indicates another user owns the client and manages the credentials.
     * 
     */
    public Output<String> clientType() {
        return this.clientType;
    }

    @Import(name="credential", required=true)
    private Output<IamApiClientCredentialArgs> credential;

    public Output<IamApiClientCredentialArgs> credential() {
        return this.credential;
    }

    /**
     * Specifies the API client&#39;s group access.
     * 
     */
    @Import(name="groupAccess", required=true)
    private Output<IamApiClientGroupAccessArgs> groupAccess;

    /**
     * @return Specifies the API client&#39;s group access.
     * 
     */
    public Output<IamApiClientGroupAccessArgs> groupAccess() {
        return this.groupAccess;
    }

    /**
     * Specifies the API client&#39;s IP list restriction.
     * 
     */
    @Import(name="ipAcl")
    private @Nullable Output<IamApiClientIpAclArgs> ipAcl;

    /**
     * @return Specifies the API client&#39;s IP list restriction.
     * 
     */
    public Optional<Output<IamApiClientIpAclArgs>> ipAcl() {
        return Optional.ofNullable(this.ipAcl);
    }

    /**
     * Whether to lock or unlock the API client.
     * 
     */
    @Import(name="lock")
    private @Nullable Output<Boolean> lock;

    /**
     * @return Whether to lock or unlock the API client.
     * 
     */
    public Optional<Output<Boolean>> lock() {
        return Optional.ofNullable(this.lock);
    }

    /**
     * Email addresses to notify users when credentials expire.
     * 
     */
    @Import(name="notificationEmails")
    private @Nullable Output<List<String>> notificationEmails;

    /**
     * @return Email addresses to notify users when credentials expire.
     * 
     */
    public Optional<Output<List<String>>> notificationEmails() {
        return Optional.ofNullable(this.notificationEmails);
    }

    /**
     * Configures the API client to access the Fast Purge API. Provide it only if the `apis` attribute includes an `api_name`
     * of `CCU API`.
     * 
     */
    @Import(name="purgeOptions")
    private @Nullable Output<IamApiClientPurgeOptionsArgs> purgeOptions;

    /**
     * @return Configures the API client to access the Fast Purge API. Provide it only if the `apis` attribute includes an `api_name`
     * of `CCU API`.
     * 
     */
    public Optional<Output<IamApiClientPurgeOptionsArgs>> purgeOptions() {
        return Optional.ofNullable(this.purgeOptions);
    }

    private IamApiClientArgs() {}

    private IamApiClientArgs(IamApiClientArgs $) {
        this.allowAccountSwitch = $.allowAccountSwitch;
        this.apiAccess = $.apiAccess;
        this.authorizedUsers = $.authorizedUsers;
        this.canAutoCreateCredential = $.canAutoCreateCredential;
        this.clientDescription = $.clientDescription;
        this.clientName = $.clientName;
        this.clientType = $.clientType;
        this.credential = $.credential;
        this.groupAccess = $.groupAccess;
        this.ipAcl = $.ipAcl;
        this.lock = $.lock;
        this.notificationEmails = $.notificationEmails;
        this.purgeOptions = $.purgeOptions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IamApiClientArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IamApiClientArgs $;

        public Builder() {
            $ = new IamApiClientArgs();
        }

        public Builder(IamApiClientArgs defaults) {
            $ = new IamApiClientArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowAccountSwitch Enables the API client to manage more than one account.
         * 
         * @return builder
         * 
         */
        public Builder allowAccountSwitch(@Nullable Output<Boolean> allowAccountSwitch) {
            $.allowAccountSwitch = allowAccountSwitch;
            return this;
        }

        /**
         * @param allowAccountSwitch Enables the API client to manage more than one account.
         * 
         * @return builder
         * 
         */
        public Builder allowAccountSwitch(Boolean allowAccountSwitch) {
            return allowAccountSwitch(Output.of(allowAccountSwitch));
        }

        /**
         * @param apiAccess The APIs the API client can access.
         * 
         * @return builder
         * 
         */
        public Builder apiAccess(Output<IamApiClientApiAccessArgs> apiAccess) {
            $.apiAccess = apiAccess;
            return this;
        }

        /**
         * @param apiAccess The APIs the API client can access.
         * 
         * @return builder
         * 
         */
        public Builder apiAccess(IamApiClientApiAccessArgs apiAccess) {
            return apiAccess(Output.of(apiAccess));
        }

        /**
         * @param authorizedUsers The API client&#39;s valid users. When the &#39;client_type&#39; is either &#39;CLIENT&#39; or &#39;USER_CLIENT&#39;, you need to specify a single
         * username in an array.
         * 
         * @return builder
         * 
         */
        public Builder authorizedUsers(Output<List<String>> authorizedUsers) {
            $.authorizedUsers = authorizedUsers;
            return this;
        }

        /**
         * @param authorizedUsers The API client&#39;s valid users. When the &#39;client_type&#39; is either &#39;CLIENT&#39; or &#39;USER_CLIENT&#39;, you need to specify a single
         * username in an array.
         * 
         * @return builder
         * 
         */
        public Builder authorizedUsers(List<String> authorizedUsers) {
            return authorizedUsers(Output.of(authorizedUsers));
        }

        /**
         * @param authorizedUsers The API client&#39;s valid users. When the &#39;client_type&#39; is either &#39;CLIENT&#39; or &#39;USER_CLIENT&#39;, you need to specify a single
         * username in an array.
         * 
         * @return builder
         * 
         */
        public Builder authorizedUsers(String... authorizedUsers) {
            return authorizedUsers(List.of(authorizedUsers));
        }

        /**
         * @param canAutoCreateCredential Whether the API client can create a credential for a new API client. The default is false.
         * 
         * @return builder
         * 
         */
        public Builder canAutoCreateCredential(@Nullable Output<Boolean> canAutoCreateCredential) {
            $.canAutoCreateCredential = canAutoCreateCredential;
            return this;
        }

        /**
         * @param canAutoCreateCredential Whether the API client can create a credential for a new API client. The default is false.
         * 
         * @return builder
         * 
         */
        public Builder canAutoCreateCredential(Boolean canAutoCreateCredential) {
            return canAutoCreateCredential(Output.of(canAutoCreateCredential));
        }

        /**
         * @param clientDescription A human-readable description of the API client.
         * 
         * @return builder
         * 
         */
        public Builder clientDescription(@Nullable Output<String> clientDescription) {
            $.clientDescription = clientDescription;
            return this;
        }

        /**
         * @param clientDescription A human-readable description of the API client.
         * 
         * @return builder
         * 
         */
        public Builder clientDescription(String clientDescription) {
            return clientDescription(Output.of(clientDescription));
        }

        /**
         * @param clientName A human-readable name for the API client.
         * 
         * @return builder
         * 
         */
        public Builder clientName(Output<String> clientName) {
            $.clientName = clientName;
            return this;
        }

        /**
         * @param clientName A human-readable name for the API client.
         * 
         * @return builder
         * 
         */
        public Builder clientName(String clientName) {
            return clientName(Output.of(clientName));
        }

        /**
         * @param clientType Specifies the API client&#39;s ownership and credential management. &#39;CLIENT&#39; indicates the creator owns and manages the
         * credentials. &#39;USER_CLIENT&#39; indicates another user owns the client and manages the credentials.
         * 
         * @return builder
         * 
         */
        public Builder clientType(Output<String> clientType) {
            $.clientType = clientType;
            return this;
        }

        /**
         * @param clientType Specifies the API client&#39;s ownership and credential management. &#39;CLIENT&#39; indicates the creator owns and manages the
         * credentials. &#39;USER_CLIENT&#39; indicates another user owns the client and manages the credentials.
         * 
         * @return builder
         * 
         */
        public Builder clientType(String clientType) {
            return clientType(Output.of(clientType));
        }

        public Builder credential(Output<IamApiClientCredentialArgs> credential) {
            $.credential = credential;
            return this;
        }

        public Builder credential(IamApiClientCredentialArgs credential) {
            return credential(Output.of(credential));
        }

        /**
         * @param groupAccess Specifies the API client&#39;s group access.
         * 
         * @return builder
         * 
         */
        public Builder groupAccess(Output<IamApiClientGroupAccessArgs> groupAccess) {
            $.groupAccess = groupAccess;
            return this;
        }

        /**
         * @param groupAccess Specifies the API client&#39;s group access.
         * 
         * @return builder
         * 
         */
        public Builder groupAccess(IamApiClientGroupAccessArgs groupAccess) {
            return groupAccess(Output.of(groupAccess));
        }

        /**
         * @param ipAcl Specifies the API client&#39;s IP list restriction.
         * 
         * @return builder
         * 
         */
        public Builder ipAcl(@Nullable Output<IamApiClientIpAclArgs> ipAcl) {
            $.ipAcl = ipAcl;
            return this;
        }

        /**
         * @param ipAcl Specifies the API client&#39;s IP list restriction.
         * 
         * @return builder
         * 
         */
        public Builder ipAcl(IamApiClientIpAclArgs ipAcl) {
            return ipAcl(Output.of(ipAcl));
        }

        /**
         * @param lock Whether to lock or unlock the API client.
         * 
         * @return builder
         * 
         */
        public Builder lock(@Nullable Output<Boolean> lock) {
            $.lock = lock;
            return this;
        }

        /**
         * @param lock Whether to lock or unlock the API client.
         * 
         * @return builder
         * 
         */
        public Builder lock(Boolean lock) {
            return lock(Output.of(lock));
        }

        /**
         * @param notificationEmails Email addresses to notify users when credentials expire.
         * 
         * @return builder
         * 
         */
        public Builder notificationEmails(@Nullable Output<List<String>> notificationEmails) {
            $.notificationEmails = notificationEmails;
            return this;
        }

        /**
         * @param notificationEmails Email addresses to notify users when credentials expire.
         * 
         * @return builder
         * 
         */
        public Builder notificationEmails(List<String> notificationEmails) {
            return notificationEmails(Output.of(notificationEmails));
        }

        /**
         * @param notificationEmails Email addresses to notify users when credentials expire.
         * 
         * @return builder
         * 
         */
        public Builder notificationEmails(String... notificationEmails) {
            return notificationEmails(List.of(notificationEmails));
        }

        /**
         * @param purgeOptions Configures the API client to access the Fast Purge API. Provide it only if the `apis` attribute includes an `api_name`
         * of `CCU API`.
         * 
         * @return builder
         * 
         */
        public Builder purgeOptions(@Nullable Output<IamApiClientPurgeOptionsArgs> purgeOptions) {
            $.purgeOptions = purgeOptions;
            return this;
        }

        /**
         * @param purgeOptions Configures the API client to access the Fast Purge API. Provide it only if the `apis` attribute includes an `api_name`
         * of `CCU API`.
         * 
         * @return builder
         * 
         */
        public Builder purgeOptions(IamApiClientPurgeOptionsArgs purgeOptions) {
            return purgeOptions(Output.of(purgeOptions));
        }

        public IamApiClientArgs build() {
            if ($.apiAccess == null) {
                throw new MissingRequiredPropertyException("IamApiClientArgs", "apiAccess");
            }
            if ($.authorizedUsers == null) {
                throw new MissingRequiredPropertyException("IamApiClientArgs", "authorizedUsers");
            }
            if ($.clientName == null) {
                throw new MissingRequiredPropertyException("IamApiClientArgs", "clientName");
            }
            if ($.clientType == null) {
                throw new MissingRequiredPropertyException("IamApiClientArgs", "clientType");
            }
            if ($.credential == null) {
                throw new MissingRequiredPropertyException("IamApiClientArgs", "credential");
            }
            if ($.groupAccess == null) {
                throw new MissingRequiredPropertyException("IamApiClientArgs", "groupAccess");
            }
            return $;
        }
    }

}
