// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShape;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShape;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShape;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShape;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShape;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterest extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterest Empty = new GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterest();

    /**
     * Defines a circle with a specified `radius` from its `center` point.
     * 
     */
    @Import(name="circleShapes")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShape> circleShapes;

    /**
     * @return Defines a circle with a specified `radius` from its `center` point.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShape>> circleShapes() {
        return Optional.ofNullable(this.circleShapes);
    }

    @Import(name="pointShapes")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShape> pointShapes;

    public Optional<List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShape>> pointShapes() {
        return Optional.ofNullable(this.pointShapes);
    }

    /**
     * Defines a polygon from a series of connected points.
     * 
     */
    @Import(name="polygonShapes")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShape> polygonShapes;

    /**
     * @return Defines a polygon from a series of connected points.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShape>> polygonShapes() {
        return Optional.ofNullable(this.polygonShapes);
    }

    /**
     * Defines a rectangle&#39;s `width` and `height` relative to an `anchor` point at the top left corner.
     * 
     */
    @Import(name="rectangleShapes")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShape> rectangleShapes;

    /**
     * @return Defines a rectangle&#39;s `width` and `height` relative to an `anchor` point at the top left corner.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShape>> rectangleShapes() {
        return Optional.ofNullable(this.rectangleShapes);
    }

    /**
     * Identifies a combined shape based on a set of other shapes. You can use a full JSON object to represent a union or an array of shapes that describe it.
     * 
     */
    @Import(name="unionShapes")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShape> unionShapes;

    /**
     * @return Identifies a combined shape based on a set of other shapes. You can use a full JSON object to represent a union or an array of shapes that describe it.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShape>> unionShapes() {
        return Optional.ofNullable(this.unionShapes);
    }

    private GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterest() {}

    private GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterest(GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterest $) {
        this.circleShapes = $.circleShapes;
        this.pointShapes = $.pointShapes;
        this.polygonShapes = $.polygonShapes;
        this.rectangleShapes = $.rectangleShapes;
        this.unionShapes = $.unionShapes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterest defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterest $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterest();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterest defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterest(Objects.requireNonNull(defaults));
        }

        /**
         * @param circleShapes Defines a circle with a specified `radius` from its `center` point.
         * 
         * @return builder
         * 
         */
        public Builder circleShapes(@Nullable List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShape> circleShapes) {
            $.circleShapes = circleShapes;
            return this;
        }

        /**
         * @param circleShapes Defines a circle with a specified `radius` from its `center` point.
         * 
         * @return builder
         * 
         */
        public Builder circleShapes(GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShape... circleShapes) {
            return circleShapes(List.of(circleShapes));
        }

        public Builder pointShapes(@Nullable List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShape> pointShapes) {
            $.pointShapes = pointShapes;
            return this;
        }

        public Builder pointShapes(GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShape... pointShapes) {
            return pointShapes(List.of(pointShapes));
        }

        /**
         * @param polygonShapes Defines a polygon from a series of connected points.
         * 
         * @return builder
         * 
         */
        public Builder polygonShapes(@Nullable List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShape> polygonShapes) {
            $.polygonShapes = polygonShapes;
            return this;
        }

        /**
         * @param polygonShapes Defines a polygon from a series of connected points.
         * 
         * @return builder
         * 
         */
        public Builder polygonShapes(GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShape... polygonShapes) {
            return polygonShapes(List.of(polygonShapes));
        }

        /**
         * @param rectangleShapes Defines a rectangle&#39;s `width` and `height` relative to an `anchor` point at the top left corner.
         * 
         * @return builder
         * 
         */
        public Builder rectangleShapes(@Nullable List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShape> rectangleShapes) {
            $.rectangleShapes = rectangleShapes;
            return this;
        }

        /**
         * @param rectangleShapes Defines a rectangle&#39;s `width` and `height` relative to an `anchor` point at the top left corner.
         * 
         * @return builder
         * 
         */
        public Builder rectangleShapes(GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShape... rectangleShapes) {
            return rectangleShapes(List.of(rectangleShapes));
        }

        /**
         * @param unionShapes Identifies a combined shape based on a set of other shapes. You can use a full JSON object to represent a union or an array of shapes that describe it.
         * 
         * @return builder
         * 
         */
        public Builder unionShapes(@Nullable List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShape> unionShapes) {
            $.unionShapes = unionShapes;
            return this;
        }

        /**
         * @param unionShapes Identifies a combined shape based on a set of other shapes. You can use a full JSON object to represent a union or an array of shapes that describe it.
         * 
         * @return builder
         * 
         */
        public Builder unionShapes(GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShape... unionShapes) {
            return unionShapes(List.of(unionShapes));
        }

        public GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterest build() {
            return $;
        }
    }

}
