// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyRulesBuilderRulesV20240109BehaviorVerifyJsonWebTokenForDcpArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetPropertyRulesBuilderRulesV20240109BehaviorVerifyJsonWebTokenForDcpArgs Empty = new GetPropertyRulesBuilderRulesV20240109BehaviorVerifyJsonWebTokenForDcpArgs();

    /**
     * This specifies the authorization group name.
     * 
     */
    @Import(name="authorizations")
    private @Nullable Output<String> authorizations;

    /**
     * @return This specifies the authorization group name.
     * 
     */
    public Optional<Output<String>> authorizations() {
        return Optional.ofNullable(this.authorizations);
    }

    /**
     * This specifies the claim name.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return This specifies the claim name.
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The JWT value comes from the `X-Akamai-DCP-Token` header by default.  Enabling this option allows you to extract it from another header name that you specify.
     * 
     */
    @Import(name="customHeader")
    private @Nullable Output<Boolean> customHeader;

    /**
     * @return The JWT value comes from the `X-Akamai-DCP-Token` header by default.  Enabling this option allows you to extract it from another header name that you specify.
     * 
     */
    public Optional<Output<Boolean>> customHeader() {
        return Optional.ofNullable(this.customHeader);
    }

    /**
     * Verifies JWTs signed with the ES256 algorithm. This signature helps to ensure that the token hasn&#39;t been tampered with.
     * 
     */
    @Import(name="enableEs256")
    private @Nullable Output<Boolean> enableEs256;

    /**
     * @return Verifies JWTs signed with the ES256 algorithm. This signature helps to ensure that the token hasn&#39;t been tampered with.
     * 
     */
    public Optional<Output<Boolean>> enableEs256() {
        return Optional.ofNullable(this.enableEs256);
    }

    /**
     * Verifies JWTs signed with the RS256 algorithm. This signature helps to ensure that the token hasn&#39;t been tampered with.
     * 
     */
    @Import(name="enableRs256")
    private @Nullable Output<Boolean> enableRs256;

    /**
     * @return Verifies JWTs signed with the RS256 algorithm. This signature helps to ensure that the token hasn&#39;t been tampered with.
     * 
     */
    public Optional<Output<Boolean>> enableRs256() {
        return Optional.ofNullable(this.enableRs256);
    }

    /**
     * Allows you to extract the authorization groups stored in the JWT.
     * 
     */
    @Import(name="extractAuthorizations")
    private @Nullable Output<Boolean> extractAuthorizations;

    /**
     * @return Allows you to extract the authorization groups stored in the JWT.
     * 
     */
    public Optional<Output<Boolean>> extractAuthorizations() {
        return Optional.ofNullable(this.extractAuthorizations);
    }

    /**
     * Allows you to extract the client ID claim name stored in JWT.
     * 
     */
    @Import(name="extractClientId")
    private @Nullable Output<Boolean> extractClientId;

    /**
     * @return Allows you to extract the client ID claim name stored in JWT.
     * 
     */
    public Optional<Output<Boolean>> extractClientId() {
        return Optional.ofNullable(this.extractClientId);
    }

    /**
     * Specifies where to get the JWT value from.
     * 
     */
    @Import(name="extractLocation")
    private @Nullable Output<String> extractLocation;

    /**
     * @return Specifies where to get the JWT value from.
     * 
     */
    public Optional<Output<String>> extractLocation() {
        return Optional.ofNullable(this.extractLocation);
    }

    /**
     * Allows you to extract the user name stored in the JWT.
     * 
     */
    @Import(name="extractUserName")
    private @Nullable Output<Boolean> extractUserName;

    /**
     * @return Allows you to extract the user name stored in the JWT.
     * 
     */
    public Optional<Output<Boolean>> extractUserName() {
        return Optional.ofNullable(this.extractUserName);
    }

    /**
     * This specifies the name of the header to extract the JWT value from.
     * 
     */
    @Import(name="headerName")
    private @Nullable Output<String> headerName;

    /**
     * @return This specifies the name of the header to extract the JWT value from.
     * 
     */
    public Optional<Output<String>> headerName() {
        return Optional.ofNullable(this.headerName);
    }

    /**
     * An identifier for the JWT keys collection.
     * 
     */
    @Import(name="jwt")
    private @Nullable Output<String> jwt;

    /**
     * @return An identifier for the JWT keys collection.
     * 
     */
    public Optional<Output<String>> jwt() {
        return Optional.ofNullable(this.jwt);
    }

    /**
     * Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    @Import(name="locked")
    private @Nullable Output<Boolean> locked;

    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Output<Boolean>> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * Specifies the primary location to extract the JWT value from. If the specified option doesn&#39;t include the JWTs, the system checks the secondary one.
     * 
     */
    @Import(name="primaryLocation")
    private @Nullable Output<String> primaryLocation;

    /**
     * @return Specifies the primary location to extract the JWT value from. If the specified option doesn&#39;t include the JWTs, the system checks the secondary one.
     * 
     */
    public Optional<Output<String>> primaryLocation() {
        return Optional.ofNullable(this.primaryLocation);
    }

    /**
     * Specifies the name of the query parameter from which to extract the JWT value.
     * 
     */
    @Import(name="queryParameterName")
    private @Nullable Output<String> queryParameterName;

    /**
     * @return Specifies the name of the query parameter from which to extract the JWT value.
     * 
     */
    public Optional<Output<String>> queryParameterName() {
        return Optional.ofNullable(this.queryParameterName);
    }

    /**
     * This option is for internal usage only.
     * 
     */
    @Import(name="templateUuid")
    private @Nullable Output<String> templateUuid;

    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<Output<String>> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }

    /**
     * This specifies the user name.
     * 
     */
    @Import(name="userName")
    private @Nullable Output<String> userName;

    /**
     * @return This specifies the user name.
     * 
     */
    public Optional<Output<String>> userName() {
        return Optional.ofNullable(this.userName);
    }

    /**
     * A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private GetPropertyRulesBuilderRulesV20240109BehaviorVerifyJsonWebTokenForDcpArgs() {}

    private GetPropertyRulesBuilderRulesV20240109BehaviorVerifyJsonWebTokenForDcpArgs(GetPropertyRulesBuilderRulesV20240109BehaviorVerifyJsonWebTokenForDcpArgs $) {
        this.authorizations = $.authorizations;
        this.clientId = $.clientId;
        this.customHeader = $.customHeader;
        this.enableEs256 = $.enableEs256;
        this.enableRs256 = $.enableRs256;
        this.extractAuthorizations = $.extractAuthorizations;
        this.extractClientId = $.extractClientId;
        this.extractLocation = $.extractLocation;
        this.extractUserName = $.extractUserName;
        this.headerName = $.headerName;
        this.jwt = $.jwt;
        this.locked = $.locked;
        this.primaryLocation = $.primaryLocation;
        this.queryParameterName = $.queryParameterName;
        this.templateUuid = $.templateUuid;
        this.userName = $.userName;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesBuilderRulesV20240109BehaviorVerifyJsonWebTokenForDcpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesBuilderRulesV20240109BehaviorVerifyJsonWebTokenForDcpArgs $;

        public Builder() {
            $ = new GetPropertyRulesBuilderRulesV20240109BehaviorVerifyJsonWebTokenForDcpArgs();
        }

        public Builder(GetPropertyRulesBuilderRulesV20240109BehaviorVerifyJsonWebTokenForDcpArgs defaults) {
            $ = new GetPropertyRulesBuilderRulesV20240109BehaviorVerifyJsonWebTokenForDcpArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorizations This specifies the authorization group name.
         * 
         * @return builder
         * 
         */
        public Builder authorizations(@Nullable Output<String> authorizations) {
            $.authorizations = authorizations;
            return this;
        }

        /**
         * @param authorizations This specifies the authorization group name.
         * 
         * @return builder
         * 
         */
        public Builder authorizations(String authorizations) {
            return authorizations(Output.of(authorizations));
        }

        /**
         * @param clientId This specifies the claim name.
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId This specifies the claim name.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param customHeader The JWT value comes from the `X-Akamai-DCP-Token` header by default.  Enabling this option allows you to extract it from another header name that you specify.
         * 
         * @return builder
         * 
         */
        public Builder customHeader(@Nullable Output<Boolean> customHeader) {
            $.customHeader = customHeader;
            return this;
        }

        /**
         * @param customHeader The JWT value comes from the `X-Akamai-DCP-Token` header by default.  Enabling this option allows you to extract it from another header name that you specify.
         * 
         * @return builder
         * 
         */
        public Builder customHeader(Boolean customHeader) {
            return customHeader(Output.of(customHeader));
        }

        /**
         * @param enableEs256 Verifies JWTs signed with the ES256 algorithm. This signature helps to ensure that the token hasn&#39;t been tampered with.
         * 
         * @return builder
         * 
         */
        public Builder enableEs256(@Nullable Output<Boolean> enableEs256) {
            $.enableEs256 = enableEs256;
            return this;
        }

        /**
         * @param enableEs256 Verifies JWTs signed with the ES256 algorithm. This signature helps to ensure that the token hasn&#39;t been tampered with.
         * 
         * @return builder
         * 
         */
        public Builder enableEs256(Boolean enableEs256) {
            return enableEs256(Output.of(enableEs256));
        }

        /**
         * @param enableRs256 Verifies JWTs signed with the RS256 algorithm. This signature helps to ensure that the token hasn&#39;t been tampered with.
         * 
         * @return builder
         * 
         */
        public Builder enableRs256(@Nullable Output<Boolean> enableRs256) {
            $.enableRs256 = enableRs256;
            return this;
        }

        /**
         * @param enableRs256 Verifies JWTs signed with the RS256 algorithm. This signature helps to ensure that the token hasn&#39;t been tampered with.
         * 
         * @return builder
         * 
         */
        public Builder enableRs256(Boolean enableRs256) {
            return enableRs256(Output.of(enableRs256));
        }

        /**
         * @param extractAuthorizations Allows you to extract the authorization groups stored in the JWT.
         * 
         * @return builder
         * 
         */
        public Builder extractAuthorizations(@Nullable Output<Boolean> extractAuthorizations) {
            $.extractAuthorizations = extractAuthorizations;
            return this;
        }

        /**
         * @param extractAuthorizations Allows you to extract the authorization groups stored in the JWT.
         * 
         * @return builder
         * 
         */
        public Builder extractAuthorizations(Boolean extractAuthorizations) {
            return extractAuthorizations(Output.of(extractAuthorizations));
        }

        /**
         * @param extractClientId Allows you to extract the client ID claim name stored in JWT.
         * 
         * @return builder
         * 
         */
        public Builder extractClientId(@Nullable Output<Boolean> extractClientId) {
            $.extractClientId = extractClientId;
            return this;
        }

        /**
         * @param extractClientId Allows you to extract the client ID claim name stored in JWT.
         * 
         * @return builder
         * 
         */
        public Builder extractClientId(Boolean extractClientId) {
            return extractClientId(Output.of(extractClientId));
        }

        /**
         * @param extractLocation Specifies where to get the JWT value from.
         * 
         * @return builder
         * 
         */
        public Builder extractLocation(@Nullable Output<String> extractLocation) {
            $.extractLocation = extractLocation;
            return this;
        }

        /**
         * @param extractLocation Specifies where to get the JWT value from.
         * 
         * @return builder
         * 
         */
        public Builder extractLocation(String extractLocation) {
            return extractLocation(Output.of(extractLocation));
        }

        /**
         * @param extractUserName Allows you to extract the user name stored in the JWT.
         * 
         * @return builder
         * 
         */
        public Builder extractUserName(@Nullable Output<Boolean> extractUserName) {
            $.extractUserName = extractUserName;
            return this;
        }

        /**
         * @param extractUserName Allows you to extract the user name stored in the JWT.
         * 
         * @return builder
         * 
         */
        public Builder extractUserName(Boolean extractUserName) {
            return extractUserName(Output.of(extractUserName));
        }

        /**
         * @param headerName This specifies the name of the header to extract the JWT value from.
         * 
         * @return builder
         * 
         */
        public Builder headerName(@Nullable Output<String> headerName) {
            $.headerName = headerName;
            return this;
        }

        /**
         * @param headerName This specifies the name of the header to extract the JWT value from.
         * 
         * @return builder
         * 
         */
        public Builder headerName(String headerName) {
            return headerName(Output.of(headerName));
        }

        /**
         * @param jwt An identifier for the JWT keys collection.
         * 
         * @return builder
         * 
         */
        public Builder jwt(@Nullable Output<String> jwt) {
            $.jwt = jwt;
            return this;
        }

        /**
         * @param jwt An identifier for the JWT keys collection.
         * 
         * @return builder
         * 
         */
        public Builder jwt(String jwt) {
            return jwt(Output.of(jwt));
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(@Nullable Output<Boolean> locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(Boolean locked) {
            return locked(Output.of(locked));
        }

        /**
         * @param primaryLocation Specifies the primary location to extract the JWT value from. If the specified option doesn&#39;t include the JWTs, the system checks the secondary one.
         * 
         * @return builder
         * 
         */
        public Builder primaryLocation(@Nullable Output<String> primaryLocation) {
            $.primaryLocation = primaryLocation;
            return this;
        }

        /**
         * @param primaryLocation Specifies the primary location to extract the JWT value from. If the specified option doesn&#39;t include the JWTs, the system checks the secondary one.
         * 
         * @return builder
         * 
         */
        public Builder primaryLocation(String primaryLocation) {
            return primaryLocation(Output.of(primaryLocation));
        }

        /**
         * @param queryParameterName Specifies the name of the query parameter from which to extract the JWT value.
         * 
         * @return builder
         * 
         */
        public Builder queryParameterName(@Nullable Output<String> queryParameterName) {
            $.queryParameterName = queryParameterName;
            return this;
        }

        /**
         * @param queryParameterName Specifies the name of the query parameter from which to extract the JWT value.
         * 
         * @return builder
         * 
         */
        public Builder queryParameterName(String queryParameterName) {
            return queryParameterName(Output.of(queryParameterName));
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(@Nullable Output<String> templateUuid) {
            $.templateUuid = templateUuid;
            return this;
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(String templateUuid) {
            return templateUuid(Output.of(templateUuid));
        }

        /**
         * @param userName This specifies the user name.
         * 
         * @return builder
         * 
         */
        public Builder userName(@Nullable Output<String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName This specifies the user name.
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public GetPropertyRulesBuilderRulesV20240109BehaviorVerifyJsonWebTokenForDcpArgs build() {
            return $;
        }
    }

}
