// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanAppend;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanAspectCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanBackgroundColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanBlur;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanChromaKey;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanComposite;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCompound;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanContrast;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFaceCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFeatureCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFitAndFill;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanGoop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanGrayscale;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanHsl;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanHsv;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfDimension;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfOrientation;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanImQuery;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMaxColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMirror;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMonoHue;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanOpacity;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRegionOfInterestCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRelativeCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRemoveColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanResize;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRotate;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanScale;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanShears;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanTrim;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanUnsharpMask;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThan extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThan Empty = new GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThan();

    @Import(name="appends")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanAppend> appends;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanAppend>> appends() {
        return Optional.ofNullable(this.appends);
    }

    @Import(name="aspectCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanAspectCrop> aspectCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanAspectCrop>> aspectCrops() {
        return Optional.ofNullable(this.aspectCrops);
    }

    @Import(name="backgroundColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanBackgroundColor> backgroundColors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanBackgroundColor>> backgroundColors() {
        return Optional.ofNullable(this.backgroundColors);
    }

    @Import(name="blurs")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanBlur> blurs;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanBlur>> blurs() {
        return Optional.ofNullable(this.blurs);
    }

    @Import(name="chromaKeys")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanChromaKey> chromaKeys;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanChromaKey>> chromaKeys() {
        return Optional.ofNullable(this.chromaKeys);
    }

    @Import(name="composites")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanComposite> composites;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanComposite>> composites() {
        return Optional.ofNullable(this.composites);
    }

    @Import(name="compounds")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCompound> compounds;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCompound>> compounds() {
        return Optional.ofNullable(this.compounds);
    }

    @Import(name="contrasts")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanContrast> contrasts;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanContrast>> contrasts() {
        return Optional.ofNullable(this.contrasts);
    }

    @Import(name="crops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCrop> crops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCrop>> crops() {
        return Optional.ofNullable(this.crops);
    }

    @Import(name="faceCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFaceCrop> faceCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFaceCrop>> faceCrops() {
        return Optional.ofNullable(this.faceCrops);
    }

    @Import(name="featureCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFeatureCrop> featureCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFeatureCrop>> featureCrops() {
        return Optional.ofNullable(this.featureCrops);
    }

    @Import(name="fitAndFills")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFitAndFill> fitAndFills;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFitAndFill>> fitAndFills() {
        return Optional.ofNullable(this.fitAndFills);
    }

    @Import(name="goops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanGoop> goops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanGoop>> goops() {
        return Optional.ofNullable(this.goops);
    }

    @Import(name="grayscales")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanGrayscale> grayscales;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanGrayscale>> grayscales() {
        return Optional.ofNullable(this.grayscales);
    }

    @Import(name="hsls")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanHsl> hsls;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanHsl>> hsls() {
        return Optional.ofNullable(this.hsls);
    }

    @Import(name="hsvs")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanHsv> hsvs;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanHsv>> hsvs() {
        return Optional.ofNullable(this.hsvs);
    }

    @Import(name="ifDimensions")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfDimension> ifDimensions;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfDimension>> ifDimensions() {
        return Optional.ofNullable(this.ifDimensions);
    }

    @Import(name="ifOrientations")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfOrientation> ifOrientations;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfOrientation>> ifOrientations() {
        return Optional.ofNullable(this.ifOrientations);
    }

    @Import(name="imQueries")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanImQuery> imQueries;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanImQuery>> imQueries() {
        return Optional.ofNullable(this.imQueries);
    }

    @Import(name="maxColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMaxColor> maxColors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMaxColor>> maxColors() {
        return Optional.ofNullable(this.maxColors);
    }

    @Import(name="mirrors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMirror> mirrors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMirror>> mirrors() {
        return Optional.ofNullable(this.mirrors);
    }

    @Import(name="monoHues")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMonoHue> monoHues;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMonoHue>> monoHues() {
        return Optional.ofNullable(this.monoHues);
    }

    @Import(name="opacities")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanOpacity> opacities;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanOpacity>> opacities() {
        return Optional.ofNullable(this.opacities);
    }

    @Import(name="regionOfInterestCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRegionOfInterestCrop> regionOfInterestCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRegionOfInterestCrop>> regionOfInterestCrops() {
        return Optional.ofNullable(this.regionOfInterestCrops);
    }

    @Import(name="relativeCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRelativeCrop> relativeCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRelativeCrop>> relativeCrops() {
        return Optional.ofNullable(this.relativeCrops);
    }

    @Import(name="removeColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRemoveColor> removeColors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRemoveColor>> removeColors() {
        return Optional.ofNullable(this.removeColors);
    }

    @Import(name="resizes")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanResize> resizes;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanResize>> resizes() {
        return Optional.ofNullable(this.resizes);
    }

    @Import(name="rotates")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRotate> rotates;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRotate>> rotates() {
        return Optional.ofNullable(this.rotates);
    }

    @Import(name="scales")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanScale> scales;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanScale>> scales() {
        return Optional.ofNullable(this.scales);
    }

    @Import(name="shears")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanShears> shears;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanShears>> shears() {
        return Optional.ofNullable(this.shears);
    }

    @Import(name="trims")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanTrim> trims;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanTrim>> trims() {
        return Optional.ofNullable(this.trims);
    }

    @Import(name="unsharpMasks")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanUnsharpMask> unsharpMasks;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanUnsharpMask>> unsharpMasks() {
        return Optional.ofNullable(this.unsharpMasks);
    }

    private GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThan() {}

    private GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThan(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThan $) {
        this.appends = $.appends;
        this.aspectCrops = $.aspectCrops;
        this.backgroundColors = $.backgroundColors;
        this.blurs = $.blurs;
        this.chromaKeys = $.chromaKeys;
        this.composites = $.composites;
        this.compounds = $.compounds;
        this.contrasts = $.contrasts;
        this.crops = $.crops;
        this.faceCrops = $.faceCrops;
        this.featureCrops = $.featureCrops;
        this.fitAndFills = $.fitAndFills;
        this.goops = $.goops;
        this.grayscales = $.grayscales;
        this.hsls = $.hsls;
        this.hsvs = $.hsvs;
        this.ifDimensions = $.ifDimensions;
        this.ifOrientations = $.ifOrientations;
        this.imQueries = $.imQueries;
        this.maxColors = $.maxColors;
        this.mirrors = $.mirrors;
        this.monoHues = $.monoHues;
        this.opacities = $.opacities;
        this.regionOfInterestCrops = $.regionOfInterestCrops;
        this.relativeCrops = $.relativeCrops;
        this.removeColors = $.removeColors;
        this.resizes = $.resizes;
        this.rotates = $.rotates;
        this.scales = $.scales;
        this.shears = $.shears;
        this.trims = $.trims;
        this.unsharpMasks = $.unsharpMasks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThan defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThan $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThan();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThan defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThan(Objects.requireNonNull(defaults));
        }

        public Builder appends(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanAppend> appends) {
            $.appends = appends;
            return this;
        }

        public Builder appends(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanAppend... appends) {
            return appends(List.of(appends));
        }

        public Builder aspectCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanAspectCrop> aspectCrops) {
            $.aspectCrops = aspectCrops;
            return this;
        }

        public Builder aspectCrops(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanAspectCrop... aspectCrops) {
            return aspectCrops(List.of(aspectCrops));
        }

        public Builder backgroundColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanBackgroundColor> backgroundColors) {
            $.backgroundColors = backgroundColors;
            return this;
        }

        public Builder backgroundColors(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanBackgroundColor... backgroundColors) {
            return backgroundColors(List.of(backgroundColors));
        }

        public Builder blurs(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanBlur> blurs) {
            $.blurs = blurs;
            return this;
        }

        public Builder blurs(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanBlur... blurs) {
            return blurs(List.of(blurs));
        }

        public Builder chromaKeys(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanChromaKey> chromaKeys) {
            $.chromaKeys = chromaKeys;
            return this;
        }

        public Builder chromaKeys(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanChromaKey... chromaKeys) {
            return chromaKeys(List.of(chromaKeys));
        }

        public Builder composites(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanComposite> composites) {
            $.composites = composites;
            return this;
        }

        public Builder composites(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanComposite... composites) {
            return composites(List.of(composites));
        }

        public Builder compounds(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCompound> compounds) {
            $.compounds = compounds;
            return this;
        }

        public Builder compounds(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCompound... compounds) {
            return compounds(List.of(compounds));
        }

        public Builder contrasts(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanContrast> contrasts) {
            $.contrasts = contrasts;
            return this;
        }

        public Builder contrasts(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanContrast... contrasts) {
            return contrasts(List.of(contrasts));
        }

        public Builder crops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCrop> crops) {
            $.crops = crops;
            return this;
        }

        public Builder crops(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCrop... crops) {
            return crops(List.of(crops));
        }

        public Builder faceCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFaceCrop> faceCrops) {
            $.faceCrops = faceCrops;
            return this;
        }

        public Builder faceCrops(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFaceCrop... faceCrops) {
            return faceCrops(List.of(faceCrops));
        }

        public Builder featureCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFeatureCrop> featureCrops) {
            $.featureCrops = featureCrops;
            return this;
        }

        public Builder featureCrops(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFeatureCrop... featureCrops) {
            return featureCrops(List.of(featureCrops));
        }

        public Builder fitAndFills(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFitAndFill> fitAndFills) {
            $.fitAndFills = fitAndFills;
            return this;
        }

        public Builder fitAndFills(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFitAndFill... fitAndFills) {
            return fitAndFills(List.of(fitAndFills));
        }

        public Builder goops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanGoop> goops) {
            $.goops = goops;
            return this;
        }

        public Builder goops(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanGoop... goops) {
            return goops(List.of(goops));
        }

        public Builder grayscales(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanGrayscale> grayscales) {
            $.grayscales = grayscales;
            return this;
        }

        public Builder grayscales(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanGrayscale... grayscales) {
            return grayscales(List.of(grayscales));
        }

        public Builder hsls(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanHsl> hsls) {
            $.hsls = hsls;
            return this;
        }

        public Builder hsls(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanHsl... hsls) {
            return hsls(List.of(hsls));
        }

        public Builder hsvs(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanHsv> hsvs) {
            $.hsvs = hsvs;
            return this;
        }

        public Builder hsvs(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanHsv... hsvs) {
            return hsvs(List.of(hsvs));
        }

        public Builder ifDimensions(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfDimension> ifDimensions) {
            $.ifDimensions = ifDimensions;
            return this;
        }

        public Builder ifDimensions(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfDimension... ifDimensions) {
            return ifDimensions(List.of(ifDimensions));
        }

        public Builder ifOrientations(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfOrientation> ifOrientations) {
            $.ifOrientations = ifOrientations;
            return this;
        }

        public Builder ifOrientations(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfOrientation... ifOrientations) {
            return ifOrientations(List.of(ifOrientations));
        }

        public Builder imQueries(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanImQuery> imQueries) {
            $.imQueries = imQueries;
            return this;
        }

        public Builder imQueries(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanImQuery... imQueries) {
            return imQueries(List.of(imQueries));
        }

        public Builder maxColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMaxColor> maxColors) {
            $.maxColors = maxColors;
            return this;
        }

        public Builder maxColors(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMaxColor... maxColors) {
            return maxColors(List.of(maxColors));
        }

        public Builder mirrors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMirror> mirrors) {
            $.mirrors = mirrors;
            return this;
        }

        public Builder mirrors(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMirror... mirrors) {
            return mirrors(List.of(mirrors));
        }

        public Builder monoHues(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMonoHue> monoHues) {
            $.monoHues = monoHues;
            return this;
        }

        public Builder monoHues(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMonoHue... monoHues) {
            return monoHues(List.of(monoHues));
        }

        public Builder opacities(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanOpacity> opacities) {
            $.opacities = opacities;
            return this;
        }

        public Builder opacities(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanOpacity... opacities) {
            return opacities(List.of(opacities));
        }

        public Builder regionOfInterestCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRegionOfInterestCrop> regionOfInterestCrops) {
            $.regionOfInterestCrops = regionOfInterestCrops;
            return this;
        }

        public Builder regionOfInterestCrops(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRegionOfInterestCrop... regionOfInterestCrops) {
            return regionOfInterestCrops(List.of(regionOfInterestCrops));
        }

        public Builder relativeCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRelativeCrop> relativeCrops) {
            $.relativeCrops = relativeCrops;
            return this;
        }

        public Builder relativeCrops(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRelativeCrop... relativeCrops) {
            return relativeCrops(List.of(relativeCrops));
        }

        public Builder removeColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRemoveColor> removeColors) {
            $.removeColors = removeColors;
            return this;
        }

        public Builder removeColors(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRemoveColor... removeColors) {
            return removeColors(List.of(removeColors));
        }

        public Builder resizes(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanResize> resizes) {
            $.resizes = resizes;
            return this;
        }

        public Builder resizes(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanResize... resizes) {
            return resizes(List.of(resizes));
        }

        public Builder rotates(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRotate> rotates) {
            $.rotates = rotates;
            return this;
        }

        public Builder rotates(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRotate... rotates) {
            return rotates(List.of(rotates));
        }

        public Builder scales(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanScale> scales) {
            $.scales = scales;
            return this;
        }

        public Builder scales(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanScale... scales) {
            return scales(List.of(scales));
        }

        public Builder shears(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanShears> shears) {
            $.shears = shears;
            return this;
        }

        public Builder shears(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanShears... shears) {
            return shears(List.of(shears));
        }

        public Builder trims(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanTrim> trims) {
            $.trims = trims;
            return this;
        }

        public Builder trims(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanTrim... trims) {
            return trims(List.of(trims));
        }

        public Builder unsharpMasks(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanUnsharpMask> unsharpMasks) {
            $.unsharpMasks = unsharpMasks;
            return this;
        }

        public Builder unsharpMasks(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanUnsharpMask... unsharpMasks) {
            return unsharpMasks(List.of(unsharpMasks));
        }

        public GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThan build() {
            return $;
        }
    }

}
