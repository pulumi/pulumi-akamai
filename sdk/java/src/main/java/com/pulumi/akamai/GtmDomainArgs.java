// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GtmDomainArgs extends com.pulumi.resources.ResourceArgs {

    public static final GtmDomainArgs Empty = new GtmDomainArgs();

    @Import(name="cnameCoalescingEnabled")
    private @Nullable Output<Boolean> cnameCoalescingEnabled;

    public Optional<Output<Boolean>> cnameCoalescingEnabled() {
        return Optional.ofNullable(this.cnameCoalescingEnabled);
    }

    @Import(name="comment")
    private @Nullable Output<String> comment;

    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="contract")
    private @Nullable Output<String> contract;

    public Optional<Output<String>> contract() {
        return Optional.ofNullable(this.contract);
    }

    @Import(name="defaultErrorPenalty")
    private @Nullable Output<Integer> defaultErrorPenalty;

    public Optional<Output<Integer>> defaultErrorPenalty() {
        return Optional.ofNullable(this.defaultErrorPenalty);
    }

    @Import(name="defaultSslClientCertificate")
    private @Nullable Output<String> defaultSslClientCertificate;

    public Optional<Output<String>> defaultSslClientCertificate() {
        return Optional.ofNullable(this.defaultSslClientCertificate);
    }

    @Import(name="defaultSslClientPrivateKey")
    private @Nullable Output<String> defaultSslClientPrivateKey;

    public Optional<Output<String>> defaultSslClientPrivateKey() {
        return Optional.ofNullable(this.defaultSslClientPrivateKey);
    }

    @Import(name="defaultTimeoutPenalty")
    private @Nullable Output<Integer> defaultTimeoutPenalty;

    public Optional<Output<Integer>> defaultTimeoutPenalty() {
        return Optional.ofNullable(this.defaultTimeoutPenalty);
    }

    @Import(name="emailNotificationLists")
    private @Nullable Output<List<String>> emailNotificationLists;

    public Optional<Output<List<String>>> emailNotificationLists() {
        return Optional.ofNullable(this.emailNotificationLists);
    }

    @Import(name="endUserMappingEnabled")
    private @Nullable Output<Boolean> endUserMappingEnabled;

    public Optional<Output<Boolean>> endUserMappingEnabled() {
        return Optional.ofNullable(this.endUserMappingEnabled);
    }

    @Import(name="group")
    private @Nullable Output<String> group;

    public Optional<Output<String>> group() {
        return Optional.ofNullable(this.group);
    }

    @Import(name="loadFeedback")
    private @Nullable Output<Boolean> loadFeedback;

    public Optional<Output<Boolean>> loadFeedback() {
        return Optional.ofNullable(this.loadFeedback);
    }

    @Import(name="loadImbalancePercentage")
    private @Nullable Output<Double> loadImbalancePercentage;

    public Optional<Output<Double>> loadImbalancePercentage() {
        return Optional.ofNullable(this.loadImbalancePercentage);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * If set (true) we will sign the domain&#39;s resource records so that they can be validated by a validating resolver.
     * 
     */
    @Import(name="signAndServe")
    private @Nullable Output<Boolean> signAndServe;

    /**
     * @return If set (true) we will sign the domain&#39;s resource records so that they can be validated by a validating resolver.
     * 
     */
    public Optional<Output<Boolean>> signAndServe() {
        return Optional.ofNullable(this.signAndServe);
    }

    /**
     * The signing algorithm to use for signAndServe. One of the following values: RSA_SHA1, RSA_SHA256, RSA_SHA512,
     * ECDSA_P256_SHA256, ECDSA_P384_SHA384, ED25519, ED448.
     * 
     */
    @Import(name="signAndServeAlgorithm")
    private @Nullable Output<String> signAndServeAlgorithm;

    /**
     * @return The signing algorithm to use for signAndServe. One of the following values: RSA_SHA1, RSA_SHA256, RSA_SHA512,
     * ECDSA_P256_SHA256, ECDSA_P384_SHA384, ED25519, ED448.
     * 
     */
    public Optional<Output<String>> signAndServeAlgorithm() {
        return Optional.ofNullable(this.signAndServeAlgorithm);
    }

    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    @Import(name="waitOnComplete")
    private @Nullable Output<Boolean> waitOnComplete;

    public Optional<Output<Boolean>> waitOnComplete() {
        return Optional.ofNullable(this.waitOnComplete);
    }

    private GtmDomainArgs() {}

    private GtmDomainArgs(GtmDomainArgs $) {
        this.cnameCoalescingEnabled = $.cnameCoalescingEnabled;
        this.comment = $.comment;
        this.contract = $.contract;
        this.defaultErrorPenalty = $.defaultErrorPenalty;
        this.defaultSslClientCertificate = $.defaultSslClientCertificate;
        this.defaultSslClientPrivateKey = $.defaultSslClientPrivateKey;
        this.defaultTimeoutPenalty = $.defaultTimeoutPenalty;
        this.emailNotificationLists = $.emailNotificationLists;
        this.endUserMappingEnabled = $.endUserMappingEnabled;
        this.group = $.group;
        this.loadFeedback = $.loadFeedback;
        this.loadImbalancePercentage = $.loadImbalancePercentage;
        this.name = $.name;
        this.signAndServe = $.signAndServe;
        this.signAndServeAlgorithm = $.signAndServeAlgorithm;
        this.type = $.type;
        this.waitOnComplete = $.waitOnComplete;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GtmDomainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GtmDomainArgs $;

        public Builder() {
            $ = new GtmDomainArgs();
        }

        public Builder(GtmDomainArgs defaults) {
            $ = new GtmDomainArgs(Objects.requireNonNull(defaults));
        }

        public Builder cnameCoalescingEnabled(@Nullable Output<Boolean> cnameCoalescingEnabled) {
            $.cnameCoalescingEnabled = cnameCoalescingEnabled;
            return this;
        }

        public Builder cnameCoalescingEnabled(Boolean cnameCoalescingEnabled) {
            return cnameCoalescingEnabled(Output.of(cnameCoalescingEnabled));
        }

        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        public Builder contract(@Nullable Output<String> contract) {
            $.contract = contract;
            return this;
        }

        public Builder contract(String contract) {
            return contract(Output.of(contract));
        }

        public Builder defaultErrorPenalty(@Nullable Output<Integer> defaultErrorPenalty) {
            $.defaultErrorPenalty = defaultErrorPenalty;
            return this;
        }

        public Builder defaultErrorPenalty(Integer defaultErrorPenalty) {
            return defaultErrorPenalty(Output.of(defaultErrorPenalty));
        }

        public Builder defaultSslClientCertificate(@Nullable Output<String> defaultSslClientCertificate) {
            $.defaultSslClientCertificate = defaultSslClientCertificate;
            return this;
        }

        public Builder defaultSslClientCertificate(String defaultSslClientCertificate) {
            return defaultSslClientCertificate(Output.of(defaultSslClientCertificate));
        }

        public Builder defaultSslClientPrivateKey(@Nullable Output<String> defaultSslClientPrivateKey) {
            $.defaultSslClientPrivateKey = defaultSslClientPrivateKey;
            return this;
        }

        public Builder defaultSslClientPrivateKey(String defaultSslClientPrivateKey) {
            return defaultSslClientPrivateKey(Output.of(defaultSslClientPrivateKey));
        }

        public Builder defaultTimeoutPenalty(@Nullable Output<Integer> defaultTimeoutPenalty) {
            $.defaultTimeoutPenalty = defaultTimeoutPenalty;
            return this;
        }

        public Builder defaultTimeoutPenalty(Integer defaultTimeoutPenalty) {
            return defaultTimeoutPenalty(Output.of(defaultTimeoutPenalty));
        }

        public Builder emailNotificationLists(@Nullable Output<List<String>> emailNotificationLists) {
            $.emailNotificationLists = emailNotificationLists;
            return this;
        }

        public Builder emailNotificationLists(List<String> emailNotificationLists) {
            return emailNotificationLists(Output.of(emailNotificationLists));
        }

        public Builder emailNotificationLists(String... emailNotificationLists) {
            return emailNotificationLists(List.of(emailNotificationLists));
        }

        public Builder endUserMappingEnabled(@Nullable Output<Boolean> endUserMappingEnabled) {
            $.endUserMappingEnabled = endUserMappingEnabled;
            return this;
        }

        public Builder endUserMappingEnabled(Boolean endUserMappingEnabled) {
            return endUserMappingEnabled(Output.of(endUserMappingEnabled));
        }

        public Builder group(@Nullable Output<String> group) {
            $.group = group;
            return this;
        }

        public Builder group(String group) {
            return group(Output.of(group));
        }

        public Builder loadFeedback(@Nullable Output<Boolean> loadFeedback) {
            $.loadFeedback = loadFeedback;
            return this;
        }

        public Builder loadFeedback(Boolean loadFeedback) {
            return loadFeedback(Output.of(loadFeedback));
        }

        public Builder loadImbalancePercentage(@Nullable Output<Double> loadImbalancePercentage) {
            $.loadImbalancePercentage = loadImbalancePercentage;
            return this;
        }

        public Builder loadImbalancePercentage(Double loadImbalancePercentage) {
            return loadImbalancePercentage(Output.of(loadImbalancePercentage));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param signAndServe If set (true) we will sign the domain&#39;s resource records so that they can be validated by a validating resolver.
         * 
         * @return builder
         * 
         */
        public Builder signAndServe(@Nullable Output<Boolean> signAndServe) {
            $.signAndServe = signAndServe;
            return this;
        }

        /**
         * @param signAndServe If set (true) we will sign the domain&#39;s resource records so that they can be validated by a validating resolver.
         * 
         * @return builder
         * 
         */
        public Builder signAndServe(Boolean signAndServe) {
            return signAndServe(Output.of(signAndServe));
        }

        /**
         * @param signAndServeAlgorithm The signing algorithm to use for signAndServe. One of the following values: RSA_SHA1, RSA_SHA256, RSA_SHA512,
         * ECDSA_P256_SHA256, ECDSA_P384_SHA384, ED25519, ED448.
         * 
         * @return builder
         * 
         */
        public Builder signAndServeAlgorithm(@Nullable Output<String> signAndServeAlgorithm) {
            $.signAndServeAlgorithm = signAndServeAlgorithm;
            return this;
        }

        /**
         * @param signAndServeAlgorithm The signing algorithm to use for signAndServe. One of the following values: RSA_SHA1, RSA_SHA256, RSA_SHA512,
         * ECDSA_P256_SHA256, ECDSA_P384_SHA384, ED25519, ED448.
         * 
         * @return builder
         * 
         */
        public Builder signAndServeAlgorithm(String signAndServeAlgorithm) {
            return signAndServeAlgorithm(Output.of(signAndServeAlgorithm));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder waitOnComplete(@Nullable Output<Boolean> waitOnComplete) {
            $.waitOnComplete = waitOnComplete;
            return this;
        }

        public Builder waitOnComplete(Boolean waitOnComplete) {
            return waitOnComplete(Output.of(waitOnComplete));
        }

        public GtmDomainArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("GtmDomainArgs", "type");
            }
            return $;
        }
    }

}
