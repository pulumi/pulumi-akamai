// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppSecEvalState extends com.pulumi.resources.ResourceArgs {

    public static final AppSecEvalState Empty = new AppSecEvalState();

    /**
     * Unique identifier of the security configuration
     * 
     */
    @Import(name="configId")
    private @Nullable Output<Integer> configId;

    /**
     * @return Unique identifier of the security configuration
     * 
     */
    public Optional<Output<Integer>> configId() {
        return Optional.ofNullable(this.configId);
    }

    /**
     * Versioning information for the Kona Rule Set currently in use in production
     * 
     */
    @Import(name="currentRuleset")
    private @Nullable Output<String> currentRuleset;

    /**
     * @return Versioning information for the Kona Rule Set currently in use in production
     * 
     */
    public Optional<Output<String>> currentRuleset() {
        return Optional.ofNullable(this.currentRuleset);
    }

    /**
     * Evaluation mode (ASE_AUTO or ASE_MANUAL)
     * 
     */
    @Import(name="evalMode")
    private @Nullable Output<String> evalMode;

    /**
     * @return Evaluation mode (ASE_AUTO or ASE_MANUAL)
     * 
     */
    public Optional<Output<String>> evalMode() {
        return Optional.ofNullable(this.evalMode);
    }

    /**
     * Evaluation mode operation (START, STOP, RESTART, UPDATE or COMPLETE)
     * 
     */
    @Import(name="evalOperation")
    private @Nullable Output<String> evalOperation;

    /**
     * @return Evaluation mode operation (START, STOP, RESTART, UPDATE or COMPLETE)
     * 
     */
    public Optional<Output<String>> evalOperation() {
        return Optional.ofNullable(this.evalOperation);
    }

    /**
     * Whether an evaluation is currently in progress
     * 
     */
    @Import(name="evalStatus")
    private @Nullable Output<String> evalStatus;

    /**
     * @return Whether an evaluation is currently in progress
     * 
     */
    public Optional<Output<String>> evalStatus() {
        return Optional.ofNullable(this.evalStatus);
    }

    /**
     * Versioning information for the Kona Rule Set being evaluated
     * 
     */
    @Import(name="evaluatingRuleset")
    private @Nullable Output<String> evaluatingRuleset;

    /**
     * @return Versioning information for the Kona Rule Set being evaluated
     * 
     */
    public Optional<Output<String>> evaluatingRuleset() {
        return Optional.ofNullable(this.evaluatingRuleset);
    }

    /**
     * Date when the evaluation period ends
     * 
     */
    @Import(name="expirationDate")
    private @Nullable Output<String> expirationDate;

    /**
     * @return Date when the evaluation period ends
     * 
     */
    public Optional<Output<String>> expirationDate() {
        return Optional.ofNullable(this.expirationDate);
    }

    /**
     * Unique identifier of the security policy
     * 
     */
    @Import(name="securityPolicyId")
    private @Nullable Output<String> securityPolicyId;

    /**
     * @return Unique identifier of the security policy
     * 
     */
    public Optional<Output<String>> securityPolicyId() {
        return Optional.ofNullable(this.securityPolicyId);
    }

    private AppSecEvalState() {}

    private AppSecEvalState(AppSecEvalState $) {
        this.configId = $.configId;
        this.currentRuleset = $.currentRuleset;
        this.evalMode = $.evalMode;
        this.evalOperation = $.evalOperation;
        this.evalStatus = $.evalStatus;
        this.evaluatingRuleset = $.evaluatingRuleset;
        this.expirationDate = $.expirationDate;
        this.securityPolicyId = $.securityPolicyId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppSecEvalState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppSecEvalState $;

        public Builder() {
            $ = new AppSecEvalState();
        }

        public Builder(AppSecEvalState defaults) {
            $ = new AppSecEvalState(Objects.requireNonNull(defaults));
        }

        /**
         * @param configId Unique identifier of the security configuration
         * 
         * @return builder
         * 
         */
        public Builder configId(@Nullable Output<Integer> configId) {
            $.configId = configId;
            return this;
        }

        /**
         * @param configId Unique identifier of the security configuration
         * 
         * @return builder
         * 
         */
        public Builder configId(Integer configId) {
            return configId(Output.of(configId));
        }

        /**
         * @param currentRuleset Versioning information for the Kona Rule Set currently in use in production
         * 
         * @return builder
         * 
         */
        public Builder currentRuleset(@Nullable Output<String> currentRuleset) {
            $.currentRuleset = currentRuleset;
            return this;
        }

        /**
         * @param currentRuleset Versioning information for the Kona Rule Set currently in use in production
         * 
         * @return builder
         * 
         */
        public Builder currentRuleset(String currentRuleset) {
            return currentRuleset(Output.of(currentRuleset));
        }

        /**
         * @param evalMode Evaluation mode (ASE_AUTO or ASE_MANUAL)
         * 
         * @return builder
         * 
         */
        public Builder evalMode(@Nullable Output<String> evalMode) {
            $.evalMode = evalMode;
            return this;
        }

        /**
         * @param evalMode Evaluation mode (ASE_AUTO or ASE_MANUAL)
         * 
         * @return builder
         * 
         */
        public Builder evalMode(String evalMode) {
            return evalMode(Output.of(evalMode));
        }

        /**
         * @param evalOperation Evaluation mode operation (START, STOP, RESTART, UPDATE or COMPLETE)
         * 
         * @return builder
         * 
         */
        public Builder evalOperation(@Nullable Output<String> evalOperation) {
            $.evalOperation = evalOperation;
            return this;
        }

        /**
         * @param evalOperation Evaluation mode operation (START, STOP, RESTART, UPDATE or COMPLETE)
         * 
         * @return builder
         * 
         */
        public Builder evalOperation(String evalOperation) {
            return evalOperation(Output.of(evalOperation));
        }

        /**
         * @param evalStatus Whether an evaluation is currently in progress
         * 
         * @return builder
         * 
         */
        public Builder evalStatus(@Nullable Output<String> evalStatus) {
            $.evalStatus = evalStatus;
            return this;
        }

        /**
         * @param evalStatus Whether an evaluation is currently in progress
         * 
         * @return builder
         * 
         */
        public Builder evalStatus(String evalStatus) {
            return evalStatus(Output.of(evalStatus));
        }

        /**
         * @param evaluatingRuleset Versioning information for the Kona Rule Set being evaluated
         * 
         * @return builder
         * 
         */
        public Builder evaluatingRuleset(@Nullable Output<String> evaluatingRuleset) {
            $.evaluatingRuleset = evaluatingRuleset;
            return this;
        }

        /**
         * @param evaluatingRuleset Versioning information for the Kona Rule Set being evaluated
         * 
         * @return builder
         * 
         */
        public Builder evaluatingRuleset(String evaluatingRuleset) {
            return evaluatingRuleset(Output.of(evaluatingRuleset));
        }

        /**
         * @param expirationDate Date when the evaluation period ends
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(@Nullable Output<String> expirationDate) {
            $.expirationDate = expirationDate;
            return this;
        }

        /**
         * @param expirationDate Date when the evaluation period ends
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(String expirationDate) {
            return expirationDate(Output.of(expirationDate));
        }

        /**
         * @param securityPolicyId Unique identifier of the security policy
         * 
         * @return builder
         * 
         */
        public Builder securityPolicyId(@Nullable Output<String> securityPolicyId) {
            $.securityPolicyId = securityPolicyId;
            return this;
        }

        /**
         * @param securityPolicyId Unique identifier of the security policy
         * 
         * @return builder
         * 
         */
        public Builder securityPolicyId(String securityPolicyId) {
            return securityPolicyId(Output.of(securityPolicyId));
        }

        public AppSecEvalState build() {
            return $;
        }
    }

}
