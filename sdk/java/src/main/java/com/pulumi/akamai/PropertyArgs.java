// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai;

import com.pulumi.akamai.inputs.PropertyHostnameArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PropertyArgs extends com.pulumi.resources.ResourceArgs {

    public static final PropertyArgs Empty = new PropertyArgs();

    /**
     * Contract ID to be assigned to the Property
     * 
     */
    @Import(name="contractId", required=true)
    private Output<String> contractId;

    /**
     * @return Contract ID to be assigned to the Property
     * 
     */
    public Output<String> contractId() {
        return this.contractId;
    }

    /**
     * Group ID to be assigned to the Property
     * 
     */
    @Import(name="groupId", required=true)
    private Output<String> groupId;

    /**
     * @return Group ID to be assigned to the Property
     * 
     */
    public Output<String> groupId() {
        return this.groupId;
    }

    @Import(name="hostnames")
    private @Nullable Output<List<PropertyHostnameArgs>> hostnames;

    public Optional<Output<List<PropertyHostnameArgs>>> hostnames() {
        return Optional.ofNullable(this.hostnames);
    }

    /**
     * Name to give to the Property (must be unique)
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name to give to the Property (must be unique)
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Product ID to be assigned to the Property
     * 
     */
    @Import(name="productId", required=true)
    private Output<String> productId;

    /**
     * @return Product ID to be assigned to the Property
     * 
     */
    public Output<String> productId() {
        return this.productId;
    }

    /**
     * Property ID
     * 
     */
    @Import(name="propertyId")
    private @Nullable Output<String> propertyId;

    /**
     * @return Property ID
     * 
     */
    public Optional<Output<String>> propertyId() {
        return Optional.ofNullable(this.propertyId);
    }

    /**
     * Specify the rule format version (defaults to latest version available when created)
     * 
     */
    @Import(name="ruleFormat")
    private @Nullable Output<String> ruleFormat;

    /**
     * @return Specify the rule format version (defaults to latest version available when created)
     * 
     */
    public Optional<Output<String>> ruleFormat() {
        return Optional.ofNullable(this.ruleFormat);
    }

    /**
     * Property Rules as JSON
     * 
     */
    @Import(name="rules")
    private @Nullable Output<String> rules;

    /**
     * @return Property Rules as JSON
     * 
     */
    public Optional<Output<String>> rules() {
        return Optional.ofNullable(this.rules);
    }

    /**
     * Specifies whether hostname bucket is used with this property. It allows you to add or remove property hostnames without
     * incrementing property versions.
     * 
     */
    @Import(name="useHostnameBucket")
    private @Nullable Output<Boolean> useHostnameBucket;

    /**
     * @return Specifies whether hostname bucket is used with this property. It allows you to add or remove property hostnames without
     * incrementing property versions.
     * 
     */
    public Optional<Output<Boolean>> useHostnameBucket() {
        return Optional.ofNullable(this.useHostnameBucket);
    }

    /**
     * Property version notes
     * 
     */
    @Import(name="versionNotes")
    private @Nullable Output<String> versionNotes;

    /**
     * @return Property version notes
     * 
     */
    public Optional<Output<String>> versionNotes() {
        return Optional.ofNullable(this.versionNotes);
    }

    private PropertyArgs() {}

    private PropertyArgs(PropertyArgs $) {
        this.contractId = $.contractId;
        this.groupId = $.groupId;
        this.hostnames = $.hostnames;
        this.name = $.name;
        this.productId = $.productId;
        this.propertyId = $.propertyId;
        this.ruleFormat = $.ruleFormat;
        this.rules = $.rules;
        this.useHostnameBucket = $.useHostnameBucket;
        this.versionNotes = $.versionNotes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PropertyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PropertyArgs $;

        public Builder() {
            $ = new PropertyArgs();
        }

        public Builder(PropertyArgs defaults) {
            $ = new PropertyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contractId Contract ID to be assigned to the Property
         * 
         * @return builder
         * 
         */
        public Builder contractId(Output<String> contractId) {
            $.contractId = contractId;
            return this;
        }

        /**
         * @param contractId Contract ID to be assigned to the Property
         * 
         * @return builder
         * 
         */
        public Builder contractId(String contractId) {
            return contractId(Output.of(contractId));
        }

        /**
         * @param groupId Group ID to be assigned to the Property
         * 
         * @return builder
         * 
         */
        public Builder groupId(Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId Group ID to be assigned to the Property
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        public Builder hostnames(@Nullable Output<List<PropertyHostnameArgs>> hostnames) {
            $.hostnames = hostnames;
            return this;
        }

        public Builder hostnames(List<PropertyHostnameArgs> hostnames) {
            return hostnames(Output.of(hostnames));
        }

        public Builder hostnames(PropertyHostnameArgs... hostnames) {
            return hostnames(List.of(hostnames));
        }

        /**
         * @param name Name to give to the Property (must be unique)
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name to give to the Property (must be unique)
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param productId Product ID to be assigned to the Property
         * 
         * @return builder
         * 
         */
        public Builder productId(Output<String> productId) {
            $.productId = productId;
            return this;
        }

        /**
         * @param productId Product ID to be assigned to the Property
         * 
         * @return builder
         * 
         */
        public Builder productId(String productId) {
            return productId(Output.of(productId));
        }

        /**
         * @param propertyId Property ID
         * 
         * @return builder
         * 
         */
        public Builder propertyId(@Nullable Output<String> propertyId) {
            $.propertyId = propertyId;
            return this;
        }

        /**
         * @param propertyId Property ID
         * 
         * @return builder
         * 
         */
        public Builder propertyId(String propertyId) {
            return propertyId(Output.of(propertyId));
        }

        /**
         * @param ruleFormat Specify the rule format version (defaults to latest version available when created)
         * 
         * @return builder
         * 
         */
        public Builder ruleFormat(@Nullable Output<String> ruleFormat) {
            $.ruleFormat = ruleFormat;
            return this;
        }

        /**
         * @param ruleFormat Specify the rule format version (defaults to latest version available when created)
         * 
         * @return builder
         * 
         */
        public Builder ruleFormat(String ruleFormat) {
            return ruleFormat(Output.of(ruleFormat));
        }

        /**
         * @param rules Property Rules as JSON
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable Output<String> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules Property Rules as JSON
         * 
         * @return builder
         * 
         */
        public Builder rules(String rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param useHostnameBucket Specifies whether hostname bucket is used with this property. It allows you to add or remove property hostnames without
         * incrementing property versions.
         * 
         * @return builder
         * 
         */
        public Builder useHostnameBucket(@Nullable Output<Boolean> useHostnameBucket) {
            $.useHostnameBucket = useHostnameBucket;
            return this;
        }

        /**
         * @param useHostnameBucket Specifies whether hostname bucket is used with this property. It allows you to add or remove property hostnames without
         * incrementing property versions.
         * 
         * @return builder
         * 
         */
        public Builder useHostnameBucket(Boolean useHostnameBucket) {
            return useHostnameBucket(Output.of(useHostnameBucket));
        }

        /**
         * @param versionNotes Property version notes
         * 
         * @return builder
         * 
         */
        public Builder versionNotes(@Nullable Output<String> versionNotes) {
            $.versionNotes = versionNotes;
            return this;
        }

        /**
         * @param versionNotes Property version notes
         * 
         * @return builder
         * 
         */
        public Builder versionNotes(String versionNotes) {
            return versionNotes(Output.of(versionNotes));
        }

        public PropertyArgs build() {
            if ($.contractId == null) {
                throw new MissingRequiredPropertyException("PropertyArgs", "contractId");
            }
            if ($.groupId == null) {
                throw new MissingRequiredPropertyException("PropertyArgs", "groupId");
            }
            if ($.productId == null) {
                throw new MissingRequiredPropertyException("PropertyArgs", "productId");
            }
            return $;
        }
    }

}
