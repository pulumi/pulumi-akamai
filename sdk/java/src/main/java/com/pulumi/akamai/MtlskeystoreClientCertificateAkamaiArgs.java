// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MtlskeystoreClientCertificateAkamaiArgs extends com.pulumi.resources.ResourceArgs {

    public static final MtlskeystoreClientCertificateAkamaiArgs Empty = new MtlskeystoreClientCertificateAkamaiArgs();

    /**
     * The name of the client certificate. Must be between 1 and 64 characters.
     * 
     */
    @Import(name="certificateName", required=true)
    private Output<String> certificateName;

    /**
     * @return The name of the client certificate. Must be between 1 and 64 characters.
     * 
     */
    public Output<String> certificateName() {
        return this.certificateName;
    }

    /**
     * The contract assigned to the client certificate. Must have a length of at least 1.
     * 
     */
    @Import(name="contractId", required=true)
    private Output<String> contractId;

    /**
     * @return The contract assigned to the client certificate. Must have a length of at least 1.
     * 
     */
    public Output<String> contractId() {
        return this.contractId;
    }

    /**
     * Specifies the type of network to deploy the client certificate. Possible values: `CORE`, `RUSSIA_AND_CORE`, or `CHINA_AND_CORE`.
     * 
     */
    @Import(name="geography", required=true)
    private Output<String> geography;

    /**
     * @return Specifies the type of network to deploy the client certificate. Possible values: `CORE`, `RUSSIA_AND_CORE`, or `CHINA_AND_CORE`.
     * 
     */
    public Output<String> geography() {
        return this.geography;
    }

    /**
     * The group assigned to the client certificate. Must be greater than or equal to 0.
     * 
     */
    @Import(name="groupId", required=true)
    private Output<Integer> groupId;

    /**
     * @return The group assigned to the client certificate. Must be greater than or equal to 0.
     * 
     */
    public Output<Integer> groupId() {
        return this.groupId;
    }

    /**
     * The cryptographic algorithm used for key generation. Possible values: `RSA` or `ECDSA`.
     * 
     */
    @Import(name="keyAlgorithm")
    private @Nullable Output<String> keyAlgorithm;

    /**
     * @return The cryptographic algorithm used for key generation. Possible values: `RSA` or `ECDSA`.
     * 
     */
    public Optional<Output<String>> keyAlgorithm() {
        return Optional.ofNullable(this.keyAlgorithm);
    }

    /**
     * The email addresses to notify for client certificate-related issues. Must have at least one email address.
     * 
     */
    @Import(name="notificationEmails", required=true)
    private Output<List<String>> notificationEmails;

    /**
     * @return The email addresses to notify for client certificate-related issues. Must have at least one email address.
     * 
     */
    public Output<List<String>> notificationEmails() {
        return this.notificationEmails;
    }

    /**
     * Identifies the network deployment type. Possible values: `STANDARD_TLS` or `ENHANCED_TLS`.
     * 
     */
    @Import(name="secureNetwork", required=true)
    private Output<String> secureNetwork;

    /**
     * @return Identifies the network deployment type. Possible values: `STANDARD_TLS` or `ENHANCED_TLS`.
     * 
     */
    public Output<String> secureNetwork() {
        return this.secureNetwork;
    }

    /**
     * The CA certificate’s key value details. The `CN` attribute is required and included in the subject. When not specified, the subject is constructed in this format: `/C=US/O=Akamai Technologies, Inc./OU={vcd_id} {contract_id} {group_id}/CN={certificate_name}/`.
     * 
     */
    @Import(name="subject")
    private @Nullable Output<String> subject;

    /**
     * @return The CA certificate’s key value details. The `CN` attribute is required and included in the subject. When not specified, the subject is constructed in this format: `/C=US/O=Akamai Technologies, Inc./OU={vcd_id} {contract_id} {group_id}/CN={certificate_name}/`.
     * 
     */
    public Optional<Output<String>> subject() {
        return Optional.ofNullable(this.subject);
    }

    private MtlskeystoreClientCertificateAkamaiArgs() {}

    private MtlskeystoreClientCertificateAkamaiArgs(MtlskeystoreClientCertificateAkamaiArgs $) {
        this.certificateName = $.certificateName;
        this.contractId = $.contractId;
        this.geography = $.geography;
        this.groupId = $.groupId;
        this.keyAlgorithm = $.keyAlgorithm;
        this.notificationEmails = $.notificationEmails;
        this.secureNetwork = $.secureNetwork;
        this.subject = $.subject;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MtlskeystoreClientCertificateAkamaiArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MtlskeystoreClientCertificateAkamaiArgs $;

        public Builder() {
            $ = new MtlskeystoreClientCertificateAkamaiArgs();
        }

        public Builder(MtlskeystoreClientCertificateAkamaiArgs defaults) {
            $ = new MtlskeystoreClientCertificateAkamaiArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateName The name of the client certificate. Must be between 1 and 64 characters.
         * 
         * @return builder
         * 
         */
        public Builder certificateName(Output<String> certificateName) {
            $.certificateName = certificateName;
            return this;
        }

        /**
         * @param certificateName The name of the client certificate. Must be between 1 and 64 characters.
         * 
         * @return builder
         * 
         */
        public Builder certificateName(String certificateName) {
            return certificateName(Output.of(certificateName));
        }

        /**
         * @param contractId The contract assigned to the client certificate. Must have a length of at least 1.
         * 
         * @return builder
         * 
         */
        public Builder contractId(Output<String> contractId) {
            $.contractId = contractId;
            return this;
        }

        /**
         * @param contractId The contract assigned to the client certificate. Must have a length of at least 1.
         * 
         * @return builder
         * 
         */
        public Builder contractId(String contractId) {
            return contractId(Output.of(contractId));
        }

        /**
         * @param geography Specifies the type of network to deploy the client certificate. Possible values: `CORE`, `RUSSIA_AND_CORE`, or `CHINA_AND_CORE`.
         * 
         * @return builder
         * 
         */
        public Builder geography(Output<String> geography) {
            $.geography = geography;
            return this;
        }

        /**
         * @param geography Specifies the type of network to deploy the client certificate. Possible values: `CORE`, `RUSSIA_AND_CORE`, or `CHINA_AND_CORE`.
         * 
         * @return builder
         * 
         */
        public Builder geography(String geography) {
            return geography(Output.of(geography));
        }

        /**
         * @param groupId The group assigned to the client certificate. Must be greater than or equal to 0.
         * 
         * @return builder
         * 
         */
        public Builder groupId(Output<Integer> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId The group assigned to the client certificate. Must be greater than or equal to 0.
         * 
         * @return builder
         * 
         */
        public Builder groupId(Integer groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param keyAlgorithm The cryptographic algorithm used for key generation. Possible values: `RSA` or `ECDSA`.
         * 
         * @return builder
         * 
         */
        public Builder keyAlgorithm(@Nullable Output<String> keyAlgorithm) {
            $.keyAlgorithm = keyAlgorithm;
            return this;
        }

        /**
         * @param keyAlgorithm The cryptographic algorithm used for key generation. Possible values: `RSA` or `ECDSA`.
         * 
         * @return builder
         * 
         */
        public Builder keyAlgorithm(String keyAlgorithm) {
            return keyAlgorithm(Output.of(keyAlgorithm));
        }

        /**
         * @param notificationEmails The email addresses to notify for client certificate-related issues. Must have at least one email address.
         * 
         * @return builder
         * 
         */
        public Builder notificationEmails(Output<List<String>> notificationEmails) {
            $.notificationEmails = notificationEmails;
            return this;
        }

        /**
         * @param notificationEmails The email addresses to notify for client certificate-related issues. Must have at least one email address.
         * 
         * @return builder
         * 
         */
        public Builder notificationEmails(List<String> notificationEmails) {
            return notificationEmails(Output.of(notificationEmails));
        }

        /**
         * @param notificationEmails The email addresses to notify for client certificate-related issues. Must have at least one email address.
         * 
         * @return builder
         * 
         */
        public Builder notificationEmails(String... notificationEmails) {
            return notificationEmails(List.of(notificationEmails));
        }

        /**
         * @param secureNetwork Identifies the network deployment type. Possible values: `STANDARD_TLS` or `ENHANCED_TLS`.
         * 
         * @return builder
         * 
         */
        public Builder secureNetwork(Output<String> secureNetwork) {
            $.secureNetwork = secureNetwork;
            return this;
        }

        /**
         * @param secureNetwork Identifies the network deployment type. Possible values: `STANDARD_TLS` or `ENHANCED_TLS`.
         * 
         * @return builder
         * 
         */
        public Builder secureNetwork(String secureNetwork) {
            return secureNetwork(Output.of(secureNetwork));
        }

        /**
         * @param subject The CA certificate’s key value details. The `CN` attribute is required and included in the subject. When not specified, the subject is constructed in this format: `/C=US/O=Akamai Technologies, Inc./OU={vcd_id} {contract_id} {group_id}/CN={certificate_name}/`.
         * 
         * @return builder
         * 
         */
        public Builder subject(@Nullable Output<String> subject) {
            $.subject = subject;
            return this;
        }

        /**
         * @param subject The CA certificate’s key value details. The `CN` attribute is required and included in the subject. When not specified, the subject is constructed in this format: `/C=US/O=Akamai Technologies, Inc./OU={vcd_id} {contract_id} {group_id}/CN={certificate_name}/`.
         * 
         * @return builder
         * 
         */
        public Builder subject(String subject) {
            return subject(Output.of(subject));
        }

        public MtlskeystoreClientCertificateAkamaiArgs build() {
            if ($.certificateName == null) {
                throw new MissingRequiredPropertyException("MtlskeystoreClientCertificateAkamaiArgs", "certificateName");
            }
            if ($.contractId == null) {
                throw new MissingRequiredPropertyException("MtlskeystoreClientCertificateAkamaiArgs", "contractId");
            }
            if ($.geography == null) {
                throw new MissingRequiredPropertyException("MtlskeystoreClientCertificateAkamaiArgs", "geography");
            }
            if ($.groupId == null) {
                throw new MissingRequiredPropertyException("MtlskeystoreClientCertificateAkamaiArgs", "groupId");
            }
            if ($.notificationEmails == null) {
                throw new MissingRequiredPropertyException("MtlskeystoreClientCertificateAkamaiArgs", "notificationEmails");
            }
            if ($.secureNetwork == null) {
                throw new MissingRequiredPropertyException("MtlskeystoreClientCertificateAkamaiArgs", "secureNetwork");
            }
            return $;
        }
    }

}
