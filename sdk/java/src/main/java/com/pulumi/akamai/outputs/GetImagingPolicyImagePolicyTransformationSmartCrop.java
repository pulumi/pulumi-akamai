// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetImagingPolicyImagePolicyTransformationSmartCrop {
    /**
     * @return When enabled, the SmartCrop transformation doesn&#39;t actually execute. Instead, it outlines found faces or features, the region of interest, and the crop area.
     * 
     */
    private @Nullable String debug;
    /**
     * @return When enabled, the SmartCrop transformation doesn&#39;t actually execute. Instead, it outlines found faces or features, the region of interest, and the crop area.
     * 
     */
    private @Nullable String debugVar;
    /**
     * @return The height in pixels of the output image relative to the specified `style` value.
     * 
     */
    private @Nullable String height;
    /**
     * @return The height in pixels of the output image relative to the specified `style` value.
     * 
     */
    private @Nullable String heightVar;
    /**
     * @return Whether to sacrifice any image fidelity for transformation performance.
     * 
     */
    private @Nullable String sloppy;
    /**
     * @return Whether to sacrifice any image fidelity for transformation performance.
     * 
     */
    private @Nullable String sloppyVar;
    /**
     * @return Specifies how to crop or scale a crop area for the specified area of interest in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
     * 
     */
    private @Nullable String style;
    /**
     * @return Specifies how to crop or scale a crop area for the specified area of interest in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
     * 
     */
    private @Nullable String styleVar;
    /**
     * @return The width in pixels of the output image relative to the specified `style` value.
     * 
     */
    private @Nullable String width;
    /**
     * @return The width in pixels of the output image relative to the specified `style` value.
     * 
     */
    private @Nullable String widthVar;

    private GetImagingPolicyImagePolicyTransformationSmartCrop() {}
    /**
     * @return When enabled, the SmartCrop transformation doesn&#39;t actually execute. Instead, it outlines found faces or features, the region of interest, and the crop area.
     * 
     */
    public Optional<String> debug() {
        return Optional.ofNullable(this.debug);
    }
    /**
     * @return When enabled, the SmartCrop transformation doesn&#39;t actually execute. Instead, it outlines found faces or features, the region of interest, and the crop area.
     * 
     */
    public Optional<String> debugVar() {
        return Optional.ofNullable(this.debugVar);
    }
    /**
     * @return The height in pixels of the output image relative to the specified `style` value.
     * 
     */
    public Optional<String> height() {
        return Optional.ofNullable(this.height);
    }
    /**
     * @return The height in pixels of the output image relative to the specified `style` value.
     * 
     */
    public Optional<String> heightVar() {
        return Optional.ofNullable(this.heightVar);
    }
    /**
     * @return Whether to sacrifice any image fidelity for transformation performance.
     * 
     */
    public Optional<String> sloppy() {
        return Optional.ofNullable(this.sloppy);
    }
    /**
     * @return Whether to sacrifice any image fidelity for transformation performance.
     * 
     */
    public Optional<String> sloppyVar() {
        return Optional.ofNullable(this.sloppyVar);
    }
    /**
     * @return Specifies how to crop or scale a crop area for the specified area of interest in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
     * 
     */
    public Optional<String> style() {
        return Optional.ofNullable(this.style);
    }
    /**
     * @return Specifies how to crop or scale a crop area for the specified area of interest in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
     * 
     */
    public Optional<String> styleVar() {
        return Optional.ofNullable(this.styleVar);
    }
    /**
     * @return The width in pixels of the output image relative to the specified `style` value.
     * 
     */
    public Optional<String> width() {
        return Optional.ofNullable(this.width);
    }
    /**
     * @return The width in pixels of the output image relative to the specified `style` value.
     * 
     */
    public Optional<String> widthVar() {
        return Optional.ofNullable(this.widthVar);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImagingPolicyImagePolicyTransformationSmartCrop defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String debug;
        private @Nullable String debugVar;
        private @Nullable String height;
        private @Nullable String heightVar;
        private @Nullable String sloppy;
        private @Nullable String sloppyVar;
        private @Nullable String style;
        private @Nullable String styleVar;
        private @Nullable String width;
        private @Nullable String widthVar;
        public Builder() {}
        public Builder(GetImagingPolicyImagePolicyTransformationSmartCrop defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.debug = defaults.debug;
    	      this.debugVar = defaults.debugVar;
    	      this.height = defaults.height;
    	      this.heightVar = defaults.heightVar;
    	      this.sloppy = defaults.sloppy;
    	      this.sloppyVar = defaults.sloppyVar;
    	      this.style = defaults.style;
    	      this.styleVar = defaults.styleVar;
    	      this.width = defaults.width;
    	      this.widthVar = defaults.widthVar;
        }

        @CustomType.Setter
        public Builder debug(@Nullable String debug) {

            this.debug = debug;
            return this;
        }
        @CustomType.Setter
        public Builder debugVar(@Nullable String debugVar) {

            this.debugVar = debugVar;
            return this;
        }
        @CustomType.Setter
        public Builder height(@Nullable String height) {

            this.height = height;
            return this;
        }
        @CustomType.Setter
        public Builder heightVar(@Nullable String heightVar) {

            this.heightVar = heightVar;
            return this;
        }
        @CustomType.Setter
        public Builder sloppy(@Nullable String sloppy) {

            this.sloppy = sloppy;
            return this;
        }
        @CustomType.Setter
        public Builder sloppyVar(@Nullable String sloppyVar) {

            this.sloppyVar = sloppyVar;
            return this;
        }
        @CustomType.Setter
        public Builder style(@Nullable String style) {

            this.style = style;
            return this;
        }
        @CustomType.Setter
        public Builder styleVar(@Nullable String styleVar) {

            this.styleVar = styleVar;
            return this;
        }
        @CustomType.Setter
        public Builder width(@Nullable String width) {

            this.width = width;
            return this;
        }
        @CustomType.Setter
        public Builder widthVar(@Nullable String widthVar) {

            this.widthVar = widthVar;
            return this;
        }
        public GetImagingPolicyImagePolicyTransformationSmartCrop build() {
            final var _resultValue = new GetImagingPolicyImagePolicyTransformationSmartCrop();
            _resultValue.debug = debug;
            _resultValue.debugVar = debugVar;
            _resultValue.height = height;
            _resultValue.heightVar = heightVar;
            _resultValue.sloppy = sloppy;
            _resultValue.sloppyVar = sloppyVar;
            _resultValue.style = style;
            _resultValue.styleVar = styleVar;
            _resultValue.width = width;
            _resultValue.widthVar = widthVar;
            return _resultValue;
        }
    }
}
