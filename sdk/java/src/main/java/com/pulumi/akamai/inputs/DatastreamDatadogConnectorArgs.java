// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatastreamDatadogConnectorArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatastreamDatadogConnectorArgs Empty = new DatastreamDatadogConnectorArgs();

    /**
     * The API key associated with Datadog account
     * 
     */
    @Import(name="authToken", required=true)
    private Output<String> authToken;

    /**
     * @return The API key associated with Datadog account
     * 
     */
    public Output<String> authToken() {
        return this.authToken;
    }

    /**
     * Indicates whether the logs should be compressed
     * 
     */
    @Import(name="compressLogs")
    private @Nullable Output<Boolean> compressLogs;

    /**
     * @return Indicates whether the logs should be compressed
     * 
     */
    public Optional<Output<Boolean>> compressLogs() {
        return Optional.ofNullable(this.compressLogs);
    }

    /**
     * The name of the connector
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The name of the connector
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * The Datadog endpoint where logs will be stored
     * 
     */
    @Import(name="endpoint", required=true)
    private Output<String> endpoint;

    /**
     * @return The Datadog endpoint where logs will be stored
     * 
     */
    public Output<String> endpoint() {
        return this.endpoint;
    }

    /**
     * The service of the Datadog connector
     * 
     */
    @Import(name="service")
    private @Nullable Output<String> service;

    /**
     * @return The service of the Datadog connector
     * 
     */
    public Optional<Output<String>> service() {
        return Optional.ofNullable(this.service);
    }

    /**
     * The source of the Datadog connector
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return The source of the Datadog connector
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * The tags of the Datadog connector
     * 
     */
    @Import(name="tags")
    private @Nullable Output<String> tags;

    /**
     * @return The tags of the Datadog connector
     * 
     */
    public Optional<Output<String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private DatastreamDatadogConnectorArgs() {}

    private DatastreamDatadogConnectorArgs(DatastreamDatadogConnectorArgs $) {
        this.authToken = $.authToken;
        this.compressLogs = $.compressLogs;
        this.displayName = $.displayName;
        this.endpoint = $.endpoint;
        this.service = $.service;
        this.source = $.source;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatastreamDatadogConnectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatastreamDatadogConnectorArgs $;

        public Builder() {
            $ = new DatastreamDatadogConnectorArgs();
        }

        public Builder(DatastreamDatadogConnectorArgs defaults) {
            $ = new DatastreamDatadogConnectorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authToken The API key associated with Datadog account
         * 
         * @return builder
         * 
         */
        public Builder authToken(Output<String> authToken) {
            $.authToken = authToken;
            return this;
        }

        /**
         * @param authToken The API key associated with Datadog account
         * 
         * @return builder
         * 
         */
        public Builder authToken(String authToken) {
            return authToken(Output.of(authToken));
        }

        /**
         * @param compressLogs Indicates whether the logs should be compressed
         * 
         * @return builder
         * 
         */
        public Builder compressLogs(@Nullable Output<Boolean> compressLogs) {
            $.compressLogs = compressLogs;
            return this;
        }

        /**
         * @param compressLogs Indicates whether the logs should be compressed
         * 
         * @return builder
         * 
         */
        public Builder compressLogs(Boolean compressLogs) {
            return compressLogs(Output.of(compressLogs));
        }

        /**
         * @param displayName The name of the connector
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The name of the connector
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param endpoint The Datadog endpoint where logs will be stored
         * 
         * @return builder
         * 
         */
        public Builder endpoint(Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint The Datadog endpoint where logs will be stored
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param service The service of the Datadog connector
         * 
         * @return builder
         * 
         */
        public Builder service(@Nullable Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service The service of the Datadog connector
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        /**
         * @param source The source of the Datadog connector
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source The source of the Datadog connector
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param tags The tags of the Datadog connector
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tags of the Datadog connector
         * 
         * @return builder
         * 
         */
        public Builder tags(String tags) {
            return tags(Output.of(tags));
        }

        public DatastreamDatadogConnectorArgs build() {
            if ($.authToken == null) {
                throw new MissingRequiredPropertyException("DatastreamDatadogConnectorArgs", "authToken");
            }
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("DatastreamDatadogConnectorArgs", "displayName");
            }
            if ($.endpoint == null) {
                throw new MissingRequiredPropertyException("DatastreamDatadogConnectorArgs", "endpoint");
            }
            return $;
        }
    }

}
