// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.trafficmanagement.inputs;

import com.pulumi.akamai.trafficmanagement.inputs.GtmASmapAssignmentArgs;
import com.pulumi.akamai.trafficmanagement.inputs.GtmASmapDefaultDatacenterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GtmASmapState extends com.pulumi.resources.ResourceArgs {

    public static final GtmASmapState Empty = new GtmASmapState();

    @Import(name="assignments")
    private @Nullable Output<List<GtmASmapAssignmentArgs>> assignments;

    public Optional<Output<List<GtmASmapAssignmentArgs>>> assignments() {
        return Optional.ofNullable(this.assignments);
    }

    @Import(name="defaultDatacenter")
    private @Nullable Output<GtmASmapDefaultDatacenterArgs> defaultDatacenter;

    public Optional<Output<GtmASmapDefaultDatacenterArgs>> defaultDatacenter() {
        return Optional.ofNullable(this.defaultDatacenter);
    }

    @Import(name="domain")
    private @Nullable Output<String> domain;

    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="waitOnComplete")
    private @Nullable Output<Boolean> waitOnComplete;

    public Optional<Output<Boolean>> waitOnComplete() {
        return Optional.ofNullable(this.waitOnComplete);
    }

    private GtmASmapState() {}

    private GtmASmapState(GtmASmapState $) {
        this.assignments = $.assignments;
        this.defaultDatacenter = $.defaultDatacenter;
        this.domain = $.domain;
        this.name = $.name;
        this.waitOnComplete = $.waitOnComplete;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GtmASmapState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GtmASmapState $;

        public Builder() {
            $ = new GtmASmapState();
        }

        public Builder(GtmASmapState defaults) {
            $ = new GtmASmapState(Objects.requireNonNull(defaults));
        }

        public Builder assignments(@Nullable Output<List<GtmASmapAssignmentArgs>> assignments) {
            $.assignments = assignments;
            return this;
        }

        public Builder assignments(List<GtmASmapAssignmentArgs> assignments) {
            return assignments(Output.of(assignments));
        }

        public Builder assignments(GtmASmapAssignmentArgs... assignments) {
            return assignments(List.of(assignments));
        }

        public Builder defaultDatacenter(@Nullable Output<GtmASmapDefaultDatacenterArgs> defaultDatacenter) {
            $.defaultDatacenter = defaultDatacenter;
            return this;
        }

        public Builder defaultDatacenter(GtmASmapDefaultDatacenterArgs defaultDatacenter) {
            return defaultDatacenter(Output.of(defaultDatacenter));
        }

        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder waitOnComplete(@Nullable Output<Boolean> waitOnComplete) {
            $.waitOnComplete = waitOnComplete;
            return this;
        }

        public Builder waitOnComplete(Boolean waitOnComplete) {
            return waitOnComplete(Output.of(waitOnComplete));
        }

        public GtmASmapState build() {
            return $;
        }
    }

}
