// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetIamPasswordPolicyResult {
    private Integer caseDif;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Integer maxRepeating;
    private Integer minDigits;
    private Integer minLength;
    private Integer minLetters;
    private Integer minNonAlpha;
    private Integer minReuse;
    private String pwClass;
    private Integer rotateFrequency;

    private GetIamPasswordPolicyResult() {}
    public Integer caseDif() {
        return this.caseDif;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Integer maxRepeating() {
        return this.maxRepeating;
    }
    public Integer minDigits() {
        return this.minDigits;
    }
    public Integer minLength() {
        return this.minLength;
    }
    public Integer minLetters() {
        return this.minLetters;
    }
    public Integer minNonAlpha() {
        return this.minNonAlpha;
    }
    public Integer minReuse() {
        return this.minReuse;
    }
    public String pwClass() {
        return this.pwClass;
    }
    public Integer rotateFrequency() {
        return this.rotateFrequency;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIamPasswordPolicyResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer caseDif;
        private String id;
        private Integer maxRepeating;
        private Integer minDigits;
        private Integer minLength;
        private Integer minLetters;
        private Integer minNonAlpha;
        private Integer minReuse;
        private String pwClass;
        private Integer rotateFrequency;
        public Builder() {}
        public Builder(GetIamPasswordPolicyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caseDif = defaults.caseDif;
    	      this.id = defaults.id;
    	      this.maxRepeating = defaults.maxRepeating;
    	      this.minDigits = defaults.minDigits;
    	      this.minLength = defaults.minLength;
    	      this.minLetters = defaults.minLetters;
    	      this.minNonAlpha = defaults.minNonAlpha;
    	      this.minReuse = defaults.minReuse;
    	      this.pwClass = defaults.pwClass;
    	      this.rotateFrequency = defaults.rotateFrequency;
        }

        @CustomType.Setter
        public Builder caseDif(Integer caseDif) {
            if (caseDif == null) {
              throw new MissingRequiredPropertyException("GetIamPasswordPolicyResult", "caseDif");
            }
            this.caseDif = caseDif;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetIamPasswordPolicyResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder maxRepeating(Integer maxRepeating) {
            if (maxRepeating == null) {
              throw new MissingRequiredPropertyException("GetIamPasswordPolicyResult", "maxRepeating");
            }
            this.maxRepeating = maxRepeating;
            return this;
        }
        @CustomType.Setter
        public Builder minDigits(Integer minDigits) {
            if (minDigits == null) {
              throw new MissingRequiredPropertyException("GetIamPasswordPolicyResult", "minDigits");
            }
            this.minDigits = minDigits;
            return this;
        }
        @CustomType.Setter
        public Builder minLength(Integer minLength) {
            if (minLength == null) {
              throw new MissingRequiredPropertyException("GetIamPasswordPolicyResult", "minLength");
            }
            this.minLength = minLength;
            return this;
        }
        @CustomType.Setter
        public Builder minLetters(Integer minLetters) {
            if (minLetters == null) {
              throw new MissingRequiredPropertyException("GetIamPasswordPolicyResult", "minLetters");
            }
            this.minLetters = minLetters;
            return this;
        }
        @CustomType.Setter
        public Builder minNonAlpha(Integer minNonAlpha) {
            if (minNonAlpha == null) {
              throw new MissingRequiredPropertyException("GetIamPasswordPolicyResult", "minNonAlpha");
            }
            this.minNonAlpha = minNonAlpha;
            return this;
        }
        @CustomType.Setter
        public Builder minReuse(Integer minReuse) {
            if (minReuse == null) {
              throw new MissingRequiredPropertyException("GetIamPasswordPolicyResult", "minReuse");
            }
            this.minReuse = minReuse;
            return this;
        }
        @CustomType.Setter
        public Builder pwClass(String pwClass) {
            if (pwClass == null) {
              throw new MissingRequiredPropertyException("GetIamPasswordPolicyResult", "pwClass");
            }
            this.pwClass = pwClass;
            return this;
        }
        @CustomType.Setter
        public Builder rotateFrequency(Integer rotateFrequency) {
            if (rotateFrequency == null) {
              throw new MissingRequiredPropertyException("GetIamPasswordPolicyResult", "rotateFrequency");
            }
            this.rotateFrequency = rotateFrequency;
            return this;
        }
        public GetIamPasswordPolicyResult build() {
            final var _resultValue = new GetIamPasswordPolicyResult();
            _resultValue.caseDif = caseDif;
            _resultValue.id = id;
            _resultValue.maxRepeating = maxRepeating;
            _resultValue.minDigits = minDigits;
            _resultValue.minLength = minLength;
            _resultValue.minLetters = minLetters;
            _resultValue.minNonAlpha = minNonAlpha;
            _resultValue.minReuse = minReuse;
            _resultValue.pwClass = pwClass;
            _resultValue.rotateFrequency = rotateFrequency;
            return _resultValue;
        }
    }
}
