// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai;

import com.pulumi.akamai.inputs.CpsThirdPartyEnrollmentAdminContactArgs;
import com.pulumi.akamai.inputs.CpsThirdPartyEnrollmentCsrArgs;
import com.pulumi.akamai.inputs.CpsThirdPartyEnrollmentNetworkConfigurationArgs;
import com.pulumi.akamai.inputs.CpsThirdPartyEnrollmentOrganizationArgs;
import com.pulumi.akamai.inputs.CpsThirdPartyEnrollmentTechContactArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CpsThirdPartyEnrollmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final CpsThirdPartyEnrollmentArgs Empty = new CpsThirdPartyEnrollmentArgs();

    /**
     * Whether you want to automatically acknowledge the validation warnings related to the current job state and proceed with the change.
     * 
     */
    @Import(name="acknowledgePreVerificationWarnings")
    private @Nullable Output<Boolean> acknowledgePreVerificationWarnings;

    /**
     * @return Whether you want to automatically acknowledge the validation warnings related to the current job state and proceed with the change.
     * 
     */
    public Optional<Output<Boolean>> acknowledgePreVerificationWarnings() {
        return Optional.ofNullable(this.acknowledgePreVerificationWarnings);
    }

    /**
     * Contact information for the certificate administrator at your company.
     * 
     */
    @Import(name="adminContact", required=true)
    private Output<CpsThirdPartyEnrollmentAdminContactArgs> adminContact;

    /**
     * @return Contact information for the certificate administrator at your company.
     * 
     */
    public Output<CpsThirdPartyEnrollmentAdminContactArgs> adminContact() {
        return this.adminContact;
    }

    /**
     * (Optional) Boolean. Set to `true` if you want to reuse a common name that&#39;s part of an existing enrollment.
     * 
     */
    @Import(name="allowDuplicateCommonName")
    private @Nullable Output<Boolean> allowDuplicateCommonName;

    /**
     * @return (Optional) Boolean. Set to `true` if you want to reuse a common name that&#39;s part of an existing enrollment.
     * 
     */
    public Optional<Output<Boolean>> allowDuplicateCommonName() {
        return Optional.ofNullable(this.allowDuplicateCommonName);
    }

    /**
     * The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `akamai.getCpsWarnings` data source.
     * 
     */
    @Import(name="autoApproveWarnings")
    private @Nullable Output<List<String>> autoApproveWarnings;

    /**
     * @return The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `akamai.getCpsWarnings` data source.
     * 
     */
    public Optional<Output<List<String>>> autoApproveWarnings() {
        return Optional.ofNullable(this.autoApproveWarnings);
    }

    /**
     * Certificate trust chain type.
     * 
     */
    @Import(name="certificateChainType")
    private @Nullable Output<String> certificateChainType;

    /**
     * @return Certificate trust chain type.
     * 
     */
    public Optional<Output<String>> certificateChainType() {
        return Optional.ofNullable(this.certificateChainType);
    }

    /**
     * Boolean. Set to `true` to have CPS deploy first to staging for testing purposes. To deploy the certificate to production, use the `acknowledge_change_management` argument in the `akamai.CpsUploadCertificate` resource. &lt;br&gt; If you don&#39;t use this option, CPS will automatically deploy the certificate to both networks.
     * 
     */
    @Import(name="changeManagement")
    private @Nullable Output<Boolean> changeManagement;

    /**
     * @return Boolean. Set to `true` to have CPS deploy first to staging for testing purposes. To deploy the certificate to production, use the `acknowledge_change_management` argument in the `akamai.CpsUploadCertificate` resource. &lt;br&gt; If you don&#39;t use this option, CPS will automatically deploy the certificate to both networks.
     * 
     */
    public Optional<Output<Boolean>> changeManagement() {
        return Optional.ofNullable(this.changeManagement);
    }

    /**
     * (Required) The fully qualified domain name (FQDN) for which you plan to use your certificate. The domain name you specify here must be owned or have legal rights to use the domain by the company you specify as `organization`. The company that owns the domain name must be a legally incorporated entity and be active and in good standing.
     * 
     */
    @Import(name="commonName", required=true)
    private Output<String> commonName;

    /**
     * @return (Required) The fully qualified domain name (FQDN) for which you plan to use your certificate. The domain name you specify here must be owned or have legal rights to use the domain by the company you specify as `organization`. The company that owns the domain name must be a legally incorporated entity and be active and in good standing.
     * 
     */
    public Output<String> commonName() {
        return this.commonName;
    }

    /**
     * (Required) A contract&#39;s ID, optionally with the `ctr_` prefix.
     * 
     */
    @Import(name="contractId", required=true)
    private Output<String> contractId;

    /**
     * @return (Required) A contract&#39;s ID, optionally with the `ctr_` prefix.
     * 
     */
    public Output<String> contractId() {
        return this.contractId;
    }

    /**
     * When you create an enrollment, you also generate a certificate signing request (CSR) using CPS. CPS signs the CSR with the private key. The CSR contains all the information the CA needs to issue your certificate.
     * 
     */
    @Import(name="csr", required=true)
    private Output<CpsThirdPartyEnrollmentCsrArgs> csr;

    /**
     * @return When you create an enrollment, you also generate a certificate signing request (CSR) using CPS. CPS signs the CSR with the private key. The CSR contains all the information the CA needs to issue your certificate.
     * 
     */
    public Output<CpsThirdPartyEnrollmentCsrArgs> csr() {
        return this.csr;
    }

    /**
     * If set to `true`, then the SANs in the enrollment don&#39;t appear in the CSR that you send to your CA.
     * 
     */
    @Import(name="excludeSans")
    private @Nullable Output<Boolean> excludeSans;

    /**
     * @return If set to `true`, then the SANs in the enrollment don&#39;t appear in the CSR that you send to your CA.
     * 
     */
    public Optional<Output<Boolean>> excludeSans() {
        return Optional.ofNullable(this.excludeSans);
    }

    /**
     * The network information and TLS Metadata you want CPS to use to push the completed certificate to the network.
     * 
     */
    @Import(name="networkConfiguration", required=true)
    private Output<CpsThirdPartyEnrollmentNetworkConfigurationArgs> networkConfiguration;

    /**
     * @return The network information and TLS Metadata you want CPS to use to push the completed certificate to the network.
     * 
     */
    public Output<CpsThirdPartyEnrollmentNetworkConfigurationArgs> networkConfiguration() {
        return this.networkConfiguration;
    }

    /**
     * Your organization information.
     * 
     */
    @Import(name="organization", required=true)
    private Output<CpsThirdPartyEnrollmentOrganizationArgs> organization;

    /**
     * @return Your organization information.
     * 
     */
    public Output<CpsThirdPartyEnrollmentOrganizationArgs> organization() {
        return this.organization;
    }

    /**
     * Additional common names to create a Subject Alternative Names (SAN) list.
     * 
     */
    @Import(name="sans")
    private @Nullable Output<List<String>> sans;

    /**
     * @return Additional common names to create a Subject Alternative Names (SAN) list.
     * 
     */
    public Optional<Output<List<String>>> sans() {
        return Optional.ofNullable(this.sans);
    }

    /**
     * The type of deployment network you want to use. `standard-tls` deploys your certificate to Akamai&#39;s standard secure network, but it isn&#39;t PCI compliant. `enhanced-tls` deploys your certificate to Akamai&#39;s more secure network with PCI compliance capability.
     * 
     */
    @Import(name="secureNetwork", required=true)
    private Output<String> secureNetwork;

    /**
     * @return The type of deployment network you want to use. `standard-tls` deploys your certificate to Akamai&#39;s standard secure network, but it isn&#39;t PCI compliant. `enhanced-tls` deploys your certificate to Akamai&#39;s more secure network with PCI compliance capability.
     * 
     */
    public Output<String> secureNetwork() {
        return this.secureNetwork;
    }

    /**
     * The SHA function. Changing this value may require running terraform destroy, terraform apply
     * 
     */
    @Import(name="signatureAlgorithm")
    private @Nullable Output<String> signatureAlgorithm;

    /**
     * @return The SHA function. Changing this value may require running terraform destroy, terraform apply
     * 
     */
    public Optional<Output<String>> signatureAlgorithm() {
        return Optional.ofNullable(this.signatureAlgorithm);
    }

    /**
     * Whether you want to enable SNI-only extension for the enrollment. Server Name Indication (SNI) is an extension of the Transport Layer Security (TLS) networking protocol. It allows a server to present multiple certificates on the same IP address. All modern web browsers support the SNI extension. If you have the same SAN on two or more certificates with the SNI-only option set, Akamai may serve traffic using any certificate which matches the requested SNI hostname. You should avoid multiple certificates with overlapping SAN names when using SNI-only. You can&#39;t change this setting once an enrollment is created.
     * 
     */
    @Import(name="sniOnly", required=true)
    private Output<Boolean> sniOnly;

    /**
     * @return Whether you want to enable SNI-only extension for the enrollment. Server Name Indication (SNI) is an extension of the Transport Layer Security (TLS) networking protocol. It allows a server to present multiple certificates on the same IP address. All modern web browsers support the SNI extension. If you have the same SAN on two or more certificates with the SNI-only option set, Akamai may serve traffic using any certificate which matches the requested SNI hostname. You should avoid multiple certificates with overlapping SAN names when using SNI-only. You can&#39;t change this setting once an enrollment is created.
     * 
     */
    public Output<Boolean> sniOnly() {
        return this.sniOnly;
    }

    /**
     * The technical contact within Akamai. This is the person you work closest with at Akamai and who can verify the certificate request. The CA calls this contact if there are any issues with the certificate and they can&#39;t reach the `admin_contact`.
     * 
     */
    @Import(name="techContact", required=true)
    private Output<CpsThirdPartyEnrollmentTechContactArgs> techContact;

    /**
     * @return The technical contact within Akamai. This is the person you work closest with at Akamai and who can verify the certificate request. The CA calls this contact if there are any issues with the certificate and they can&#39;t reach the `admin_contact`.
     * 
     */
    public Output<CpsThirdPartyEnrollmentTechContactArgs> techContact() {
        return this.techContact;
    }

    private CpsThirdPartyEnrollmentArgs() {}

    private CpsThirdPartyEnrollmentArgs(CpsThirdPartyEnrollmentArgs $) {
        this.acknowledgePreVerificationWarnings = $.acknowledgePreVerificationWarnings;
        this.adminContact = $.adminContact;
        this.allowDuplicateCommonName = $.allowDuplicateCommonName;
        this.autoApproveWarnings = $.autoApproveWarnings;
        this.certificateChainType = $.certificateChainType;
        this.changeManagement = $.changeManagement;
        this.commonName = $.commonName;
        this.contractId = $.contractId;
        this.csr = $.csr;
        this.excludeSans = $.excludeSans;
        this.networkConfiguration = $.networkConfiguration;
        this.organization = $.organization;
        this.sans = $.sans;
        this.secureNetwork = $.secureNetwork;
        this.signatureAlgorithm = $.signatureAlgorithm;
        this.sniOnly = $.sniOnly;
        this.techContact = $.techContact;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CpsThirdPartyEnrollmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CpsThirdPartyEnrollmentArgs $;

        public Builder() {
            $ = new CpsThirdPartyEnrollmentArgs();
        }

        public Builder(CpsThirdPartyEnrollmentArgs defaults) {
            $ = new CpsThirdPartyEnrollmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acknowledgePreVerificationWarnings Whether you want to automatically acknowledge the validation warnings related to the current job state and proceed with the change.
         * 
         * @return builder
         * 
         */
        public Builder acknowledgePreVerificationWarnings(@Nullable Output<Boolean> acknowledgePreVerificationWarnings) {
            $.acknowledgePreVerificationWarnings = acknowledgePreVerificationWarnings;
            return this;
        }

        /**
         * @param acknowledgePreVerificationWarnings Whether you want to automatically acknowledge the validation warnings related to the current job state and proceed with the change.
         * 
         * @return builder
         * 
         */
        public Builder acknowledgePreVerificationWarnings(Boolean acknowledgePreVerificationWarnings) {
            return acknowledgePreVerificationWarnings(Output.of(acknowledgePreVerificationWarnings));
        }

        /**
         * @param adminContact Contact information for the certificate administrator at your company.
         * 
         * @return builder
         * 
         */
        public Builder adminContact(Output<CpsThirdPartyEnrollmentAdminContactArgs> adminContact) {
            $.adminContact = adminContact;
            return this;
        }

        /**
         * @param adminContact Contact information for the certificate administrator at your company.
         * 
         * @return builder
         * 
         */
        public Builder adminContact(CpsThirdPartyEnrollmentAdminContactArgs adminContact) {
            return adminContact(Output.of(adminContact));
        }

        /**
         * @param allowDuplicateCommonName (Optional) Boolean. Set to `true` if you want to reuse a common name that&#39;s part of an existing enrollment.
         * 
         * @return builder
         * 
         */
        public Builder allowDuplicateCommonName(@Nullable Output<Boolean> allowDuplicateCommonName) {
            $.allowDuplicateCommonName = allowDuplicateCommonName;
            return this;
        }

        /**
         * @param allowDuplicateCommonName (Optional) Boolean. Set to `true` if you want to reuse a common name that&#39;s part of an existing enrollment.
         * 
         * @return builder
         * 
         */
        public Builder allowDuplicateCommonName(Boolean allowDuplicateCommonName) {
            return allowDuplicateCommonName(Output.of(allowDuplicateCommonName));
        }

        /**
         * @param autoApproveWarnings The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `akamai.getCpsWarnings` data source.
         * 
         * @return builder
         * 
         */
        public Builder autoApproveWarnings(@Nullable Output<List<String>> autoApproveWarnings) {
            $.autoApproveWarnings = autoApproveWarnings;
            return this;
        }

        /**
         * @param autoApproveWarnings The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `akamai.getCpsWarnings` data source.
         * 
         * @return builder
         * 
         */
        public Builder autoApproveWarnings(List<String> autoApproveWarnings) {
            return autoApproveWarnings(Output.of(autoApproveWarnings));
        }

        /**
         * @param autoApproveWarnings The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `akamai.getCpsWarnings` data source.
         * 
         * @return builder
         * 
         */
        public Builder autoApproveWarnings(String... autoApproveWarnings) {
            return autoApproveWarnings(List.of(autoApproveWarnings));
        }

        /**
         * @param certificateChainType Certificate trust chain type.
         * 
         * @return builder
         * 
         */
        public Builder certificateChainType(@Nullable Output<String> certificateChainType) {
            $.certificateChainType = certificateChainType;
            return this;
        }

        /**
         * @param certificateChainType Certificate trust chain type.
         * 
         * @return builder
         * 
         */
        public Builder certificateChainType(String certificateChainType) {
            return certificateChainType(Output.of(certificateChainType));
        }

        /**
         * @param changeManagement Boolean. Set to `true` to have CPS deploy first to staging for testing purposes. To deploy the certificate to production, use the `acknowledge_change_management` argument in the `akamai.CpsUploadCertificate` resource. &lt;br&gt; If you don&#39;t use this option, CPS will automatically deploy the certificate to both networks.
         * 
         * @return builder
         * 
         */
        public Builder changeManagement(@Nullable Output<Boolean> changeManagement) {
            $.changeManagement = changeManagement;
            return this;
        }

        /**
         * @param changeManagement Boolean. Set to `true` to have CPS deploy first to staging for testing purposes. To deploy the certificate to production, use the `acknowledge_change_management` argument in the `akamai.CpsUploadCertificate` resource. &lt;br&gt; If you don&#39;t use this option, CPS will automatically deploy the certificate to both networks.
         * 
         * @return builder
         * 
         */
        public Builder changeManagement(Boolean changeManagement) {
            return changeManagement(Output.of(changeManagement));
        }

        /**
         * @param commonName (Required) The fully qualified domain name (FQDN) for which you plan to use your certificate. The domain name you specify here must be owned or have legal rights to use the domain by the company you specify as `organization`. The company that owns the domain name must be a legally incorporated entity and be active and in good standing.
         * 
         * @return builder
         * 
         */
        public Builder commonName(Output<String> commonName) {
            $.commonName = commonName;
            return this;
        }

        /**
         * @param commonName (Required) The fully qualified domain name (FQDN) for which you plan to use your certificate. The domain name you specify here must be owned or have legal rights to use the domain by the company you specify as `organization`. The company that owns the domain name must be a legally incorporated entity and be active and in good standing.
         * 
         * @return builder
         * 
         */
        public Builder commonName(String commonName) {
            return commonName(Output.of(commonName));
        }

        /**
         * @param contractId (Required) A contract&#39;s ID, optionally with the `ctr_` prefix.
         * 
         * @return builder
         * 
         */
        public Builder contractId(Output<String> contractId) {
            $.contractId = contractId;
            return this;
        }

        /**
         * @param contractId (Required) A contract&#39;s ID, optionally with the `ctr_` prefix.
         * 
         * @return builder
         * 
         */
        public Builder contractId(String contractId) {
            return contractId(Output.of(contractId));
        }

        /**
         * @param csr When you create an enrollment, you also generate a certificate signing request (CSR) using CPS. CPS signs the CSR with the private key. The CSR contains all the information the CA needs to issue your certificate.
         * 
         * @return builder
         * 
         */
        public Builder csr(Output<CpsThirdPartyEnrollmentCsrArgs> csr) {
            $.csr = csr;
            return this;
        }

        /**
         * @param csr When you create an enrollment, you also generate a certificate signing request (CSR) using CPS. CPS signs the CSR with the private key. The CSR contains all the information the CA needs to issue your certificate.
         * 
         * @return builder
         * 
         */
        public Builder csr(CpsThirdPartyEnrollmentCsrArgs csr) {
            return csr(Output.of(csr));
        }

        /**
         * @param excludeSans If set to `true`, then the SANs in the enrollment don&#39;t appear in the CSR that you send to your CA.
         * 
         * @return builder
         * 
         */
        public Builder excludeSans(@Nullable Output<Boolean> excludeSans) {
            $.excludeSans = excludeSans;
            return this;
        }

        /**
         * @param excludeSans If set to `true`, then the SANs in the enrollment don&#39;t appear in the CSR that you send to your CA.
         * 
         * @return builder
         * 
         */
        public Builder excludeSans(Boolean excludeSans) {
            return excludeSans(Output.of(excludeSans));
        }

        /**
         * @param networkConfiguration The network information and TLS Metadata you want CPS to use to push the completed certificate to the network.
         * 
         * @return builder
         * 
         */
        public Builder networkConfiguration(Output<CpsThirdPartyEnrollmentNetworkConfigurationArgs> networkConfiguration) {
            $.networkConfiguration = networkConfiguration;
            return this;
        }

        /**
         * @param networkConfiguration The network information and TLS Metadata you want CPS to use to push the completed certificate to the network.
         * 
         * @return builder
         * 
         */
        public Builder networkConfiguration(CpsThirdPartyEnrollmentNetworkConfigurationArgs networkConfiguration) {
            return networkConfiguration(Output.of(networkConfiguration));
        }

        /**
         * @param organization Your organization information.
         * 
         * @return builder
         * 
         */
        public Builder organization(Output<CpsThirdPartyEnrollmentOrganizationArgs> organization) {
            $.organization = organization;
            return this;
        }

        /**
         * @param organization Your organization information.
         * 
         * @return builder
         * 
         */
        public Builder organization(CpsThirdPartyEnrollmentOrganizationArgs organization) {
            return organization(Output.of(organization));
        }

        /**
         * @param sans Additional common names to create a Subject Alternative Names (SAN) list.
         * 
         * @return builder
         * 
         */
        public Builder sans(@Nullable Output<List<String>> sans) {
            $.sans = sans;
            return this;
        }

        /**
         * @param sans Additional common names to create a Subject Alternative Names (SAN) list.
         * 
         * @return builder
         * 
         */
        public Builder sans(List<String> sans) {
            return sans(Output.of(sans));
        }

        /**
         * @param sans Additional common names to create a Subject Alternative Names (SAN) list.
         * 
         * @return builder
         * 
         */
        public Builder sans(String... sans) {
            return sans(List.of(sans));
        }

        /**
         * @param secureNetwork The type of deployment network you want to use. `standard-tls` deploys your certificate to Akamai&#39;s standard secure network, but it isn&#39;t PCI compliant. `enhanced-tls` deploys your certificate to Akamai&#39;s more secure network with PCI compliance capability.
         * 
         * @return builder
         * 
         */
        public Builder secureNetwork(Output<String> secureNetwork) {
            $.secureNetwork = secureNetwork;
            return this;
        }

        /**
         * @param secureNetwork The type of deployment network you want to use. `standard-tls` deploys your certificate to Akamai&#39;s standard secure network, but it isn&#39;t PCI compliant. `enhanced-tls` deploys your certificate to Akamai&#39;s more secure network with PCI compliance capability.
         * 
         * @return builder
         * 
         */
        public Builder secureNetwork(String secureNetwork) {
            return secureNetwork(Output.of(secureNetwork));
        }

        /**
         * @param signatureAlgorithm The SHA function. Changing this value may require running terraform destroy, terraform apply
         * 
         * @return builder
         * 
         */
        public Builder signatureAlgorithm(@Nullable Output<String> signatureAlgorithm) {
            $.signatureAlgorithm = signatureAlgorithm;
            return this;
        }

        /**
         * @param signatureAlgorithm The SHA function. Changing this value may require running terraform destroy, terraform apply
         * 
         * @return builder
         * 
         */
        public Builder signatureAlgorithm(String signatureAlgorithm) {
            return signatureAlgorithm(Output.of(signatureAlgorithm));
        }

        /**
         * @param sniOnly Whether you want to enable SNI-only extension for the enrollment. Server Name Indication (SNI) is an extension of the Transport Layer Security (TLS) networking protocol. It allows a server to present multiple certificates on the same IP address. All modern web browsers support the SNI extension. If you have the same SAN on two or more certificates with the SNI-only option set, Akamai may serve traffic using any certificate which matches the requested SNI hostname. You should avoid multiple certificates with overlapping SAN names when using SNI-only. You can&#39;t change this setting once an enrollment is created.
         * 
         * @return builder
         * 
         */
        public Builder sniOnly(Output<Boolean> sniOnly) {
            $.sniOnly = sniOnly;
            return this;
        }

        /**
         * @param sniOnly Whether you want to enable SNI-only extension for the enrollment. Server Name Indication (SNI) is an extension of the Transport Layer Security (TLS) networking protocol. It allows a server to present multiple certificates on the same IP address. All modern web browsers support the SNI extension. If you have the same SAN on two or more certificates with the SNI-only option set, Akamai may serve traffic using any certificate which matches the requested SNI hostname. You should avoid multiple certificates with overlapping SAN names when using SNI-only. You can&#39;t change this setting once an enrollment is created.
         * 
         * @return builder
         * 
         */
        public Builder sniOnly(Boolean sniOnly) {
            return sniOnly(Output.of(sniOnly));
        }

        /**
         * @param techContact The technical contact within Akamai. This is the person you work closest with at Akamai and who can verify the certificate request. The CA calls this contact if there are any issues with the certificate and they can&#39;t reach the `admin_contact`.
         * 
         * @return builder
         * 
         */
        public Builder techContact(Output<CpsThirdPartyEnrollmentTechContactArgs> techContact) {
            $.techContact = techContact;
            return this;
        }

        /**
         * @param techContact The technical contact within Akamai. This is the person you work closest with at Akamai and who can verify the certificate request. The CA calls this contact if there are any issues with the certificate and they can&#39;t reach the `admin_contact`.
         * 
         * @return builder
         * 
         */
        public Builder techContact(CpsThirdPartyEnrollmentTechContactArgs techContact) {
            return techContact(Output.of(techContact));
        }

        public CpsThirdPartyEnrollmentArgs build() {
            $.adminContact = Objects.requireNonNull($.adminContact, "expected parameter 'adminContact' to be non-null");
            $.commonName = Objects.requireNonNull($.commonName, "expected parameter 'commonName' to be non-null");
            $.contractId = Objects.requireNonNull($.contractId, "expected parameter 'contractId' to be non-null");
            $.csr = Objects.requireNonNull($.csr, "expected parameter 'csr' to be non-null");
            $.networkConfiguration = Objects.requireNonNull($.networkConfiguration, "expected parameter 'networkConfiguration' to be non-null");
            $.organization = Objects.requireNonNull($.organization, "expected parameter 'organization' to be non-null");
            $.secureNetwork = Objects.requireNonNull($.secureNetwork, "expected parameter 'secureNetwork' to be non-null");
            $.sniOnly = Objects.requireNonNull($.sniOnly, "expected parameter 'sniOnly' to be non-null");
            $.techContact = Objects.requireNonNull($.techContact, "expected parameter 'techContact' to be non-null");
            return $;
        }
    }

}
