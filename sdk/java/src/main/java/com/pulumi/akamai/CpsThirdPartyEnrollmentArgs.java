// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai;

import com.pulumi.akamai.inputs.CpsThirdPartyEnrollmentAdminContactArgs;
import com.pulumi.akamai.inputs.CpsThirdPartyEnrollmentCsrArgs;
import com.pulumi.akamai.inputs.CpsThirdPartyEnrollmentNetworkConfigurationArgs;
import com.pulumi.akamai.inputs.CpsThirdPartyEnrollmentOrganizationArgs;
import com.pulumi.akamai.inputs.CpsThirdPartyEnrollmentTechContactArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CpsThirdPartyEnrollmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final CpsThirdPartyEnrollmentArgs Empty = new CpsThirdPartyEnrollmentArgs();

    /**
     * Whether acknowledge warnings before certificate verification
     * 
     */
    @Import(name="acknowledgePreVerificationWarnings")
    private @Nullable Output<Boolean> acknowledgePreVerificationWarnings;

    /**
     * @return Whether acknowledge warnings before certificate verification
     * 
     */
    public Optional<Output<Boolean>> acknowledgePreVerificationWarnings() {
        return Optional.ofNullable(this.acknowledgePreVerificationWarnings);
    }

    /**
     * Contact information for the certificate administrator to use at organization
     * 
     */
    @Import(name="adminContact", required=true)
    private Output<CpsThirdPartyEnrollmentAdminContactArgs> adminContact;

    /**
     * @return Contact information for the certificate administrator to use at organization
     * 
     */
    public Output<CpsThirdPartyEnrollmentAdminContactArgs> adminContact() {
        return this.adminContact;
    }

    /**
     * Allow to duplicate common name
     * 
     */
    @Import(name="allowDuplicateCommonName")
    private @Nullable Output<Boolean> allowDuplicateCommonName;

    /**
     * @return Allow to duplicate common name
     * 
     */
    public Optional<Output<Boolean>> allowDuplicateCommonName() {
        return Optional.ofNullable(this.allowDuplicateCommonName);
    }

    /**
     * List of warnings to be automatically approved
     * 
     */
    @Import(name="autoApproveWarnings")
    private @Nullable Output<List<String>> autoApproveWarnings;

    /**
     * @return List of warnings to be automatically approved
     * 
     */
    public Optional<Output<List<String>>> autoApproveWarnings() {
        return Optional.ofNullable(this.autoApproveWarnings);
    }

    /**
     * Certificate trust chain type
     * 
     */
    @Import(name="certificateChainType")
    private @Nullable Output<String> certificateChainType;

    /**
     * @return Certificate trust chain type
     * 
     */
    public Optional<Output<String>> certificateChainType() {
        return Optional.ofNullable(this.certificateChainType);
    }

    /**
     * When set to false, the certificate will be deployed to both staging and production networks
     * 
     */
    @Import(name="changeManagement")
    private @Nullable Output<Boolean> changeManagement;

    /**
     * @return When set to false, the certificate will be deployed to both staging and production networks
     * 
     */
    public Optional<Output<Boolean>> changeManagement() {
        return Optional.ofNullable(this.changeManagement);
    }

    /**
     * Common name used for enrollment
     * 
     */
    @Import(name="commonName", required=true)
    private Output<String> commonName;

    /**
     * @return Common name used for enrollment
     * 
     */
    public Output<String> commonName() {
        return this.commonName;
    }

    /**
     * Contract ID for which enrollment is retrieved
     * 
     */
    @Import(name="contractId", required=true)
    private Output<String> contractId;

    /**
     * @return Contract ID for which enrollment is retrieved
     * 
     */
    public Output<String> contractId() {
        return this.contractId;
    }

    /**
     * Data used for generation of Certificate Signing Request
     * 
     */
    @Import(name="csr", required=true)
    private Output<CpsThirdPartyEnrollmentCsrArgs> csr;

    /**
     * @return Data used for generation of Certificate Signing Request
     * 
     */
    public Output<CpsThirdPartyEnrollmentCsrArgs> csr() {
        return this.csr;
    }

    /**
     * When true, SANs are excluded from the CSR
     * 
     */
    @Import(name="excludeSans")
    private @Nullable Output<Boolean> excludeSans;

    /**
     * @return When true, SANs are excluded from the CSR
     * 
     */
    public Optional<Output<Boolean>> excludeSans() {
        return Optional.ofNullable(this.excludeSans);
    }

    /**
     * Settings containing network information and TLS metadata used by CPS
     * 
     */
    @Import(name="networkConfiguration", required=true)
    private Output<CpsThirdPartyEnrollmentNetworkConfigurationArgs> networkConfiguration;

    /**
     * @return Settings containing network information and TLS metadata used by CPS
     * 
     */
    public Output<CpsThirdPartyEnrollmentNetworkConfigurationArgs> networkConfiguration() {
        return this.networkConfiguration;
    }

    /**
     * Organization information
     * 
     */
    @Import(name="organization", required=true)
    private Output<CpsThirdPartyEnrollmentOrganizationArgs> organization;

    /**
     * @return Organization information
     * 
     */
    public Output<CpsThirdPartyEnrollmentOrganizationArgs> organization() {
        return this.organization;
    }

    /**
     * List of SANs
     * 
     */
    @Import(name="sans")
    private @Nullable Output<List<String>> sans;

    /**
     * @return List of SANs
     * 
     */
    public Optional<Output<List<String>>> sans() {
        return Optional.ofNullable(this.sans);
    }

    /**
     * Type of TLS deployment network
     * 
     */
    @Import(name="secureNetwork", required=true)
    private Output<String> secureNetwork;

    /**
     * @return Type of TLS deployment network
     * 
     */
    public Output<String> secureNetwork() {
        return this.secureNetwork;
    }

    /**
     * The SHA function. Changing this value may require running terraform destroy, terraform apply
     * 
     */
    @Import(name="signatureAlgorithm")
    private @Nullable Output<String> signatureAlgorithm;

    /**
     * @return The SHA function. Changing this value may require running terraform destroy, terraform apply
     * 
     */
    public Optional<Output<String>> signatureAlgorithm() {
        return Optional.ofNullable(this.signatureAlgorithm);
    }

    /**
     * Whether Server Name Indication is used for enrollment
     * 
     */
    @Import(name="sniOnly", required=true)
    private Output<Boolean> sniOnly;

    /**
     * @return Whether Server Name Indication is used for enrollment
     * 
     */
    public Output<Boolean> sniOnly() {
        return this.sniOnly;
    }

    /**
     * Contact information for an administrator at Akamai
     * 
     */
    @Import(name="techContact", required=true)
    private Output<CpsThirdPartyEnrollmentTechContactArgs> techContact;

    /**
     * @return Contact information for an administrator at Akamai
     * 
     */
    public Output<CpsThirdPartyEnrollmentTechContactArgs> techContact() {
        return this.techContact;
    }

    private CpsThirdPartyEnrollmentArgs() {}

    private CpsThirdPartyEnrollmentArgs(CpsThirdPartyEnrollmentArgs $) {
        this.acknowledgePreVerificationWarnings = $.acknowledgePreVerificationWarnings;
        this.adminContact = $.adminContact;
        this.allowDuplicateCommonName = $.allowDuplicateCommonName;
        this.autoApproveWarnings = $.autoApproveWarnings;
        this.certificateChainType = $.certificateChainType;
        this.changeManagement = $.changeManagement;
        this.commonName = $.commonName;
        this.contractId = $.contractId;
        this.csr = $.csr;
        this.excludeSans = $.excludeSans;
        this.networkConfiguration = $.networkConfiguration;
        this.organization = $.organization;
        this.sans = $.sans;
        this.secureNetwork = $.secureNetwork;
        this.signatureAlgorithm = $.signatureAlgorithm;
        this.sniOnly = $.sniOnly;
        this.techContact = $.techContact;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CpsThirdPartyEnrollmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CpsThirdPartyEnrollmentArgs $;

        public Builder() {
            $ = new CpsThirdPartyEnrollmentArgs();
        }

        public Builder(CpsThirdPartyEnrollmentArgs defaults) {
            $ = new CpsThirdPartyEnrollmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acknowledgePreVerificationWarnings Whether acknowledge warnings before certificate verification
         * 
         * @return builder
         * 
         */
        public Builder acknowledgePreVerificationWarnings(@Nullable Output<Boolean> acknowledgePreVerificationWarnings) {
            $.acknowledgePreVerificationWarnings = acknowledgePreVerificationWarnings;
            return this;
        }

        /**
         * @param acknowledgePreVerificationWarnings Whether acknowledge warnings before certificate verification
         * 
         * @return builder
         * 
         */
        public Builder acknowledgePreVerificationWarnings(Boolean acknowledgePreVerificationWarnings) {
            return acknowledgePreVerificationWarnings(Output.of(acknowledgePreVerificationWarnings));
        }

        /**
         * @param adminContact Contact information for the certificate administrator to use at organization
         * 
         * @return builder
         * 
         */
        public Builder adminContact(Output<CpsThirdPartyEnrollmentAdminContactArgs> adminContact) {
            $.adminContact = adminContact;
            return this;
        }

        /**
         * @param adminContact Contact information for the certificate administrator to use at organization
         * 
         * @return builder
         * 
         */
        public Builder adminContact(CpsThirdPartyEnrollmentAdminContactArgs adminContact) {
            return adminContact(Output.of(adminContact));
        }

        /**
         * @param allowDuplicateCommonName Allow to duplicate common name
         * 
         * @return builder
         * 
         */
        public Builder allowDuplicateCommonName(@Nullable Output<Boolean> allowDuplicateCommonName) {
            $.allowDuplicateCommonName = allowDuplicateCommonName;
            return this;
        }

        /**
         * @param allowDuplicateCommonName Allow to duplicate common name
         * 
         * @return builder
         * 
         */
        public Builder allowDuplicateCommonName(Boolean allowDuplicateCommonName) {
            return allowDuplicateCommonName(Output.of(allowDuplicateCommonName));
        }

        /**
         * @param autoApproveWarnings List of warnings to be automatically approved
         * 
         * @return builder
         * 
         */
        public Builder autoApproveWarnings(@Nullable Output<List<String>> autoApproveWarnings) {
            $.autoApproveWarnings = autoApproveWarnings;
            return this;
        }

        /**
         * @param autoApproveWarnings List of warnings to be automatically approved
         * 
         * @return builder
         * 
         */
        public Builder autoApproveWarnings(List<String> autoApproveWarnings) {
            return autoApproveWarnings(Output.of(autoApproveWarnings));
        }

        /**
         * @param autoApproveWarnings List of warnings to be automatically approved
         * 
         * @return builder
         * 
         */
        public Builder autoApproveWarnings(String... autoApproveWarnings) {
            return autoApproveWarnings(List.of(autoApproveWarnings));
        }

        /**
         * @param certificateChainType Certificate trust chain type
         * 
         * @return builder
         * 
         */
        public Builder certificateChainType(@Nullable Output<String> certificateChainType) {
            $.certificateChainType = certificateChainType;
            return this;
        }

        /**
         * @param certificateChainType Certificate trust chain type
         * 
         * @return builder
         * 
         */
        public Builder certificateChainType(String certificateChainType) {
            return certificateChainType(Output.of(certificateChainType));
        }

        /**
         * @param changeManagement When set to false, the certificate will be deployed to both staging and production networks
         * 
         * @return builder
         * 
         */
        public Builder changeManagement(@Nullable Output<Boolean> changeManagement) {
            $.changeManagement = changeManagement;
            return this;
        }

        /**
         * @param changeManagement When set to false, the certificate will be deployed to both staging and production networks
         * 
         * @return builder
         * 
         */
        public Builder changeManagement(Boolean changeManagement) {
            return changeManagement(Output.of(changeManagement));
        }

        /**
         * @param commonName Common name used for enrollment
         * 
         * @return builder
         * 
         */
        public Builder commonName(Output<String> commonName) {
            $.commonName = commonName;
            return this;
        }

        /**
         * @param commonName Common name used for enrollment
         * 
         * @return builder
         * 
         */
        public Builder commonName(String commonName) {
            return commonName(Output.of(commonName));
        }

        /**
         * @param contractId Contract ID for which enrollment is retrieved
         * 
         * @return builder
         * 
         */
        public Builder contractId(Output<String> contractId) {
            $.contractId = contractId;
            return this;
        }

        /**
         * @param contractId Contract ID for which enrollment is retrieved
         * 
         * @return builder
         * 
         */
        public Builder contractId(String contractId) {
            return contractId(Output.of(contractId));
        }

        /**
         * @param csr Data used for generation of Certificate Signing Request
         * 
         * @return builder
         * 
         */
        public Builder csr(Output<CpsThirdPartyEnrollmentCsrArgs> csr) {
            $.csr = csr;
            return this;
        }

        /**
         * @param csr Data used for generation of Certificate Signing Request
         * 
         * @return builder
         * 
         */
        public Builder csr(CpsThirdPartyEnrollmentCsrArgs csr) {
            return csr(Output.of(csr));
        }

        /**
         * @param excludeSans When true, SANs are excluded from the CSR
         * 
         * @return builder
         * 
         */
        public Builder excludeSans(@Nullable Output<Boolean> excludeSans) {
            $.excludeSans = excludeSans;
            return this;
        }

        /**
         * @param excludeSans When true, SANs are excluded from the CSR
         * 
         * @return builder
         * 
         */
        public Builder excludeSans(Boolean excludeSans) {
            return excludeSans(Output.of(excludeSans));
        }

        /**
         * @param networkConfiguration Settings containing network information and TLS metadata used by CPS
         * 
         * @return builder
         * 
         */
        public Builder networkConfiguration(Output<CpsThirdPartyEnrollmentNetworkConfigurationArgs> networkConfiguration) {
            $.networkConfiguration = networkConfiguration;
            return this;
        }

        /**
         * @param networkConfiguration Settings containing network information and TLS metadata used by CPS
         * 
         * @return builder
         * 
         */
        public Builder networkConfiguration(CpsThirdPartyEnrollmentNetworkConfigurationArgs networkConfiguration) {
            return networkConfiguration(Output.of(networkConfiguration));
        }

        /**
         * @param organization Organization information
         * 
         * @return builder
         * 
         */
        public Builder organization(Output<CpsThirdPartyEnrollmentOrganizationArgs> organization) {
            $.organization = organization;
            return this;
        }

        /**
         * @param organization Organization information
         * 
         * @return builder
         * 
         */
        public Builder organization(CpsThirdPartyEnrollmentOrganizationArgs organization) {
            return organization(Output.of(organization));
        }

        /**
         * @param sans List of SANs
         * 
         * @return builder
         * 
         */
        public Builder sans(@Nullable Output<List<String>> sans) {
            $.sans = sans;
            return this;
        }

        /**
         * @param sans List of SANs
         * 
         * @return builder
         * 
         */
        public Builder sans(List<String> sans) {
            return sans(Output.of(sans));
        }

        /**
         * @param sans List of SANs
         * 
         * @return builder
         * 
         */
        public Builder sans(String... sans) {
            return sans(List.of(sans));
        }

        /**
         * @param secureNetwork Type of TLS deployment network
         * 
         * @return builder
         * 
         */
        public Builder secureNetwork(Output<String> secureNetwork) {
            $.secureNetwork = secureNetwork;
            return this;
        }

        /**
         * @param secureNetwork Type of TLS deployment network
         * 
         * @return builder
         * 
         */
        public Builder secureNetwork(String secureNetwork) {
            return secureNetwork(Output.of(secureNetwork));
        }

        /**
         * @param signatureAlgorithm The SHA function. Changing this value may require running terraform destroy, terraform apply
         * 
         * @return builder
         * 
         */
        public Builder signatureAlgorithm(@Nullable Output<String> signatureAlgorithm) {
            $.signatureAlgorithm = signatureAlgorithm;
            return this;
        }

        /**
         * @param signatureAlgorithm The SHA function. Changing this value may require running terraform destroy, terraform apply
         * 
         * @return builder
         * 
         */
        public Builder signatureAlgorithm(String signatureAlgorithm) {
            return signatureAlgorithm(Output.of(signatureAlgorithm));
        }

        /**
         * @param sniOnly Whether Server Name Indication is used for enrollment
         * 
         * @return builder
         * 
         */
        public Builder sniOnly(Output<Boolean> sniOnly) {
            $.sniOnly = sniOnly;
            return this;
        }

        /**
         * @param sniOnly Whether Server Name Indication is used for enrollment
         * 
         * @return builder
         * 
         */
        public Builder sniOnly(Boolean sniOnly) {
            return sniOnly(Output.of(sniOnly));
        }

        /**
         * @param techContact Contact information for an administrator at Akamai
         * 
         * @return builder
         * 
         */
        public Builder techContact(Output<CpsThirdPartyEnrollmentTechContactArgs> techContact) {
            $.techContact = techContact;
            return this;
        }

        /**
         * @param techContact Contact information for an administrator at Akamai
         * 
         * @return builder
         * 
         */
        public Builder techContact(CpsThirdPartyEnrollmentTechContactArgs techContact) {
            return techContact(Output.of(techContact));
        }

        public CpsThirdPartyEnrollmentArgs build() {
            if ($.adminContact == null) {
                throw new MissingRequiredPropertyException("CpsThirdPartyEnrollmentArgs", "adminContact");
            }
            if ($.commonName == null) {
                throw new MissingRequiredPropertyException("CpsThirdPartyEnrollmentArgs", "commonName");
            }
            if ($.contractId == null) {
                throw new MissingRequiredPropertyException("CpsThirdPartyEnrollmentArgs", "contractId");
            }
            if ($.csr == null) {
                throw new MissingRequiredPropertyException("CpsThirdPartyEnrollmentArgs", "csr");
            }
            if ($.networkConfiguration == null) {
                throw new MissingRequiredPropertyException("CpsThirdPartyEnrollmentArgs", "networkConfiguration");
            }
            if ($.organization == null) {
                throw new MissingRequiredPropertyException("CpsThirdPartyEnrollmentArgs", "organization");
            }
            if ($.secureNetwork == null) {
                throw new MissingRequiredPropertyException("CpsThirdPartyEnrollmentArgs", "secureNetwork");
            }
            if ($.sniOnly == null) {
                throw new MissingRequiredPropertyException("CpsThirdPartyEnrollmentArgs", "sniOnly");
            }
            if ($.techContact == null) {
                throw new MissingRequiredPropertyException("CpsThirdPartyEnrollmentArgs", "techContact");
            }
            return $;
        }
    }

}
