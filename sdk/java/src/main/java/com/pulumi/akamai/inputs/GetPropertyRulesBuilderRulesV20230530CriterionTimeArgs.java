// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyRulesBuilderRulesV20230530CriterionTimeArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetPropertyRulesBuilderRulesV20230530CriterionTimeArgs Empty = new GetPropertyRulesBuilderRulesV20230530CriterionTimeArgs();

    /**
     * Adjusts the start time plus repeat interval to account for daylight saving time. Applies when the current time and the start time use different systems, daylight and standard, and the two values are in conflict.
     * 
     */
    @Import(name="applyDaylightSavingsTime")
    private @Nullable Output<Boolean> applyDaylightSavingsTime;

    /**
     * @return Adjusts the start time plus repeat interval to account for daylight saving time. Applies when the current time and the start time use different systems, daylight and standard, and the two values are in conflict.
     * 
     */
    public Optional<Output<Boolean>> applyDaylightSavingsTime() {
        return Optional.ofNullable(this.applyDaylightSavingsTime);
    }

    /**
     * Sets the start of a time period.
     * 
     */
    @Import(name="beginDate")
    private @Nullable Output<String> beginDate;

    /**
     * @return Sets the start of a time period.
     * 
     */
    public Optional<Output<String>> beginDate() {
        return Optional.ofNullable(this.beginDate);
    }

    /**
     * Sets the end of a fixed time period.
     * 
     */
    @Import(name="endDate")
    private @Nullable Output<String> endDate;

    /**
     * @return Sets the end of a fixed time period.
     * 
     */
    public Optional<Output<String>> endDate() {
        return Optional.ofNullable(this.endDate);
    }

    /**
     * Sets the start of a fixed time period.
     * 
     */
    @Import(name="lastingDate")
    private @Nullable Output<String> lastingDate;

    /**
     * @return Sets the start of a fixed time period.
     * 
     */
    public Optional<Output<String>> lastingDate() {
        return Optional.ofNullable(this.lastingDate);
    }

    /**
     * Specifies the end of a time period as a duration relative to the `lastingDate`.
     * 
     */
    @Import(name="lastingDuration")
    private @Nullable Output<String> lastingDuration;

    /**
     * @return Specifies the end of a time period as a duration relative to the `lastingDate`.
     * 
     */
    public Optional<Output<String>> lastingDuration() {
        return Optional.ofNullable(this.lastingDuration);
    }

    /**
     * Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    @Import(name="locked")
    private @Nullable Output<Boolean> locked;

    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Output<Boolean>> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * Specifies how to define the range of time.
     * 
     */
    @Import(name="matchOperator")
    private @Nullable Output<String> matchOperator;

    /**
     * @return Specifies how to define the range of time.
     * 
     */
    public Optional<Output<String>> matchOperator() {
        return Optional.ofNullable(this.matchOperator);
    }

    /**
     * Sets the start of the initial time period.
     * 
     */
    @Import(name="repeatBeginDate")
    private @Nullable Output<String> repeatBeginDate;

    /**
     * @return Sets the start of the initial time period.
     * 
     */
    public Optional<Output<String>> repeatBeginDate() {
        return Optional.ofNullable(this.repeatBeginDate);
    }

    /**
     * Sets the duration of each repeating time period.
     * 
     */
    @Import(name="repeatDuration")
    private @Nullable Output<String> repeatDuration;

    /**
     * @return Sets the duration of each repeating time period.
     * 
     */
    public Optional<Output<String>> repeatDuration() {
        return Optional.ofNullable(this.repeatDuration);
    }

    /**
     * Sets the time between each repeating time period&#39;s starting points.
     * 
     */
    @Import(name="repeatInterval")
    private @Nullable Output<String> repeatInterval;

    /**
     * @return Sets the time between each repeating time period&#39;s starting points.
     * 
     */
    public Optional<Output<String>> repeatInterval() {
        return Optional.ofNullable(this.repeatInterval);
    }

    /**
     * This option is for internal usage only.
     * 
     */
    @Import(name="templateUuid")
    private @Nullable Output<String> templateUuid;

    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<Output<String>> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }

    /**
     * A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private GetPropertyRulesBuilderRulesV20230530CriterionTimeArgs() {}

    private GetPropertyRulesBuilderRulesV20230530CriterionTimeArgs(GetPropertyRulesBuilderRulesV20230530CriterionTimeArgs $) {
        this.applyDaylightSavingsTime = $.applyDaylightSavingsTime;
        this.beginDate = $.beginDate;
        this.endDate = $.endDate;
        this.lastingDate = $.lastingDate;
        this.lastingDuration = $.lastingDuration;
        this.locked = $.locked;
        this.matchOperator = $.matchOperator;
        this.repeatBeginDate = $.repeatBeginDate;
        this.repeatDuration = $.repeatDuration;
        this.repeatInterval = $.repeatInterval;
        this.templateUuid = $.templateUuid;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesBuilderRulesV20230530CriterionTimeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesBuilderRulesV20230530CriterionTimeArgs $;

        public Builder() {
            $ = new GetPropertyRulesBuilderRulesV20230530CriterionTimeArgs();
        }

        public Builder(GetPropertyRulesBuilderRulesV20230530CriterionTimeArgs defaults) {
            $ = new GetPropertyRulesBuilderRulesV20230530CriterionTimeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applyDaylightSavingsTime Adjusts the start time plus repeat interval to account for daylight saving time. Applies when the current time and the start time use different systems, daylight and standard, and the two values are in conflict.
         * 
         * @return builder
         * 
         */
        public Builder applyDaylightSavingsTime(@Nullable Output<Boolean> applyDaylightSavingsTime) {
            $.applyDaylightSavingsTime = applyDaylightSavingsTime;
            return this;
        }

        /**
         * @param applyDaylightSavingsTime Adjusts the start time plus repeat interval to account for daylight saving time. Applies when the current time and the start time use different systems, daylight and standard, and the two values are in conflict.
         * 
         * @return builder
         * 
         */
        public Builder applyDaylightSavingsTime(Boolean applyDaylightSavingsTime) {
            return applyDaylightSavingsTime(Output.of(applyDaylightSavingsTime));
        }

        /**
         * @param beginDate Sets the start of a time period.
         * 
         * @return builder
         * 
         */
        public Builder beginDate(@Nullable Output<String> beginDate) {
            $.beginDate = beginDate;
            return this;
        }

        /**
         * @param beginDate Sets the start of a time period.
         * 
         * @return builder
         * 
         */
        public Builder beginDate(String beginDate) {
            return beginDate(Output.of(beginDate));
        }

        /**
         * @param endDate Sets the end of a fixed time period.
         * 
         * @return builder
         * 
         */
        public Builder endDate(@Nullable Output<String> endDate) {
            $.endDate = endDate;
            return this;
        }

        /**
         * @param endDate Sets the end of a fixed time period.
         * 
         * @return builder
         * 
         */
        public Builder endDate(String endDate) {
            return endDate(Output.of(endDate));
        }

        /**
         * @param lastingDate Sets the start of a fixed time period.
         * 
         * @return builder
         * 
         */
        public Builder lastingDate(@Nullable Output<String> lastingDate) {
            $.lastingDate = lastingDate;
            return this;
        }

        /**
         * @param lastingDate Sets the start of a fixed time period.
         * 
         * @return builder
         * 
         */
        public Builder lastingDate(String lastingDate) {
            return lastingDate(Output.of(lastingDate));
        }

        /**
         * @param lastingDuration Specifies the end of a time period as a duration relative to the `lastingDate`.
         * 
         * @return builder
         * 
         */
        public Builder lastingDuration(@Nullable Output<String> lastingDuration) {
            $.lastingDuration = lastingDuration;
            return this;
        }

        /**
         * @param lastingDuration Specifies the end of a time period as a duration relative to the `lastingDate`.
         * 
         * @return builder
         * 
         */
        public Builder lastingDuration(String lastingDuration) {
            return lastingDuration(Output.of(lastingDuration));
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(@Nullable Output<Boolean> locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(Boolean locked) {
            return locked(Output.of(locked));
        }

        /**
         * @param matchOperator Specifies how to define the range of time.
         * 
         * @return builder
         * 
         */
        public Builder matchOperator(@Nullable Output<String> matchOperator) {
            $.matchOperator = matchOperator;
            return this;
        }

        /**
         * @param matchOperator Specifies how to define the range of time.
         * 
         * @return builder
         * 
         */
        public Builder matchOperator(String matchOperator) {
            return matchOperator(Output.of(matchOperator));
        }

        /**
         * @param repeatBeginDate Sets the start of the initial time period.
         * 
         * @return builder
         * 
         */
        public Builder repeatBeginDate(@Nullable Output<String> repeatBeginDate) {
            $.repeatBeginDate = repeatBeginDate;
            return this;
        }

        /**
         * @param repeatBeginDate Sets the start of the initial time period.
         * 
         * @return builder
         * 
         */
        public Builder repeatBeginDate(String repeatBeginDate) {
            return repeatBeginDate(Output.of(repeatBeginDate));
        }

        /**
         * @param repeatDuration Sets the duration of each repeating time period.
         * 
         * @return builder
         * 
         */
        public Builder repeatDuration(@Nullable Output<String> repeatDuration) {
            $.repeatDuration = repeatDuration;
            return this;
        }

        /**
         * @param repeatDuration Sets the duration of each repeating time period.
         * 
         * @return builder
         * 
         */
        public Builder repeatDuration(String repeatDuration) {
            return repeatDuration(Output.of(repeatDuration));
        }

        /**
         * @param repeatInterval Sets the time between each repeating time period&#39;s starting points.
         * 
         * @return builder
         * 
         */
        public Builder repeatInterval(@Nullable Output<String> repeatInterval) {
            $.repeatInterval = repeatInterval;
            return this;
        }

        /**
         * @param repeatInterval Sets the time between each repeating time period&#39;s starting points.
         * 
         * @return builder
         * 
         */
        public Builder repeatInterval(String repeatInterval) {
            return repeatInterval(Output.of(repeatInterval));
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(@Nullable Output<String> templateUuid) {
            $.templateUuid = templateUuid;
            return this;
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(String templateUuid) {
            return templateUuid(Output.of(templateUuid));
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public GetPropertyRulesBuilderRulesV20230530CriterionTimeArgs build() {
            return $;
        }
    }

}
