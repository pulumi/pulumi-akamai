// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.akamai.outputs.GetGtmDomainAsMap;
import com.pulumi.akamai.outputs.GetGtmDomainCidrMap;
import com.pulumi.akamai.outputs.GetGtmDomainDatacenter;
import com.pulumi.akamai.outputs.GetGtmDomainGeographicMap;
import com.pulumi.akamai.outputs.GetGtmDomainLink;
import com.pulumi.akamai.outputs.GetGtmDomainProperty;
import com.pulumi.akamai.outputs.GetGtmDomainResource;
import com.pulumi.akamai.outputs.GetGtmDomainStatus;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetGtmDomainResult {
    private @Nullable List<GetGtmDomainAsMap> asMaps;
    private @Nullable List<GetGtmDomainCidrMap> cidrMaps;
    private Boolean cnameCoalescingEnabled;
    private @Nullable List<GetGtmDomainDatacenter> datacenters;
    private Integer defaultErrorPenalty;
    private Double defaultHealthMax;
    private Double defaultHealthMultiplier;
    private Double defaultHealthThreshold;
    private Integer defaultMaxUnreachablePenalty;
    private String defaultSslClientCertificate;
    private String defaultSslClientPrivateKey;
    private Integer defaultTimeoutPenalty;
    private Double defaultUnreachableThreshold;
    private List<String> emailNotificationLists;
    private Boolean endUserMappingEnabled;
    private @Nullable List<GetGtmDomainGeographicMap> geographicMaps;
    private String id;
    private String lastModified;
    private String lastModifiedBy;
    private @Nullable List<GetGtmDomainLink> links;
    private Boolean loadFeedback;
    private Double loadImbalancePercentage;
    private Integer mapUpdateInterval;
    private Integer maxProperties;
    private Integer maxResources;
    private Double maxTestTimeout;
    private Integer maxTtl;
    private Double minPingableRegionFraction;
    private Integer minTestInterval;
    private Integer minTtl;
    private String modificationComments;
    private String name;
    private @Nullable List<GetGtmDomainProperty> properties;
    private @Nullable List<GetGtmDomainResource> resources;
    private String roundRobinPrefix;
    private String serverMonitorPool;
    private Boolean signAndServe;
    private String signAndServeAlgorithm;
    private @Nullable GetGtmDomainStatus status;
    private String type;

    private GetGtmDomainResult() {}
    public List<GetGtmDomainAsMap> asMaps() {
        return this.asMaps == null ? List.of() : this.asMaps;
    }
    public List<GetGtmDomainCidrMap> cidrMaps() {
        return this.cidrMaps == null ? List.of() : this.cidrMaps;
    }
    public Boolean cnameCoalescingEnabled() {
        return this.cnameCoalescingEnabled;
    }
    public List<GetGtmDomainDatacenter> datacenters() {
        return this.datacenters == null ? List.of() : this.datacenters;
    }
    public Integer defaultErrorPenalty() {
        return this.defaultErrorPenalty;
    }
    public Double defaultHealthMax() {
        return this.defaultHealthMax;
    }
    public Double defaultHealthMultiplier() {
        return this.defaultHealthMultiplier;
    }
    public Double defaultHealthThreshold() {
        return this.defaultHealthThreshold;
    }
    public Integer defaultMaxUnreachablePenalty() {
        return this.defaultMaxUnreachablePenalty;
    }
    public String defaultSslClientCertificate() {
        return this.defaultSslClientCertificate;
    }
    public String defaultSslClientPrivateKey() {
        return this.defaultSslClientPrivateKey;
    }
    public Integer defaultTimeoutPenalty() {
        return this.defaultTimeoutPenalty;
    }
    public Double defaultUnreachableThreshold() {
        return this.defaultUnreachableThreshold;
    }
    public List<String> emailNotificationLists() {
        return this.emailNotificationLists;
    }
    public Boolean endUserMappingEnabled() {
        return this.endUserMappingEnabled;
    }
    public List<GetGtmDomainGeographicMap> geographicMaps() {
        return this.geographicMaps == null ? List.of() : this.geographicMaps;
    }
    public String id() {
        return this.id;
    }
    public String lastModified() {
        return this.lastModified;
    }
    public String lastModifiedBy() {
        return this.lastModifiedBy;
    }
    public List<GetGtmDomainLink> links() {
        return this.links == null ? List.of() : this.links;
    }
    public Boolean loadFeedback() {
        return this.loadFeedback;
    }
    public Double loadImbalancePercentage() {
        return this.loadImbalancePercentage;
    }
    public Integer mapUpdateInterval() {
        return this.mapUpdateInterval;
    }
    public Integer maxProperties() {
        return this.maxProperties;
    }
    public Integer maxResources() {
        return this.maxResources;
    }
    public Double maxTestTimeout() {
        return this.maxTestTimeout;
    }
    public Integer maxTtl() {
        return this.maxTtl;
    }
    public Double minPingableRegionFraction() {
        return this.minPingableRegionFraction;
    }
    public Integer minTestInterval() {
        return this.minTestInterval;
    }
    public Integer minTtl() {
        return this.minTtl;
    }
    public String modificationComments() {
        return this.modificationComments;
    }
    public String name() {
        return this.name;
    }
    public List<GetGtmDomainProperty> properties() {
        return this.properties == null ? List.of() : this.properties;
    }
    public List<GetGtmDomainResource> resources() {
        return this.resources == null ? List.of() : this.resources;
    }
    public String roundRobinPrefix() {
        return this.roundRobinPrefix;
    }
    public String serverMonitorPool() {
        return this.serverMonitorPool;
    }
    public Boolean signAndServe() {
        return this.signAndServe;
    }
    public String signAndServeAlgorithm() {
        return this.signAndServeAlgorithm;
    }
    public Optional<GetGtmDomainStatus> status() {
        return Optional.ofNullable(this.status);
    }
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGtmDomainResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetGtmDomainAsMap> asMaps;
        private @Nullable List<GetGtmDomainCidrMap> cidrMaps;
        private Boolean cnameCoalescingEnabled;
        private @Nullable List<GetGtmDomainDatacenter> datacenters;
        private Integer defaultErrorPenalty;
        private Double defaultHealthMax;
        private Double defaultHealthMultiplier;
        private Double defaultHealthThreshold;
        private Integer defaultMaxUnreachablePenalty;
        private String defaultSslClientCertificate;
        private String defaultSslClientPrivateKey;
        private Integer defaultTimeoutPenalty;
        private Double defaultUnreachableThreshold;
        private List<String> emailNotificationLists;
        private Boolean endUserMappingEnabled;
        private @Nullable List<GetGtmDomainGeographicMap> geographicMaps;
        private String id;
        private String lastModified;
        private String lastModifiedBy;
        private @Nullable List<GetGtmDomainLink> links;
        private Boolean loadFeedback;
        private Double loadImbalancePercentage;
        private Integer mapUpdateInterval;
        private Integer maxProperties;
        private Integer maxResources;
        private Double maxTestTimeout;
        private Integer maxTtl;
        private Double minPingableRegionFraction;
        private Integer minTestInterval;
        private Integer minTtl;
        private String modificationComments;
        private String name;
        private @Nullable List<GetGtmDomainProperty> properties;
        private @Nullable List<GetGtmDomainResource> resources;
        private String roundRobinPrefix;
        private String serverMonitorPool;
        private Boolean signAndServe;
        private String signAndServeAlgorithm;
        private @Nullable GetGtmDomainStatus status;
        private String type;
        public Builder() {}
        public Builder(GetGtmDomainResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.asMaps = defaults.asMaps;
    	      this.cidrMaps = defaults.cidrMaps;
    	      this.cnameCoalescingEnabled = defaults.cnameCoalescingEnabled;
    	      this.datacenters = defaults.datacenters;
    	      this.defaultErrorPenalty = defaults.defaultErrorPenalty;
    	      this.defaultHealthMax = defaults.defaultHealthMax;
    	      this.defaultHealthMultiplier = defaults.defaultHealthMultiplier;
    	      this.defaultHealthThreshold = defaults.defaultHealthThreshold;
    	      this.defaultMaxUnreachablePenalty = defaults.defaultMaxUnreachablePenalty;
    	      this.defaultSslClientCertificate = defaults.defaultSslClientCertificate;
    	      this.defaultSslClientPrivateKey = defaults.defaultSslClientPrivateKey;
    	      this.defaultTimeoutPenalty = defaults.defaultTimeoutPenalty;
    	      this.defaultUnreachableThreshold = defaults.defaultUnreachableThreshold;
    	      this.emailNotificationLists = defaults.emailNotificationLists;
    	      this.endUserMappingEnabled = defaults.endUserMappingEnabled;
    	      this.geographicMaps = defaults.geographicMaps;
    	      this.id = defaults.id;
    	      this.lastModified = defaults.lastModified;
    	      this.lastModifiedBy = defaults.lastModifiedBy;
    	      this.links = defaults.links;
    	      this.loadFeedback = defaults.loadFeedback;
    	      this.loadImbalancePercentage = defaults.loadImbalancePercentage;
    	      this.mapUpdateInterval = defaults.mapUpdateInterval;
    	      this.maxProperties = defaults.maxProperties;
    	      this.maxResources = defaults.maxResources;
    	      this.maxTestTimeout = defaults.maxTestTimeout;
    	      this.maxTtl = defaults.maxTtl;
    	      this.minPingableRegionFraction = defaults.minPingableRegionFraction;
    	      this.minTestInterval = defaults.minTestInterval;
    	      this.minTtl = defaults.minTtl;
    	      this.modificationComments = defaults.modificationComments;
    	      this.name = defaults.name;
    	      this.properties = defaults.properties;
    	      this.resources = defaults.resources;
    	      this.roundRobinPrefix = defaults.roundRobinPrefix;
    	      this.serverMonitorPool = defaults.serverMonitorPool;
    	      this.signAndServe = defaults.signAndServe;
    	      this.signAndServeAlgorithm = defaults.signAndServeAlgorithm;
    	      this.status = defaults.status;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder asMaps(@Nullable List<GetGtmDomainAsMap> asMaps) {

            this.asMaps = asMaps;
            return this;
        }
        public Builder asMaps(GetGtmDomainAsMap... asMaps) {
            return asMaps(List.of(asMaps));
        }
        @CustomType.Setter
        public Builder cidrMaps(@Nullable List<GetGtmDomainCidrMap> cidrMaps) {

            this.cidrMaps = cidrMaps;
            return this;
        }
        public Builder cidrMaps(GetGtmDomainCidrMap... cidrMaps) {
            return cidrMaps(List.of(cidrMaps));
        }
        @CustomType.Setter
        public Builder cnameCoalescingEnabled(Boolean cnameCoalescingEnabled) {
            if (cnameCoalescingEnabled == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "cnameCoalescingEnabled");
            }
            this.cnameCoalescingEnabled = cnameCoalescingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder datacenters(@Nullable List<GetGtmDomainDatacenter> datacenters) {

            this.datacenters = datacenters;
            return this;
        }
        public Builder datacenters(GetGtmDomainDatacenter... datacenters) {
            return datacenters(List.of(datacenters));
        }
        @CustomType.Setter
        public Builder defaultErrorPenalty(Integer defaultErrorPenalty) {
            if (defaultErrorPenalty == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "defaultErrorPenalty");
            }
            this.defaultErrorPenalty = defaultErrorPenalty;
            return this;
        }
        @CustomType.Setter
        public Builder defaultHealthMax(Double defaultHealthMax) {
            if (defaultHealthMax == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "defaultHealthMax");
            }
            this.defaultHealthMax = defaultHealthMax;
            return this;
        }
        @CustomType.Setter
        public Builder defaultHealthMultiplier(Double defaultHealthMultiplier) {
            if (defaultHealthMultiplier == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "defaultHealthMultiplier");
            }
            this.defaultHealthMultiplier = defaultHealthMultiplier;
            return this;
        }
        @CustomType.Setter
        public Builder defaultHealthThreshold(Double defaultHealthThreshold) {
            if (defaultHealthThreshold == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "defaultHealthThreshold");
            }
            this.defaultHealthThreshold = defaultHealthThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder defaultMaxUnreachablePenalty(Integer defaultMaxUnreachablePenalty) {
            if (defaultMaxUnreachablePenalty == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "defaultMaxUnreachablePenalty");
            }
            this.defaultMaxUnreachablePenalty = defaultMaxUnreachablePenalty;
            return this;
        }
        @CustomType.Setter
        public Builder defaultSslClientCertificate(String defaultSslClientCertificate) {
            if (defaultSslClientCertificate == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "defaultSslClientCertificate");
            }
            this.defaultSslClientCertificate = defaultSslClientCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder defaultSslClientPrivateKey(String defaultSslClientPrivateKey) {
            if (defaultSslClientPrivateKey == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "defaultSslClientPrivateKey");
            }
            this.defaultSslClientPrivateKey = defaultSslClientPrivateKey;
            return this;
        }
        @CustomType.Setter
        public Builder defaultTimeoutPenalty(Integer defaultTimeoutPenalty) {
            if (defaultTimeoutPenalty == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "defaultTimeoutPenalty");
            }
            this.defaultTimeoutPenalty = defaultTimeoutPenalty;
            return this;
        }
        @CustomType.Setter
        public Builder defaultUnreachableThreshold(Double defaultUnreachableThreshold) {
            if (defaultUnreachableThreshold == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "defaultUnreachableThreshold");
            }
            this.defaultUnreachableThreshold = defaultUnreachableThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder emailNotificationLists(List<String> emailNotificationLists) {
            if (emailNotificationLists == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "emailNotificationLists");
            }
            this.emailNotificationLists = emailNotificationLists;
            return this;
        }
        public Builder emailNotificationLists(String... emailNotificationLists) {
            return emailNotificationLists(List.of(emailNotificationLists));
        }
        @CustomType.Setter
        public Builder endUserMappingEnabled(Boolean endUserMappingEnabled) {
            if (endUserMappingEnabled == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "endUserMappingEnabled");
            }
            this.endUserMappingEnabled = endUserMappingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder geographicMaps(@Nullable List<GetGtmDomainGeographicMap> geographicMaps) {

            this.geographicMaps = geographicMaps;
            return this;
        }
        public Builder geographicMaps(GetGtmDomainGeographicMap... geographicMaps) {
            return geographicMaps(List.of(geographicMaps));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lastModified(String lastModified) {
            if (lastModified == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "lastModified");
            }
            this.lastModified = lastModified;
            return this;
        }
        @CustomType.Setter
        public Builder lastModifiedBy(String lastModifiedBy) {
            if (lastModifiedBy == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "lastModifiedBy");
            }
            this.lastModifiedBy = lastModifiedBy;
            return this;
        }
        @CustomType.Setter
        public Builder links(@Nullable List<GetGtmDomainLink> links) {

            this.links = links;
            return this;
        }
        public Builder links(GetGtmDomainLink... links) {
            return links(List.of(links));
        }
        @CustomType.Setter
        public Builder loadFeedback(Boolean loadFeedback) {
            if (loadFeedback == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "loadFeedback");
            }
            this.loadFeedback = loadFeedback;
            return this;
        }
        @CustomType.Setter
        public Builder loadImbalancePercentage(Double loadImbalancePercentage) {
            if (loadImbalancePercentage == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "loadImbalancePercentage");
            }
            this.loadImbalancePercentage = loadImbalancePercentage;
            return this;
        }
        @CustomType.Setter
        public Builder mapUpdateInterval(Integer mapUpdateInterval) {
            if (mapUpdateInterval == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "mapUpdateInterval");
            }
            this.mapUpdateInterval = mapUpdateInterval;
            return this;
        }
        @CustomType.Setter
        public Builder maxProperties(Integer maxProperties) {
            if (maxProperties == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "maxProperties");
            }
            this.maxProperties = maxProperties;
            return this;
        }
        @CustomType.Setter
        public Builder maxResources(Integer maxResources) {
            if (maxResources == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "maxResources");
            }
            this.maxResources = maxResources;
            return this;
        }
        @CustomType.Setter
        public Builder maxTestTimeout(Double maxTestTimeout) {
            if (maxTestTimeout == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "maxTestTimeout");
            }
            this.maxTestTimeout = maxTestTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder maxTtl(Integer maxTtl) {
            if (maxTtl == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "maxTtl");
            }
            this.maxTtl = maxTtl;
            return this;
        }
        @CustomType.Setter
        public Builder minPingableRegionFraction(Double minPingableRegionFraction) {
            if (minPingableRegionFraction == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "minPingableRegionFraction");
            }
            this.minPingableRegionFraction = minPingableRegionFraction;
            return this;
        }
        @CustomType.Setter
        public Builder minTestInterval(Integer minTestInterval) {
            if (minTestInterval == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "minTestInterval");
            }
            this.minTestInterval = minTestInterval;
            return this;
        }
        @CustomType.Setter
        public Builder minTtl(Integer minTtl) {
            if (minTtl == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "minTtl");
            }
            this.minTtl = minTtl;
            return this;
        }
        @CustomType.Setter
        public Builder modificationComments(String modificationComments) {
            if (modificationComments == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "modificationComments");
            }
            this.modificationComments = modificationComments;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder properties(@Nullable List<GetGtmDomainProperty> properties) {

            this.properties = properties;
            return this;
        }
        public Builder properties(GetGtmDomainProperty... properties) {
            return properties(List.of(properties));
        }
        @CustomType.Setter
        public Builder resources(@Nullable List<GetGtmDomainResource> resources) {

            this.resources = resources;
            return this;
        }
        public Builder resources(GetGtmDomainResource... resources) {
            return resources(List.of(resources));
        }
        @CustomType.Setter
        public Builder roundRobinPrefix(String roundRobinPrefix) {
            if (roundRobinPrefix == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "roundRobinPrefix");
            }
            this.roundRobinPrefix = roundRobinPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder serverMonitorPool(String serverMonitorPool) {
            if (serverMonitorPool == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "serverMonitorPool");
            }
            this.serverMonitorPool = serverMonitorPool;
            return this;
        }
        @CustomType.Setter
        public Builder signAndServe(Boolean signAndServe) {
            if (signAndServe == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "signAndServe");
            }
            this.signAndServe = signAndServe;
            return this;
        }
        @CustomType.Setter
        public Builder signAndServeAlgorithm(String signAndServeAlgorithm) {
            if (signAndServeAlgorithm == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "signAndServeAlgorithm");
            }
            this.signAndServeAlgorithm = signAndServeAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable GetGtmDomainStatus status) {

            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainResult", "type");
            }
            this.type = type;
            return this;
        }
        public GetGtmDomainResult build() {
            final var _resultValue = new GetGtmDomainResult();
            _resultValue.asMaps = asMaps;
            _resultValue.cidrMaps = cidrMaps;
            _resultValue.cnameCoalescingEnabled = cnameCoalescingEnabled;
            _resultValue.datacenters = datacenters;
            _resultValue.defaultErrorPenalty = defaultErrorPenalty;
            _resultValue.defaultHealthMax = defaultHealthMax;
            _resultValue.defaultHealthMultiplier = defaultHealthMultiplier;
            _resultValue.defaultHealthThreshold = defaultHealthThreshold;
            _resultValue.defaultMaxUnreachablePenalty = defaultMaxUnreachablePenalty;
            _resultValue.defaultSslClientCertificate = defaultSslClientCertificate;
            _resultValue.defaultSslClientPrivateKey = defaultSslClientPrivateKey;
            _resultValue.defaultTimeoutPenalty = defaultTimeoutPenalty;
            _resultValue.defaultUnreachableThreshold = defaultUnreachableThreshold;
            _resultValue.emailNotificationLists = emailNotificationLists;
            _resultValue.endUserMappingEnabled = endUserMappingEnabled;
            _resultValue.geographicMaps = geographicMaps;
            _resultValue.id = id;
            _resultValue.lastModified = lastModified;
            _resultValue.lastModifiedBy = lastModifiedBy;
            _resultValue.links = links;
            _resultValue.loadFeedback = loadFeedback;
            _resultValue.loadImbalancePercentage = loadImbalancePercentage;
            _resultValue.mapUpdateInterval = mapUpdateInterval;
            _resultValue.maxProperties = maxProperties;
            _resultValue.maxResources = maxResources;
            _resultValue.maxTestTimeout = maxTestTimeout;
            _resultValue.maxTtl = maxTtl;
            _resultValue.minPingableRegionFraction = minPingableRegionFraction;
            _resultValue.minTestInterval = minTestInterval;
            _resultValue.minTtl = minTtl;
            _resultValue.modificationComments = modificationComments;
            _resultValue.name = name;
            _resultValue.properties = properties;
            _resultValue.resources = resources;
            _resultValue.roundRobinPrefix = roundRobinPrefix;
            _resultValue.serverMonitorPool = serverMonitorPool;
            _resultValue.signAndServe = signAndServe;
            _resultValue.signAndServeAlgorithm = signAndServeAlgorithm;
            _resultValue.status = status;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
