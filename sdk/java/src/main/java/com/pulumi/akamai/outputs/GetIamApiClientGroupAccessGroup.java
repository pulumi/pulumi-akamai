// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.akamai.outputs.GetIamApiClientGroupAccessGroupSubGroup;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetIamApiClientGroupAccessGroup {
    /**
     * @return Unique identifier for each group.
     * 
     */
    private Integer groupId;
    /**
     * @return Descriptive label for the group.
     * 
     */
    private String groupName;
    /**
     * @return Blocks the API client access to the group&#39;s child groups.
     * 
     */
    private Boolean isBlocked;
    /**
     * @return Unique identifier for the parent group within the group tree.
     * 
     */
    private Integer parentGroupId;
    /**
     * @return Descriptive label for the role to convey its use.
     * 
     */
    private String roleDescription;
    /**
     * @return Unique identifier for each role.
     * 
     */
    private Integer roleId;
    /**
     * @return Descriptive label for the role.
     * 
     */
    private String roleName;
    /**
     * @return Groups the API client can access.
     * 
     */
    private List<GetIamApiClientGroupAccessGroupSubGroup> subGroups;

    private GetIamApiClientGroupAccessGroup() {}
    /**
     * @return Unique identifier for each group.
     * 
     */
    public Integer groupId() {
        return this.groupId;
    }
    /**
     * @return Descriptive label for the group.
     * 
     */
    public String groupName() {
        return this.groupName;
    }
    /**
     * @return Blocks the API client access to the group&#39;s child groups.
     * 
     */
    public Boolean isBlocked() {
        return this.isBlocked;
    }
    /**
     * @return Unique identifier for the parent group within the group tree.
     * 
     */
    public Integer parentGroupId() {
        return this.parentGroupId;
    }
    /**
     * @return Descriptive label for the role to convey its use.
     * 
     */
    public String roleDescription() {
        return this.roleDescription;
    }
    /**
     * @return Unique identifier for each role.
     * 
     */
    public Integer roleId() {
        return this.roleId;
    }
    /**
     * @return Descriptive label for the role.
     * 
     */
    public String roleName() {
        return this.roleName;
    }
    /**
     * @return Groups the API client can access.
     * 
     */
    public List<GetIamApiClientGroupAccessGroupSubGroup> subGroups() {
        return this.subGroups;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIamApiClientGroupAccessGroup defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer groupId;
        private String groupName;
        private Boolean isBlocked;
        private Integer parentGroupId;
        private String roleDescription;
        private Integer roleId;
        private String roleName;
        private List<GetIamApiClientGroupAccessGroupSubGroup> subGroups;
        public Builder() {}
        public Builder(GetIamApiClientGroupAccessGroup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.groupId = defaults.groupId;
    	      this.groupName = defaults.groupName;
    	      this.isBlocked = defaults.isBlocked;
    	      this.parentGroupId = defaults.parentGroupId;
    	      this.roleDescription = defaults.roleDescription;
    	      this.roleId = defaults.roleId;
    	      this.roleName = defaults.roleName;
    	      this.subGroups = defaults.subGroups;
        }

        @CustomType.Setter
        public Builder groupId(Integer groupId) {
            if (groupId == null) {
              throw new MissingRequiredPropertyException("GetIamApiClientGroupAccessGroup", "groupId");
            }
            this.groupId = groupId;
            return this;
        }
        @CustomType.Setter
        public Builder groupName(String groupName) {
            if (groupName == null) {
              throw new MissingRequiredPropertyException("GetIamApiClientGroupAccessGroup", "groupName");
            }
            this.groupName = groupName;
            return this;
        }
        @CustomType.Setter
        public Builder isBlocked(Boolean isBlocked) {
            if (isBlocked == null) {
              throw new MissingRequiredPropertyException("GetIamApiClientGroupAccessGroup", "isBlocked");
            }
            this.isBlocked = isBlocked;
            return this;
        }
        @CustomType.Setter
        public Builder parentGroupId(Integer parentGroupId) {
            if (parentGroupId == null) {
              throw new MissingRequiredPropertyException("GetIamApiClientGroupAccessGroup", "parentGroupId");
            }
            this.parentGroupId = parentGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder roleDescription(String roleDescription) {
            if (roleDescription == null) {
              throw new MissingRequiredPropertyException("GetIamApiClientGroupAccessGroup", "roleDescription");
            }
            this.roleDescription = roleDescription;
            return this;
        }
        @CustomType.Setter
        public Builder roleId(Integer roleId) {
            if (roleId == null) {
              throw new MissingRequiredPropertyException("GetIamApiClientGroupAccessGroup", "roleId");
            }
            this.roleId = roleId;
            return this;
        }
        @CustomType.Setter
        public Builder roleName(String roleName) {
            if (roleName == null) {
              throw new MissingRequiredPropertyException("GetIamApiClientGroupAccessGroup", "roleName");
            }
            this.roleName = roleName;
            return this;
        }
        @CustomType.Setter
        public Builder subGroups(List<GetIamApiClientGroupAccessGroupSubGroup> subGroups) {
            if (subGroups == null) {
              throw new MissingRequiredPropertyException("GetIamApiClientGroupAccessGroup", "subGroups");
            }
            this.subGroups = subGroups;
            return this;
        }
        public Builder subGroups(GetIamApiClientGroupAccessGroupSubGroup... subGroups) {
            return subGroups(List.of(subGroups));
        }
        public GetIamApiClientGroupAccessGroup build() {
            final var _resultValue = new GetIamApiClientGroupAccessGroup();
            _resultValue.groupId = groupId;
            _resultValue.groupName = groupName;
            _resultValue.isBlocked = isBlocked;
            _resultValue.parentGroupId = parentGroupId;
            _resultValue.roleDescription = roleDescription;
            _resultValue.roleId = roleId;
            _resultValue.roleName = roleName;
            _resultValue.subGroups = subGroups;
            return _resultValue;
        }
    }
}
