// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanChromaKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanChromaKeyArgs Empty = new GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanChromaKeyArgs();

    @Import(name="hue")
    private @Nullable Output<String> hue;

    public Optional<Output<String>> hue() {
        return Optional.ofNullable(this.hue);
    }

    @Import(name="hueFeather")
    private @Nullable Output<String> hueFeather;

    public Optional<Output<String>> hueFeather() {
        return Optional.ofNullable(this.hueFeather);
    }

    @Import(name="hueFeatherVar")
    private @Nullable Output<String> hueFeatherVar;

    public Optional<Output<String>> hueFeatherVar() {
        return Optional.ofNullable(this.hueFeatherVar);
    }

    @Import(name="hueTolerance")
    private @Nullable Output<String> hueTolerance;

    public Optional<Output<String>> hueTolerance() {
        return Optional.ofNullable(this.hueTolerance);
    }

    @Import(name="hueToleranceVar")
    private @Nullable Output<String> hueToleranceVar;

    public Optional<Output<String>> hueToleranceVar() {
        return Optional.ofNullable(this.hueToleranceVar);
    }

    @Import(name="hueVar")
    private @Nullable Output<String> hueVar;

    public Optional<Output<String>> hueVar() {
        return Optional.ofNullable(this.hueVar);
    }

    @Import(name="lightnessFeather")
    private @Nullable Output<String> lightnessFeather;

    public Optional<Output<String>> lightnessFeather() {
        return Optional.ofNullable(this.lightnessFeather);
    }

    @Import(name="lightnessFeatherVar")
    private @Nullable Output<String> lightnessFeatherVar;

    public Optional<Output<String>> lightnessFeatherVar() {
        return Optional.ofNullable(this.lightnessFeatherVar);
    }

    @Import(name="lightnessTolerance")
    private @Nullable Output<String> lightnessTolerance;

    public Optional<Output<String>> lightnessTolerance() {
        return Optional.ofNullable(this.lightnessTolerance);
    }

    @Import(name="lightnessToleranceVar")
    private @Nullable Output<String> lightnessToleranceVar;

    public Optional<Output<String>> lightnessToleranceVar() {
        return Optional.ofNullable(this.lightnessToleranceVar);
    }

    @Import(name="saturationFeather")
    private @Nullable Output<String> saturationFeather;

    public Optional<Output<String>> saturationFeather() {
        return Optional.ofNullable(this.saturationFeather);
    }

    @Import(name="saturationFeatherVar")
    private @Nullable Output<String> saturationFeatherVar;

    public Optional<Output<String>> saturationFeatherVar() {
        return Optional.ofNullable(this.saturationFeatherVar);
    }

    @Import(name="saturationTolerance")
    private @Nullable Output<String> saturationTolerance;

    public Optional<Output<String>> saturationTolerance() {
        return Optional.ofNullable(this.saturationTolerance);
    }

    @Import(name="saturationToleranceVar")
    private @Nullable Output<String> saturationToleranceVar;

    public Optional<Output<String>> saturationToleranceVar() {
        return Optional.ofNullable(this.saturationToleranceVar);
    }

    private GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanChromaKeyArgs() {}

    private GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanChromaKeyArgs(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanChromaKeyArgs $) {
        this.hue = $.hue;
        this.hueFeather = $.hueFeather;
        this.hueFeatherVar = $.hueFeatherVar;
        this.hueTolerance = $.hueTolerance;
        this.hueToleranceVar = $.hueToleranceVar;
        this.hueVar = $.hueVar;
        this.lightnessFeather = $.lightnessFeather;
        this.lightnessFeatherVar = $.lightnessFeatherVar;
        this.lightnessTolerance = $.lightnessTolerance;
        this.lightnessToleranceVar = $.lightnessToleranceVar;
        this.saturationFeather = $.saturationFeather;
        this.saturationFeatherVar = $.saturationFeatherVar;
        this.saturationTolerance = $.saturationTolerance;
        this.saturationToleranceVar = $.saturationToleranceVar;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanChromaKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanChromaKeyArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanChromaKeyArgs();
        }

        public Builder(GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanChromaKeyArgs defaults) {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanChromaKeyArgs(Objects.requireNonNull(defaults));
        }

        public Builder hue(@Nullable Output<String> hue) {
            $.hue = hue;
            return this;
        }

        public Builder hue(String hue) {
            return hue(Output.of(hue));
        }

        public Builder hueFeather(@Nullable Output<String> hueFeather) {
            $.hueFeather = hueFeather;
            return this;
        }

        public Builder hueFeather(String hueFeather) {
            return hueFeather(Output.of(hueFeather));
        }

        public Builder hueFeatherVar(@Nullable Output<String> hueFeatherVar) {
            $.hueFeatherVar = hueFeatherVar;
            return this;
        }

        public Builder hueFeatherVar(String hueFeatherVar) {
            return hueFeatherVar(Output.of(hueFeatherVar));
        }

        public Builder hueTolerance(@Nullable Output<String> hueTolerance) {
            $.hueTolerance = hueTolerance;
            return this;
        }

        public Builder hueTolerance(String hueTolerance) {
            return hueTolerance(Output.of(hueTolerance));
        }

        public Builder hueToleranceVar(@Nullable Output<String> hueToleranceVar) {
            $.hueToleranceVar = hueToleranceVar;
            return this;
        }

        public Builder hueToleranceVar(String hueToleranceVar) {
            return hueToleranceVar(Output.of(hueToleranceVar));
        }

        public Builder hueVar(@Nullable Output<String> hueVar) {
            $.hueVar = hueVar;
            return this;
        }

        public Builder hueVar(String hueVar) {
            return hueVar(Output.of(hueVar));
        }

        public Builder lightnessFeather(@Nullable Output<String> lightnessFeather) {
            $.lightnessFeather = lightnessFeather;
            return this;
        }

        public Builder lightnessFeather(String lightnessFeather) {
            return lightnessFeather(Output.of(lightnessFeather));
        }

        public Builder lightnessFeatherVar(@Nullable Output<String> lightnessFeatherVar) {
            $.lightnessFeatherVar = lightnessFeatherVar;
            return this;
        }

        public Builder lightnessFeatherVar(String lightnessFeatherVar) {
            return lightnessFeatherVar(Output.of(lightnessFeatherVar));
        }

        public Builder lightnessTolerance(@Nullable Output<String> lightnessTolerance) {
            $.lightnessTolerance = lightnessTolerance;
            return this;
        }

        public Builder lightnessTolerance(String lightnessTolerance) {
            return lightnessTolerance(Output.of(lightnessTolerance));
        }

        public Builder lightnessToleranceVar(@Nullable Output<String> lightnessToleranceVar) {
            $.lightnessToleranceVar = lightnessToleranceVar;
            return this;
        }

        public Builder lightnessToleranceVar(String lightnessToleranceVar) {
            return lightnessToleranceVar(Output.of(lightnessToleranceVar));
        }

        public Builder saturationFeather(@Nullable Output<String> saturationFeather) {
            $.saturationFeather = saturationFeather;
            return this;
        }

        public Builder saturationFeather(String saturationFeather) {
            return saturationFeather(Output.of(saturationFeather));
        }

        public Builder saturationFeatherVar(@Nullable Output<String> saturationFeatherVar) {
            $.saturationFeatherVar = saturationFeatherVar;
            return this;
        }

        public Builder saturationFeatherVar(String saturationFeatherVar) {
            return saturationFeatherVar(Output.of(saturationFeatherVar));
        }

        public Builder saturationTolerance(@Nullable Output<String> saturationTolerance) {
            $.saturationTolerance = saturationTolerance;
            return this;
        }

        public Builder saturationTolerance(String saturationTolerance) {
            return saturationTolerance(Output.of(saturationTolerance));
        }

        public Builder saturationToleranceVar(@Nullable Output<String> saturationToleranceVar) {
            $.saturationToleranceVar = saturationToleranceVar;
            return this;
        }

        public Builder saturationToleranceVar(String saturationToleranceVar) {
            return saturationToleranceVar(Output.of(saturationToleranceVar));
        }

        public GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanChromaKeyArgs build() {
            return $;
        }
    }

}
