// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.akamai.outputs.GetCloudwrapperCapacitiesCapacityApproved;
import com.pulumi.akamai.outputs.GetCloudwrapperCapacitiesCapacityAssigned;
import com.pulumi.akamai.outputs.GetCloudwrapperCapacitiesCapacityUnassigned;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCloudwrapperCapacitiesCapacity {
    /**
     * @return Capacity allocated for the location.
     * 
     */
    private GetCloudwrapperCapacitiesCapacityApproved approved;
    /**
     * @return Capacity already assigned to Cloud Wrapper configurations.
     * 
     */
    private GetCloudwrapperCapacitiesCapacityAssigned assigned;
    /**
     * @return Contract ID having Cloud Wrapper entitlement.
     * 
     */
    private String contractId;
    /**
     * @return Unique identifier of the configured location.
     * 
     */
    private Integer locationId;
    /**
     * @return Name of the location.
     * 
     */
    private String locationName;
    /**
     * @return The type of property this capacity is related to.
     * 
     */
    private String type;
    /**
     * @return Capacity value that can be assigned to Cloud Wrapper configurations.
     * 
     */
    private GetCloudwrapperCapacitiesCapacityUnassigned unassigned;

    private GetCloudwrapperCapacitiesCapacity() {}
    /**
     * @return Capacity allocated for the location.
     * 
     */
    public GetCloudwrapperCapacitiesCapacityApproved approved() {
        return this.approved;
    }
    /**
     * @return Capacity already assigned to Cloud Wrapper configurations.
     * 
     */
    public GetCloudwrapperCapacitiesCapacityAssigned assigned() {
        return this.assigned;
    }
    /**
     * @return Contract ID having Cloud Wrapper entitlement.
     * 
     */
    public String contractId() {
        return this.contractId;
    }
    /**
     * @return Unique identifier of the configured location.
     * 
     */
    public Integer locationId() {
        return this.locationId;
    }
    /**
     * @return Name of the location.
     * 
     */
    public String locationName() {
        return this.locationName;
    }
    /**
     * @return The type of property this capacity is related to.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Capacity value that can be assigned to Cloud Wrapper configurations.
     * 
     */
    public GetCloudwrapperCapacitiesCapacityUnassigned unassigned() {
        return this.unassigned;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCloudwrapperCapacitiesCapacity defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetCloudwrapperCapacitiesCapacityApproved approved;
        private GetCloudwrapperCapacitiesCapacityAssigned assigned;
        private String contractId;
        private Integer locationId;
        private String locationName;
        private String type;
        private GetCloudwrapperCapacitiesCapacityUnassigned unassigned;
        public Builder() {}
        public Builder(GetCloudwrapperCapacitiesCapacity defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.approved = defaults.approved;
    	      this.assigned = defaults.assigned;
    	      this.contractId = defaults.contractId;
    	      this.locationId = defaults.locationId;
    	      this.locationName = defaults.locationName;
    	      this.type = defaults.type;
    	      this.unassigned = defaults.unassigned;
        }

        @CustomType.Setter
        public Builder approved(GetCloudwrapperCapacitiesCapacityApproved approved) {
            if (approved == null) {
              throw new MissingRequiredPropertyException("GetCloudwrapperCapacitiesCapacity", "approved");
            }
            this.approved = approved;
            return this;
        }
        @CustomType.Setter
        public Builder assigned(GetCloudwrapperCapacitiesCapacityAssigned assigned) {
            if (assigned == null) {
              throw new MissingRequiredPropertyException("GetCloudwrapperCapacitiesCapacity", "assigned");
            }
            this.assigned = assigned;
            return this;
        }
        @CustomType.Setter
        public Builder contractId(String contractId) {
            if (contractId == null) {
              throw new MissingRequiredPropertyException("GetCloudwrapperCapacitiesCapacity", "contractId");
            }
            this.contractId = contractId;
            return this;
        }
        @CustomType.Setter
        public Builder locationId(Integer locationId) {
            if (locationId == null) {
              throw new MissingRequiredPropertyException("GetCloudwrapperCapacitiesCapacity", "locationId");
            }
            this.locationId = locationId;
            return this;
        }
        @CustomType.Setter
        public Builder locationName(String locationName) {
            if (locationName == null) {
              throw new MissingRequiredPropertyException("GetCloudwrapperCapacitiesCapacity", "locationName");
            }
            this.locationName = locationName;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetCloudwrapperCapacitiesCapacity", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder unassigned(GetCloudwrapperCapacitiesCapacityUnassigned unassigned) {
            if (unassigned == null) {
              throw new MissingRequiredPropertyException("GetCloudwrapperCapacitiesCapacity", "unassigned");
            }
            this.unassigned = unassigned;
            return this;
        }
        public GetCloudwrapperCapacitiesCapacity build() {
            final var _resultValue = new GetCloudwrapperCapacitiesCapacity();
            _resultValue.approved = approved;
            _resultValue.assigned = assigned;
            _resultValue.contractId = contractId;
            _resultValue.locationId = locationId;
            _resultValue.locationName = locationName;
            _resultValue.type = type;
            _resultValue.unassigned = unassigned;
            return _resultValue;
        }
    }
}
