// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationFeatureCropArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyTransformationFeatureCropArgs Empty = new GetImagingPolicyImagePolicyTransformationFeatureCropArgs();

    /**
     * Controls placement of the crop if Image and Video Manager does not detect any features in the image. Directions are relative to the edges of the image being transformed.
     * 
     */
    @Import(name="failGravity")
    private @Nullable Output<String> failGravity;

    /**
     * @return Controls placement of the crop if Image and Video Manager does not detect any features in the image. Directions are relative to the edges of the image being transformed.
     * 
     */
    public Optional<Output<String>> failGravity() {
        return Optional.ofNullable(this.failGravity);
    }

    /**
     * Controls placement of the crop if Image and Video Manager does not detect any features in the image. Directions are relative to the edges of the image being transformed.
     * 
     */
    @Import(name="failGravityVar")
    private @Nullable Output<String> failGravityVar;

    /**
     * @return Controls placement of the crop if Image and Video Manager does not detect any features in the image. Directions are relative to the edges of the image being transformed.
     * 
     */
    public Optional<Output<String>> failGravityVar() {
        return Optional.ofNullable(this.failGravityVar);
    }

    /**
     * The size in pixels of the important features to search for. If identified, two features never appear closer together than this value, `8.0` by default.
     * 
     */
    @Import(name="featureRadius")
    private @Nullable Output<String> featureRadius;

    /**
     * @return The size in pixels of the important features to search for. If identified, two features never appear closer together than this value, `8.0` by default.
     * 
     */
    public Optional<Output<String>> featureRadius() {
        return Optional.ofNullable(this.featureRadius);
    }

    /**
     * The size in pixels of the important features to search for. If identified, two features never appear closer together than this value, `8.0` by default.
     * 
     */
    @Import(name="featureRadiusVar")
    private @Nullable Output<String> featureRadiusVar;

    /**
     * @return The size in pixels of the important features to search for. If identified, two features never appear closer together than this value, `8.0` by default.
     * 
     */
    public Optional<Output<String>> featureRadiusVar() {
        return Optional.ofNullable(this.featureRadiusVar);
    }

    /**
     * Controls placement of the crop. Directions are relative to the region of interest plus padding.
     * 
     */
    @Import(name="gravity")
    private @Nullable Output<String> gravity;

    /**
     * @return Controls placement of the crop. Directions are relative to the region of interest plus padding.
     * 
     */
    public Optional<Output<String>> gravity() {
        return Optional.ofNullable(this.gravity);
    }

    /**
     * Controls placement of the crop. Directions are relative to the region of interest plus padding.
     * 
     */
    @Import(name="gravityVar")
    private @Nullable Output<String> gravityVar;

    /**
     * @return Controls placement of the crop. Directions are relative to the region of interest plus padding.
     * 
     */
    public Optional<Output<String>> gravityVar() {
        return Optional.ofNullable(this.gravityVar);
    }

    /**
     * The height in pixels of the output image relative to the specified `style` value.
     * 
     */
    @Import(name="height")
    private @Nullable Output<String> height;

    /**
     * @return The height in pixels of the output image relative to the specified `style` value.
     * 
     */
    public Optional<Output<String>> height() {
        return Optional.ofNullable(this.height);
    }

    /**
     * The height in pixels of the output image relative to the specified `style` value.
     * 
     */
    @Import(name="heightVar")
    private @Nullable Output<String> heightVar;

    /**
     * @return The height in pixels of the output image relative to the specified `style` value.
     * 
     */
    public Optional<Output<String>> heightVar() {
        return Optional.ofNullable(this.heightVar);
    }

    /**
     * The maximum number of features to identify as important features, `32` by default. The strongest features are always chosen.
     * 
     */
    @Import(name="maxFeatures")
    private @Nullable Output<String> maxFeatures;

    /**
     * @return The maximum number of features to identify as important features, `32` by default. The strongest features are always chosen.
     * 
     */
    public Optional<Output<String>> maxFeatures() {
        return Optional.ofNullable(this.maxFeatures);
    }

    /**
     * The maximum number of features to identify as important features, `32` by default. The strongest features are always chosen.
     * 
     */
    @Import(name="maxFeaturesVar")
    private @Nullable Output<String> maxFeaturesVar;

    /**
     * @return The maximum number of features to identify as important features, `32` by default. The strongest features are always chosen.
     * 
     */
    public Optional<Output<String>> maxFeaturesVar() {
        return Optional.ofNullable(this.maxFeaturesVar);
    }

    /**
     * Determines the minimum quality level of the feature identified. To consider a feature important, the feature needs to surpass this value.  Image and Video Manager measures quality on a scale from `0` for the lowest quality to `1` for the highest quality, `.1` by default.
     * 
     */
    @Import(name="minFeatureQuality")
    private @Nullable Output<String> minFeatureQuality;

    /**
     * @return Determines the minimum quality level of the feature identified. To consider a feature important, the feature needs to surpass this value.  Image and Video Manager measures quality on a scale from `0` for the lowest quality to `1` for the highest quality, `.1` by default.
     * 
     */
    public Optional<Output<String>> minFeatureQuality() {
        return Optional.ofNullable(this.minFeatureQuality);
    }

    /**
     * Determines the minimum quality level of the feature identified. To consider a feature important, the feature needs to surpass this value.  Image and Video Manager measures quality on a scale from `0` for the lowest quality to `1` for the highest quality, `.1` by default.
     * 
     */
    @Import(name="minFeatureQualityVar")
    private @Nullable Output<String> minFeatureQualityVar;

    /**
     * @return Determines the minimum quality level of the feature identified. To consider a feature important, the feature needs to surpass this value.  Image and Video Manager measures quality on a scale from `0` for the lowest quality to `1` for the highest quality, `.1` by default.
     * 
     */
    public Optional<Output<String>> minFeatureQualityVar() {
        return Optional.ofNullable(this.minFeatureQualityVar);
    }

    /**
     * Adds space around the region of interest. The amount of padding added is directly related to the size of the bounding box of the selected features. Specifically, the region of interest is expanded in all directions by the largest dimension of the bounding box of the selected features multiplied by this value.
     * 
     */
    @Import(name="padding")
    private @Nullable Output<String> padding;

    /**
     * @return Adds space around the region of interest. The amount of padding added is directly related to the size of the bounding box of the selected features. Specifically, the region of interest is expanded in all directions by the largest dimension of the bounding box of the selected features multiplied by this value.
     * 
     */
    public Optional<Output<String>> padding() {
        return Optional.ofNullable(this.padding);
    }

    /**
     * Adds space around the region of interest. The amount of padding added is directly related to the size of the bounding box of the selected features. Specifically, the region of interest is expanded in all directions by the largest dimension of the bounding box of the selected features multiplied by this value.
     * 
     */
    @Import(name="paddingVar")
    private @Nullable Output<String> paddingVar;

    /**
     * @return Adds space around the region of interest. The amount of padding added is directly related to the size of the bounding box of the selected features. Specifically, the region of interest is expanded in all directions by the largest dimension of the bounding box of the selected features multiplied by this value.
     * 
     */
    public Optional<Output<String>> paddingVar() {
        return Optional.ofNullable(this.paddingVar);
    }

    /**
     * Specifies how to crop or scale a crop area for the features identified in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` performs a raw crop around the features, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and features as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the features, relative to the specified `width` and `height` values. Allows Variable substitution.
     * 
     */
    @Import(name="style")
    private @Nullable Output<String> style;

    /**
     * @return Specifies how to crop or scale a crop area for the features identified in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` performs a raw crop around the features, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and features as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the features, relative to the specified `width` and `height` values. Allows Variable substitution.
     * 
     */
    public Optional<Output<String>> style() {
        return Optional.ofNullable(this.style);
    }

    /**
     * Specifies how to crop or scale a crop area for the features identified in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` performs a raw crop around the features, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and features as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the features, relative to the specified `width` and `height` values. Allows Variable substitution.
     * 
     */
    @Import(name="styleVar")
    private @Nullable Output<String> styleVar;

    /**
     * @return Specifies how to crop or scale a crop area for the features identified in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` performs a raw crop around the features, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and features as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the features, relative to the specified `width` and `height` values. Allows Variable substitution.
     * 
     */
    public Optional<Output<String>> styleVar() {
        return Optional.ofNullable(this.styleVar);
    }

    /**
     * The width in pixels of the output image relative to the specified `style` value.
     * 
     */
    @Import(name="width")
    private @Nullable Output<String> width;

    /**
     * @return The width in pixels of the output image relative to the specified `style` value.
     * 
     */
    public Optional<Output<String>> width() {
        return Optional.ofNullable(this.width);
    }

    /**
     * The width in pixels of the output image relative to the specified `style` value.
     * 
     */
    @Import(name="widthVar")
    private @Nullable Output<String> widthVar;

    /**
     * @return The width in pixels of the output image relative to the specified `style` value.
     * 
     */
    public Optional<Output<String>> widthVar() {
        return Optional.ofNullable(this.widthVar);
    }

    private GetImagingPolicyImagePolicyTransformationFeatureCropArgs() {}

    private GetImagingPolicyImagePolicyTransformationFeatureCropArgs(GetImagingPolicyImagePolicyTransformationFeatureCropArgs $) {
        this.failGravity = $.failGravity;
        this.failGravityVar = $.failGravityVar;
        this.featureRadius = $.featureRadius;
        this.featureRadiusVar = $.featureRadiusVar;
        this.gravity = $.gravity;
        this.gravityVar = $.gravityVar;
        this.height = $.height;
        this.heightVar = $.heightVar;
        this.maxFeatures = $.maxFeatures;
        this.maxFeaturesVar = $.maxFeaturesVar;
        this.minFeatureQuality = $.minFeatureQuality;
        this.minFeatureQualityVar = $.minFeatureQualityVar;
        this.padding = $.padding;
        this.paddingVar = $.paddingVar;
        this.style = $.style;
        this.styleVar = $.styleVar;
        this.width = $.width;
        this.widthVar = $.widthVar;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationFeatureCropArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationFeatureCropArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationFeatureCropArgs();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationFeatureCropArgs defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationFeatureCropArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param failGravity Controls placement of the crop if Image and Video Manager does not detect any features in the image. Directions are relative to the edges of the image being transformed.
         * 
         * @return builder
         * 
         */
        public Builder failGravity(@Nullable Output<String> failGravity) {
            $.failGravity = failGravity;
            return this;
        }

        /**
         * @param failGravity Controls placement of the crop if Image and Video Manager does not detect any features in the image. Directions are relative to the edges of the image being transformed.
         * 
         * @return builder
         * 
         */
        public Builder failGravity(String failGravity) {
            return failGravity(Output.of(failGravity));
        }

        /**
         * @param failGravityVar Controls placement of the crop if Image and Video Manager does not detect any features in the image. Directions are relative to the edges of the image being transformed.
         * 
         * @return builder
         * 
         */
        public Builder failGravityVar(@Nullable Output<String> failGravityVar) {
            $.failGravityVar = failGravityVar;
            return this;
        }

        /**
         * @param failGravityVar Controls placement of the crop if Image and Video Manager does not detect any features in the image. Directions are relative to the edges of the image being transformed.
         * 
         * @return builder
         * 
         */
        public Builder failGravityVar(String failGravityVar) {
            return failGravityVar(Output.of(failGravityVar));
        }

        /**
         * @param featureRadius The size in pixels of the important features to search for. If identified, two features never appear closer together than this value, `8.0` by default.
         * 
         * @return builder
         * 
         */
        public Builder featureRadius(@Nullable Output<String> featureRadius) {
            $.featureRadius = featureRadius;
            return this;
        }

        /**
         * @param featureRadius The size in pixels of the important features to search for. If identified, two features never appear closer together than this value, `8.0` by default.
         * 
         * @return builder
         * 
         */
        public Builder featureRadius(String featureRadius) {
            return featureRadius(Output.of(featureRadius));
        }

        /**
         * @param featureRadiusVar The size in pixels of the important features to search for. If identified, two features never appear closer together than this value, `8.0` by default.
         * 
         * @return builder
         * 
         */
        public Builder featureRadiusVar(@Nullable Output<String> featureRadiusVar) {
            $.featureRadiusVar = featureRadiusVar;
            return this;
        }

        /**
         * @param featureRadiusVar The size in pixels of the important features to search for. If identified, two features never appear closer together than this value, `8.0` by default.
         * 
         * @return builder
         * 
         */
        public Builder featureRadiusVar(String featureRadiusVar) {
            return featureRadiusVar(Output.of(featureRadiusVar));
        }

        /**
         * @param gravity Controls placement of the crop. Directions are relative to the region of interest plus padding.
         * 
         * @return builder
         * 
         */
        public Builder gravity(@Nullable Output<String> gravity) {
            $.gravity = gravity;
            return this;
        }

        /**
         * @param gravity Controls placement of the crop. Directions are relative to the region of interest plus padding.
         * 
         * @return builder
         * 
         */
        public Builder gravity(String gravity) {
            return gravity(Output.of(gravity));
        }

        /**
         * @param gravityVar Controls placement of the crop. Directions are relative to the region of interest plus padding.
         * 
         * @return builder
         * 
         */
        public Builder gravityVar(@Nullable Output<String> gravityVar) {
            $.gravityVar = gravityVar;
            return this;
        }

        /**
         * @param gravityVar Controls placement of the crop. Directions are relative to the region of interest plus padding.
         * 
         * @return builder
         * 
         */
        public Builder gravityVar(String gravityVar) {
            return gravityVar(Output.of(gravityVar));
        }

        /**
         * @param height The height in pixels of the output image relative to the specified `style` value.
         * 
         * @return builder
         * 
         */
        public Builder height(@Nullable Output<String> height) {
            $.height = height;
            return this;
        }

        /**
         * @param height The height in pixels of the output image relative to the specified `style` value.
         * 
         * @return builder
         * 
         */
        public Builder height(String height) {
            return height(Output.of(height));
        }

        /**
         * @param heightVar The height in pixels of the output image relative to the specified `style` value.
         * 
         * @return builder
         * 
         */
        public Builder heightVar(@Nullable Output<String> heightVar) {
            $.heightVar = heightVar;
            return this;
        }

        /**
         * @param heightVar The height in pixels of the output image relative to the specified `style` value.
         * 
         * @return builder
         * 
         */
        public Builder heightVar(String heightVar) {
            return heightVar(Output.of(heightVar));
        }

        /**
         * @param maxFeatures The maximum number of features to identify as important features, `32` by default. The strongest features are always chosen.
         * 
         * @return builder
         * 
         */
        public Builder maxFeatures(@Nullable Output<String> maxFeatures) {
            $.maxFeatures = maxFeatures;
            return this;
        }

        /**
         * @param maxFeatures The maximum number of features to identify as important features, `32` by default. The strongest features are always chosen.
         * 
         * @return builder
         * 
         */
        public Builder maxFeatures(String maxFeatures) {
            return maxFeatures(Output.of(maxFeatures));
        }

        /**
         * @param maxFeaturesVar The maximum number of features to identify as important features, `32` by default. The strongest features are always chosen.
         * 
         * @return builder
         * 
         */
        public Builder maxFeaturesVar(@Nullable Output<String> maxFeaturesVar) {
            $.maxFeaturesVar = maxFeaturesVar;
            return this;
        }

        /**
         * @param maxFeaturesVar The maximum number of features to identify as important features, `32` by default. The strongest features are always chosen.
         * 
         * @return builder
         * 
         */
        public Builder maxFeaturesVar(String maxFeaturesVar) {
            return maxFeaturesVar(Output.of(maxFeaturesVar));
        }

        /**
         * @param minFeatureQuality Determines the minimum quality level of the feature identified. To consider a feature important, the feature needs to surpass this value.  Image and Video Manager measures quality on a scale from `0` for the lowest quality to `1` for the highest quality, `.1` by default.
         * 
         * @return builder
         * 
         */
        public Builder minFeatureQuality(@Nullable Output<String> minFeatureQuality) {
            $.minFeatureQuality = minFeatureQuality;
            return this;
        }

        /**
         * @param minFeatureQuality Determines the minimum quality level of the feature identified. To consider a feature important, the feature needs to surpass this value.  Image and Video Manager measures quality on a scale from `0` for the lowest quality to `1` for the highest quality, `.1` by default.
         * 
         * @return builder
         * 
         */
        public Builder minFeatureQuality(String minFeatureQuality) {
            return minFeatureQuality(Output.of(minFeatureQuality));
        }

        /**
         * @param minFeatureQualityVar Determines the minimum quality level of the feature identified. To consider a feature important, the feature needs to surpass this value.  Image and Video Manager measures quality on a scale from `0` for the lowest quality to `1` for the highest quality, `.1` by default.
         * 
         * @return builder
         * 
         */
        public Builder minFeatureQualityVar(@Nullable Output<String> minFeatureQualityVar) {
            $.minFeatureQualityVar = minFeatureQualityVar;
            return this;
        }

        /**
         * @param minFeatureQualityVar Determines the minimum quality level of the feature identified. To consider a feature important, the feature needs to surpass this value.  Image and Video Manager measures quality on a scale from `0` for the lowest quality to `1` for the highest quality, `.1` by default.
         * 
         * @return builder
         * 
         */
        public Builder minFeatureQualityVar(String minFeatureQualityVar) {
            return minFeatureQualityVar(Output.of(minFeatureQualityVar));
        }

        /**
         * @param padding Adds space around the region of interest. The amount of padding added is directly related to the size of the bounding box of the selected features. Specifically, the region of interest is expanded in all directions by the largest dimension of the bounding box of the selected features multiplied by this value.
         * 
         * @return builder
         * 
         */
        public Builder padding(@Nullable Output<String> padding) {
            $.padding = padding;
            return this;
        }

        /**
         * @param padding Adds space around the region of interest. The amount of padding added is directly related to the size of the bounding box of the selected features. Specifically, the region of interest is expanded in all directions by the largest dimension of the bounding box of the selected features multiplied by this value.
         * 
         * @return builder
         * 
         */
        public Builder padding(String padding) {
            return padding(Output.of(padding));
        }

        /**
         * @param paddingVar Adds space around the region of interest. The amount of padding added is directly related to the size of the bounding box of the selected features. Specifically, the region of interest is expanded in all directions by the largest dimension of the bounding box of the selected features multiplied by this value.
         * 
         * @return builder
         * 
         */
        public Builder paddingVar(@Nullable Output<String> paddingVar) {
            $.paddingVar = paddingVar;
            return this;
        }

        /**
         * @param paddingVar Adds space around the region of interest. The amount of padding added is directly related to the size of the bounding box of the selected features. Specifically, the region of interest is expanded in all directions by the largest dimension of the bounding box of the selected features multiplied by this value.
         * 
         * @return builder
         * 
         */
        public Builder paddingVar(String paddingVar) {
            return paddingVar(Output.of(paddingVar));
        }

        /**
         * @param style Specifies how to crop or scale a crop area for the features identified in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` performs a raw crop around the features, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and features as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the features, relative to the specified `width` and `height` values. Allows Variable substitution.
         * 
         * @return builder
         * 
         */
        public Builder style(@Nullable Output<String> style) {
            $.style = style;
            return this;
        }

        /**
         * @param style Specifies how to crop or scale a crop area for the features identified in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` performs a raw crop around the features, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and features as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the features, relative to the specified `width` and `height` values. Allows Variable substitution.
         * 
         * @return builder
         * 
         */
        public Builder style(String style) {
            return style(Output.of(style));
        }

        /**
         * @param styleVar Specifies how to crop or scale a crop area for the features identified in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` performs a raw crop around the features, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and features as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the features, relative to the specified `width` and `height` values. Allows Variable substitution.
         * 
         * @return builder
         * 
         */
        public Builder styleVar(@Nullable Output<String> styleVar) {
            $.styleVar = styleVar;
            return this;
        }

        /**
         * @param styleVar Specifies how to crop or scale a crop area for the features identified in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` performs a raw crop around the features, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and features as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the features, relative to the specified `width` and `height` values. Allows Variable substitution.
         * 
         * @return builder
         * 
         */
        public Builder styleVar(String styleVar) {
            return styleVar(Output.of(styleVar));
        }

        /**
         * @param width The width in pixels of the output image relative to the specified `style` value.
         * 
         * @return builder
         * 
         */
        public Builder width(@Nullable Output<String> width) {
            $.width = width;
            return this;
        }

        /**
         * @param width The width in pixels of the output image relative to the specified `style` value.
         * 
         * @return builder
         * 
         */
        public Builder width(String width) {
            return width(Output.of(width));
        }

        /**
         * @param widthVar The width in pixels of the output image relative to the specified `style` value.
         * 
         * @return builder
         * 
         */
        public Builder widthVar(@Nullable Output<String> widthVar) {
            $.widthVar = widthVar;
            return this;
        }

        /**
         * @param widthVar The width in pixels of the output image relative to the specified `style` value.
         * 
         * @return builder
         * 
         */
        public Builder widthVar(String widthVar) {
            return widthVar(Output.of(widthVar));
        }

        public GetImagingPolicyImagePolicyTransformationFeatureCropArgs build() {
            return $;
        }
    }

}
